id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Global
  language: CSharp
  name:
    CSharp: Global
    VB: ''
  nameWithType:
    CSharp: Global
    VB: ''
  qualifiedName:
    CSharp: Global
    VB: ''
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Global.AdjustTransformToCurve
    commentId: T:Global.AdjustTransformToCurve
    language: CSharp
    name:
      CSharp: AdjustTransformToCurve
      VB: AdjustTransformToCurve
    nameWithType:
      CSharp: AdjustTransformToCurve
      VB: AdjustTransformToCurve
    qualifiedName:
      CSharp: AdjustTransformToCurve
      VB: AdjustTransformToCurve
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AdjustTransformToCurve
      path: ''
      startLine: 4
    syntax:
      content:
        CSharp: 'public class AdjustTransformToCurve : MonoBehaviour'
        VB: >-
          Public Class AdjustTransformToCurve

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.AdjustTransformToCurve.localPosition
      commentId: F:Global.AdjustTransformToCurve.localPosition
      language: CSharp
      name:
        CSharp: localPosition
        VB: localPosition
      nameWithType:
        CSharp: AdjustTransformToCurve.localPosition
        VB: AdjustTransformToCurve.localPosition
      qualifiedName:
        CSharp: AdjustTransformToCurve.localPosition
        VB: AdjustTransformToCurve.localPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: localPosition
        path: ''
        startLine: 7
      syntax:
        content:
          CSharp: public bool localPosition
          VB: Public localPosition As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.AnimalAnimationManager
    commentId: T:Global.AnimalAnimationManager
    language: CSharp
    name:
      CSharp: AnimalAnimationManager
      VB: AnimalAnimationManager
    nameWithType:
      CSharp: AnimalAnimationManager
      VB: AnimalAnimationManager
    qualifiedName:
      CSharp: AnimalAnimationManager
      VB: AnimalAnimationManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimalAnimationManager
      path: ''
      startLine: 11
    syntax:
      content:
        CSharp: 'public class AnimalAnimationManager : MonoBehaviour'
        VB: >-
          Public Class AnimalAnimationManager

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.AutoWrapper
    commentId: T:Global.AutoWrapper
    language: CSharp
    name:
      CSharp: AutoWrapper
      VB: AutoWrapper
    nameWithType:
      CSharp: AutoWrapper
      VB: AutoWrapper
    qualifiedName:
      CSharp: AutoWrapper
      VB: AutoWrapper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AutoWrapper
      path: ''
      startLine: 26
    syntax:
      content:
        CSharp: 'public class AutoWrapper : MonoBehaviour'
        VB: >-
          Public Class AutoWrapper

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.AvatarAttachedPart
    commentId: T:Global.AvatarAttachedPart
    language: CSharp
    name:
      CSharp: AvatarAttachedPart
      VB: AvatarAttachedPart
    nameWithType:
      CSharp: AvatarAttachedPart
      VB: AvatarAttachedPart
    qualifiedName:
      CSharp: AvatarAttachedPart
      VB: AvatarAttachedPart
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AvatarAttachedPart
      path: ''
      startLine: 34
    summary: 'Handles attaching parts to a players avatar '
    example: []
    syntax:
      content:
        CSharp: 'public class AvatarAttachedPart : AvatarPart'
        VB: >-
          Public Class AvatarAttachedPart

              Inherits AvatarPart
    inheritance:
    - System.Object
    - Global.AvatarPart
    inheritedMembers:
    - Global.AvatarPart.MalePrefab
    - Global.AvatarPart.FemalePrefab
    - Global.AvatarPart.CurvedMaterials
    - Global.AvatarPart.UIMaterials
    - Global.AvatarPart.UseMaterialTexture
    - Global.AvatarPart.firstTint
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.AvatarAttachedPart.AttachPointName
      commentId: F:Global.AvatarAttachedPart.AttachPointName
      language: CSharp
      name:
        CSharp: AttachPointName
        VB: AttachPointName
      nameWithType:
        CSharp: AvatarAttachedPart.AttachPointName
        VB: AvatarAttachedPart.AttachPointName
      qualifiedName:
        CSharp: AvatarAttachedPart.AttachPointName
        VB: AvatarAttachedPart.AttachPointName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AttachPointName
        path: ''
        startLine: 36
      syntax:
        content:
          CSharp: public string AttachPointName
          VB: Public AttachPointName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarAttachedPart.useCustomOffsets
      commentId: F:Global.AvatarAttachedPart.useCustomOffsets
      language: CSharp
      name:
        CSharp: useCustomOffsets
        VB: useCustomOffsets
      nameWithType:
        CSharp: AvatarAttachedPart.useCustomOffsets
        VB: AvatarAttachedPart.useCustomOffsets
      qualifiedName:
        CSharp: AvatarAttachedPart.useCustomOffsets
        VB: AvatarAttachedPart.useCustomOffsets
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: useCustomOffsets
        path: ''
        startLine: 37
      syntax:
        content:
          CSharp: public bool useCustomOffsets
          VB: Public useCustomOffsets As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarAttachedPart.positionOffset
      commentId: F:Global.AvatarAttachedPart.positionOffset
      language: CSharp
      name:
        CSharp: positionOffset
        VB: positionOffset
      nameWithType:
        CSharp: AvatarAttachedPart.positionOffset
        VB: AvatarAttachedPart.positionOffset
      qualifiedName:
        CSharp: AvatarAttachedPart.positionOffset
        VB: AvatarAttachedPart.positionOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: positionOffset
        path: ''
        startLine: 38
      syntax:
        content:
          CSharp: public UnityEngine.Vector3 positionOffset
          VB: Public positionOffset As UnityEngine.Vector3
        return:
          type: Global.UnityEngine.Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarAttachedPart.rotationOffset
      commentId: F:Global.AvatarAttachedPart.rotationOffset
      language: CSharp
      name:
        CSharp: rotationOffset
        VB: rotationOffset
      nameWithType:
        CSharp: AvatarAttachedPart.rotationOffset
        VB: AvatarAttachedPart.rotationOffset
      qualifiedName:
        CSharp: AvatarAttachedPart.rotationOffset
        VB: AvatarAttachedPart.rotationOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rotationOffset
        path: ''
        startLine: 41
      syntax:
        content:
          CSharp: public Quaternion rotationOffset
          VB: Public rotationOffset As Quaternion
        return:
          type: Global.Quaternion
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.TintType
    commentId: T:Global.TintType
    language: CSharp
    name:
      CSharp: TintType
      VB: TintType
    nameWithType:
      CSharp: TintType
      VB: TintType
    qualifiedName:
      CSharp: TintType
      VB: TintType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TintType
      path: ''
      startLine: 45
    syntax:
      content:
        CSharp: public enum TintType
        VB: Public Enum TintType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.TintType.Clothing
      commentId: F:Global.TintType.Clothing
      language: CSharp
      name:
        CSharp: Clothing
        VB: Clothing
      nameWithType:
        CSharp: TintType.Clothing
        VB: TintType.Clothing
      qualifiedName:
        CSharp: TintType.Clothing
        VB: TintType.Clothing
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Clothing
        path: ''
        startLine: 47
      syntax:
        content:
          CSharp: Clothing = 0
          VB: Clothing = 0
        return:
          type: Global.TintType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.TintType.Skin
      commentId: F:Global.TintType.Skin
      language: CSharp
      name:
        CSharp: Skin
        VB: Skin
      nameWithType:
        CSharp: TintType.Skin
        VB: TintType.Skin
      qualifiedName:
        CSharp: TintType.Skin
        VB: TintType.Skin
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Skin
        path: ''
        startLine: 48
      syntax:
        content:
          CSharp: Skin = 1
          VB: Skin = 1
        return:
          type: Global.TintType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.TintType.Hair
      commentId: F:Global.TintType.Hair
      language: CSharp
      name:
        CSharp: Hair
        VB: Hair
      nameWithType:
        CSharp: TintType.Hair
        VB: TintType.Hair
      qualifiedName:
        CSharp: TintType.Hair
        VB: TintType.Hair
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Hair
        path: ''
        startLine: 49
      syntax:
        content:
          CSharp: Hair = 2
          VB: Hair = 2
        return:
          type: Global.TintType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.AvatarPart
    commentId: T:Global.AvatarPart
    language: CSharp
    name:
      CSharp: AvatarPart
      VB: AvatarPart
    nameWithType:
      CSharp: AvatarPart
      VB: AvatarPart
    qualifiedName:
      CSharp: AvatarPart
      VB: AvatarPart
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AvatarPart
      path: ''
      startLine: 52
    syntax:
      content:
        CSharp: 'public abstract class AvatarPart : MonoBehaviour'
        VB: >-
          Public MustInherit Class AvatarPart

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Global.AvatarPart.MalePrefab
      commentId: F:Global.AvatarPart.MalePrefab
      language: CSharp
      name:
        CSharp: MalePrefab
        VB: MalePrefab
      nameWithType:
        CSharp: AvatarPart.MalePrefab
        VB: AvatarPart.MalePrefab
      qualifiedName:
        CSharp: AvatarPart.MalePrefab
        VB: AvatarPart.MalePrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MalePrefab
        path: ''
        startLine: 56
      syntax:
        content:
          CSharp: public GameObject MalePrefab
          VB: Public MalePrefab As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarPart.FemalePrefab
      commentId: F:Global.AvatarPart.FemalePrefab
      language: CSharp
      name:
        CSharp: FemalePrefab
        VB: FemalePrefab
      nameWithType:
        CSharp: AvatarPart.FemalePrefab
        VB: AvatarPart.FemalePrefab
      qualifiedName:
        CSharp: AvatarPart.FemalePrefab
        VB: AvatarPart.FemalePrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FemalePrefab
        path: ''
        startLine: 57
      syntax:
        content:
          CSharp: public GameObject FemalePrefab
          VB: Public FemalePrefab As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarPart.CurvedMaterials
      commentId: F:Global.AvatarPart.CurvedMaterials
      language: CSharp
      name:
        CSharp: CurvedMaterials
        VB: CurvedMaterials
      nameWithType:
        CSharp: AvatarPart.CurvedMaterials
        VB: AvatarPart.CurvedMaterials
      qualifiedName:
        CSharp: AvatarPart.CurvedMaterials
        VB: AvatarPart.CurvedMaterials
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CurvedMaterials
        path: ''
        startLine: 60
      syntax:
        content:
          CSharp: public Material[] CurvedMaterials
          VB: Public CurvedMaterials As Material()
        return:
          type: Global.Material[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarPart.UIMaterials
      commentId: F:Global.AvatarPart.UIMaterials
      language: CSharp
      name:
        CSharp: UIMaterials
        VB: UIMaterials
      nameWithType:
        CSharp: AvatarPart.UIMaterials
        VB: AvatarPart.UIMaterials
      qualifiedName:
        CSharp: AvatarPart.UIMaterials
        VB: AvatarPart.UIMaterials
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UIMaterials
        path: ''
        startLine: 61
      syntax:
        content:
          CSharp: public Material[] UIMaterials
          VB: Public UIMaterials As Material()
        return:
          type: Global.Material[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarPart.UseMaterialTexture
      commentId: F:Global.AvatarPart.UseMaterialTexture
      language: CSharp
      name:
        CSharp: UseMaterialTexture
        VB: UseMaterialTexture
      nameWithType:
        CSharp: AvatarPart.UseMaterialTexture
        VB: AvatarPart.UseMaterialTexture
      qualifiedName:
        CSharp: AvatarPart.UseMaterialTexture
        VB: AvatarPart.UseMaterialTexture
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UseMaterialTexture
        path: ''
        startLine: 62
      syntax:
        content:
          CSharp: public bool UseMaterialTexture
          VB: Public UseMaterialTexture As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.AvatarPart.firstTint
      commentId: F:Global.AvatarPart.firstTint
      language: CSharp
      name:
        CSharp: firstTint
        VB: firstTint
      nameWithType:
        CSharp: AvatarPart.firstTint
        VB: AvatarPart.firstTint
      qualifiedName:
        CSharp: AvatarPart.firstTint
        VB: AvatarPart.firstTint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: firstTint
        path: ''
        startLine: 63
      syntax:
        content:
          CSharp: public TintType firstTint
          VB: Public firstTint As TintType
        return:
          type: Global.TintType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.CustomControlName
    commentId: T:Global.CustomControlName
    language: CSharp
    name:
      CSharp: CustomControlName
      VB: CustomControlName
    nameWithType:
      CSharp: CustomControlName
      VB: CustomControlName
    qualifiedName:
      CSharp: CustomControlName
      VB: CustomControlName
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CustomControlName
      path: ''
      startLine: 71
    summary: 'Component that is read by the ControlPopupUI to give custom text for object&apos;s controls when it is targeted. '
    example: []
    syntax:
      content:
        CSharp: 'public class CustomControlName : MonoBehaviour'
        VB: >-
          Public Class CustomControlName

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.CustomControlName.LeftMouseNameFunc
      commentId: F:Global.CustomControlName.LeftMouseNameFunc
      language: CSharp
      name:
        CSharp: LeftMouseNameFunc
        VB: LeftMouseNameFunc
      nameWithType:
        CSharp: CustomControlName.LeftMouseNameFunc
        VB: CustomControlName.LeftMouseNameFunc
      qualifiedName:
        CSharp: CustomControlName.LeftMouseNameFunc
        VB: CustomControlName.LeftMouseNameFunc
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LeftMouseNameFunc
        path: ''
        startLine: 80
      syntax:
        content:
          CSharp: public Func<string> LeftMouseNameFunc
          VB: Public LeftMouseNameFunc As Func(Of String)
        return:
          type: Global.Func{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.CustomControlName.RightMouseNameFunc
      commentId: F:Global.CustomControlName.RightMouseNameFunc
      language: CSharp
      name:
        CSharp: RightMouseNameFunc
        VB: RightMouseNameFunc
      nameWithType:
        CSharp: CustomControlName.RightMouseNameFunc
        VB: CustomControlName.RightMouseNameFunc
      qualifiedName:
        CSharp: CustomControlName.RightMouseNameFunc
        VB: CustomControlName.RightMouseNameFunc
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightMouseNameFunc
        path: ''
        startLine: 81
      syntax:
        content:
          CSharp: public Func<string> RightMouseNameFunc
          VB: Public RightMouseNameFunc As Func(Of String)
        return:
          type: Global.Func{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.CustomControlName.InteractionNameFunc
      commentId: F:Global.CustomControlName.InteractionNameFunc
      language: CSharp
      name:
        CSharp: InteractionNameFunc
        VB: InteractionNameFunc
      nameWithType:
        CSharp: CustomControlName.InteractionNameFunc
        VB: CustomControlName.InteractionNameFunc
      qualifiedName:
        CSharp: CustomControlName.InteractionNameFunc
        VB: CustomControlName.InteractionNameFunc
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InteractionNameFunc
        path: ''
        startLine: 82
      syntax:
        content:
          CSharp: public Func<string> InteractionNameFunc
          VB: Public InteractionNameFunc As Func(Of String)
        return:
          type: Global.Func{System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.CustomControlName.LeftMouseName
      commentId: P:Global.CustomControlName.LeftMouseName
      language: CSharp
      name:
        CSharp: LeftMouseName
        VB: LeftMouseName
      nameWithType:
        CSharp: CustomControlName.LeftMouseName
        VB: CustomControlName.LeftMouseName
      qualifiedName:
        CSharp: CustomControlName.LeftMouseName
        VB: CustomControlName.LeftMouseName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LeftMouseName
        path: ''
        startLine: 85
      syntax:
        content:
          CSharp: public string LeftMouseName { get; }
          VB: Public ReadOnly Property LeftMouseName As String
        parameters: []
        return:
          type: System.String
      overload: Global.CustomControlName.LeftMouseName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.CustomControlName.RightMouseName
      commentId: P:Global.CustomControlName.RightMouseName
      language: CSharp
      name:
        CSharp: RightMouseName
        VB: RightMouseName
      nameWithType:
        CSharp: CustomControlName.RightMouseName
        VB: CustomControlName.RightMouseName
      qualifiedName:
        CSharp: CustomControlName.RightMouseName
        VB: CustomControlName.RightMouseName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RightMouseName
        path: ''
        startLine: 86
      syntax:
        content:
          CSharp: public string RightMouseName { get; }
          VB: Public ReadOnly Property RightMouseName As String
        parameters: []
        return:
          type: System.String
      overload: Global.CustomControlName.RightMouseName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.CustomControlName.InteractionName
      commentId: P:Global.CustomControlName.InteractionName
      language: CSharp
      name:
        CSharp: InteractionName
        VB: InteractionName
      nameWithType:
        CSharp: CustomControlName.InteractionName
        VB: CustomControlName.InteractionName
      qualifiedName:
        CSharp: CustomControlName.InteractionName
        VB: CustomControlName.InteractionName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InteractionName
        path: ''
        startLine: 87
      syntax:
        content:
          CSharp: public string InteractionName { get; }
          VB: Public ReadOnly Property InteractionName As String
        parameters: []
        return:
          type: System.String
      overload: Global.CustomControlName.InteractionName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.EcoLight
    commentId: T:Global.EcoLight
    language: CSharp
    name:
      CSharp: EcoLight
      VB: EcoLight
    nameWithType:
      CSharp: EcoLight
      VB: EcoLight
    qualifiedName:
      CSharp: EcoLight
      VB: EcoLight
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EcoLight
      path: ''
      startLine: 94
    syntax:
      content:
        CSharp: 'public class EcoLight : MonoBehaviour'
        VB: >-
          Public Class EcoLight

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.EmbeddedLocString
    commentId: T:Global.EmbeddedLocString
    language: CSharp
    name:
      CSharp: EmbeddedLocString
      VB: EmbeddedLocString
    nameWithType:
      CSharp: EmbeddedLocString
      VB: EmbeddedLocString
    qualifiedName:
      CSharp: EmbeddedLocString
      VB: EmbeddedLocString
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EmbeddedLocString
      path: ''
      startLine: 104
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class EmbeddedLocString
        VB: >-
          <Serializable>

          Public Class EmbeddedLocString
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.EmbeddedLocString.String
      commentId: F:Global.EmbeddedLocString.String
      language: CSharp
      name:
        CSharp: String
        VB: String
      nameWithType:
        CSharp: EmbeddedLocString.String
        VB: EmbeddedLocString.String
      qualifiedName:
        CSharp: EmbeddedLocString.String
        VB: EmbeddedLocString.String
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: String
        path: ''
        startLine: 108
      syntax:
        content:
          CSharp: public string String
          VB: Public String As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.EmbeddedLocString.Params
      commentId: F:Global.EmbeddedLocString.Params
      language: CSharp
      name:
        CSharp: Params
        VB: Params
      nameWithType:
        CSharp: EmbeddedLocString.Params
        VB: EmbeddedLocString.Params
      qualifiedName:
        CSharp: EmbeddedLocString.Params
        VB: EmbeddedLocString.Params
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Params
        path: ''
        startLine: 110
      syntax:
        content:
          CSharp: public EmbeddedLocStringParameter[] Params
          VB: Public Params As EmbeddedLocStringParameter()
        return:
          type: Global.EmbeddedLocStringParameter[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.EmbeddedLocString.#ctor
      commentId: M:Global.EmbeddedLocString.#ctor
      language: CSharp
      name:
        CSharp: EmbeddedLocString()
        VB: EmbeddedLocString()
      nameWithType:
        CSharp: EmbeddedLocString.EmbeddedLocString()
        VB: EmbeddedLocString.EmbeddedLocString()
      qualifiedName:
        CSharp: EmbeddedLocString.EmbeddedLocString()
        VB: EmbeddedLocString.EmbeddedLocString()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 111
      syntax:
        content:
          CSharp: public EmbeddedLocString()
          VB: Public Sub New
      overload: Global.EmbeddedLocString.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.EmbeddedLocString.op_Implicit(System.String)~EmbeddedLocString
      commentId: M:Global.EmbeddedLocString.op_Implicit(System.String)~EmbeddedLocString
      language: CSharp
      name:
        CSharp: Implicit(String to EmbeddedLocString)
        VB: Widening(String to EmbeddedLocString)
      nameWithType:
        CSharp: EmbeddedLocString.Implicit(String to EmbeddedLocString)
        VB: EmbeddedLocString.Widening(String to EmbeddedLocString)
      qualifiedName:
        CSharp: EmbeddedLocString.Implicit(System.String to EmbeddedLocString)
        VB: EmbeddedLocString.Widening(System.String to EmbeddedLocString)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 112
      syntax:
        content:
          CSharp: public static implicit operator EmbeddedLocString(string val)
          VB: Public Shared Widening Operator CType(val As String) As EmbeddedLocString
        parameters:
        - id: val
          type: System.String
        return:
          type: Global.EmbeddedLocString
      overload: Global.EmbeddedLocString.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EmbeddedLocString.Localized
      commentId: P:Global.EmbeddedLocString.Localized
      language: CSharp
      name:
        CSharp: Localized
        VB: Localized
      nameWithType:
        CSharp: EmbeddedLocString.Localized
        VB: EmbeddedLocString.Localized
      qualifiedName:
        CSharp: EmbeddedLocString.Localized
        VB: EmbeddedLocString.Localized
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Localized
        path: ''
        startLine: 113
      syntax:
        content:
          CSharp: public string Localized { get; }
          VB: Public ReadOnly Property Localized As String
        parameters: []
        return:
          type: System.String
      overload: Global.EmbeddedLocString.Localized*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.EmbeddedLocString.Equals(System.Object)
      commentId: M:Global.EmbeddedLocString.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: EmbeddedLocString.Equals(Object)
        VB: EmbeddedLocString.Equals(Object)
      qualifiedName:
        CSharp: EmbeddedLocString.Equals(System.Object)
        VB: EmbeddedLocString.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Equals
        path: ''
        startLine: 114
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: Global.EmbeddedLocString.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.EmbeddedLocString.GetHashCode
      commentId: M:Global.EmbeddedLocString.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: EmbeddedLocString.GetHashCode()
        VB: EmbeddedLocString.GetHashCode()
      qualifiedName:
        CSharp: EmbeddedLocString.GetHashCode()
        VB: EmbeddedLocString.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetHashCode
        path: ''
        startLine: 115
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: Global.EmbeddedLocString.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.EmbeddedLocString.StringParameterized
      commentId: M:Global.EmbeddedLocString.StringParameterized
      language: CSharp
      name:
        CSharp: StringParameterized()
        VB: StringParameterized()
      nameWithType:
        CSharp: EmbeddedLocString.StringParameterized()
        VB: EmbeddedLocString.StringParameterized()
      qualifiedName:
        CSharp: EmbeddedLocString.StringParameterized()
        VB: EmbeddedLocString.StringParameterized()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StringParameterized
        path: ''
        startLine: 117
      syntax:
        content:
          CSharp: public string StringParameterized()
          VB: Public Function StringParameterized As String
        return:
          type: System.String
      overload: Global.EmbeddedLocString.StringParameterized*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.EmbeddedLocStringParameter
    commentId: T:Global.EmbeddedLocStringParameter
    language: CSharp
    name:
      CSharp: EmbeddedLocStringParameter
      VB: EmbeddedLocStringParameter
    nameWithType:
      CSharp: EmbeddedLocStringParameter
      VB: EmbeddedLocStringParameter
    qualifiedName:
      CSharp: EmbeddedLocStringParameter
      VB: EmbeddedLocStringParameter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EmbeddedLocStringParameter
      path: ''
      startLine: 134
    syntax:
      content:
        CSharp: public class EmbeddedLocStringParameter
        VB: Public Class EmbeddedLocStringParameter
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.EmbeddedLocStringParameter.stringParameter
      commentId: F:Global.EmbeddedLocStringParameter.stringParameter
      language: CSharp
      name:
        CSharp: stringParameter
        VB: stringParameter
      nameWithType:
        CSharp: EmbeddedLocStringParameter.stringParameter
        VB: EmbeddedLocStringParameter.stringParameter
      qualifiedName:
        CSharp: EmbeddedLocStringParameter.stringParameter
        VB: EmbeddedLocStringParameter.stringParameter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: stringParameter
        path: ''
        startLine: 137
      syntax:
        content:
          CSharp: public string stringParameter
          VB: Public stringParameter As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.EmbeddedLocStringParameter.localize
      commentId: F:Global.EmbeddedLocStringParameter.localize
      language: CSharp
      name:
        CSharp: localize
        VB: localize
      nameWithType:
        CSharp: EmbeddedLocStringParameter.localize
        VB: EmbeddedLocStringParameter.localize
      qualifiedName:
        CSharp: EmbeddedLocStringParameter.localize
        VB: EmbeddedLocStringParameter.localize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: localize
        path: ''
        startLine: 138
      syntax:
        content:
          CSharp: public bool localize
          VB: Public localize As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.FontContainer
    commentId: T:Global.FontContainer
    language: CSharp
    name:
      CSharp: FontContainer
      VB: FontContainer
    nameWithType:
      CSharp: FontContainer
      VB: FontContainer
    qualifiedName:
      CSharp: FontContainer
      VB: FontContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FontContainer
      path: ''
      startLine: 146
    summary: "\n<p>Container object for passing font assets from mod client bundles to the Eco client for use in the rich text tag parser system.</p>\n<p>See the Eco wiki page available <a href=\"https://wiki.play.eco/en/Custom_Fonts\">here</a> for more info.</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FontContainer : MonoBehaviour'
        VB: >-
          Public Class FontContainer

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.FontContainer.RegisteredFonts
      commentId: F:Global.FontContainer.RegisteredFonts
      language: CSharp
      name:
        CSharp: RegisteredFonts
        VB: RegisteredFonts
      nameWithType:
        CSharp: FontContainer.RegisteredFonts
        VB: FontContainer.RegisteredFonts
      qualifiedName:
        CSharp: FontContainer.RegisteredFonts
        VB: FontContainer.RegisteredFonts
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RegisteredFonts
        path: ''
        startLine: 148
      syntax:
        content:
          CSharp: public Font[] RegisteredFonts
          VB: Public RegisteredFonts As Font()
        return:
          type: Global.Font[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.HighlightableObject
    commentId: T:Global.HighlightableObject
    language: CSharp
    name:
      CSharp: HighlightableObject
      VB: HighlightableObject
    nameWithType:
      CSharp: HighlightableObject
      VB: HighlightableObject
    qualifiedName:
      CSharp: HighlightableObject
      VB: HighlightableObject
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HighlightableObject
      path: ''
      startLine: 157
    syntax:
      content:
        CSharp: 'public class HighlightableObject : MonoBehaviour'
        VB: >-
          Public Class HighlightableObject

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.HighlightableObject.seeThrough
      commentId: F:Global.HighlightableObject.seeThrough
      language: CSharp
      name:
        CSharp: seeThrough
        VB: seeThrough
      nameWithType:
        CSharp: HighlightableObject.seeThrough
        VB: HighlightableObject.seeThrough
      qualifiedName:
        CSharp: HighlightableObject.seeThrough
        VB: HighlightableObject.seeThrough
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: seeThrough
        path: ''
        startLine: 159
      syntax:
        content:
          CSharp: public bool seeThrough
          VB: Public seeThrough As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ILocalizable
    commentId: T:Global.ILocalizable
    language: CSharp
    name:
      CSharp: ILocalizable
      VB: ILocalizable
    nameWithType:
      CSharp: ILocalizable
      VB: ILocalizable
    qualifiedName:
      CSharp: ILocalizable
      VB: ILocalizable
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ILocalizable
      path: ''
      startLine: 164
    syntax:
      content:
        CSharp: public interface ILocalizable
        VB: Public Interface ILocalizable
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Global.ILocalizable.ExtractStrings
      commentId: M:Global.ILocalizable.ExtractStrings
      language: CSharp
      name:
        CSharp: ExtractStrings()
        VB: ExtractStrings()
      nameWithType:
        CSharp: ILocalizable.ExtractStrings()
        VB: ILocalizable.ExtractStrings()
      qualifiedName:
        CSharp: ILocalizable.ExtractStrings()
        VB: ILocalizable.ExtractStrings()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ExtractStrings
        path: ''
        startLine: 166
      syntax:
        content:
          CSharp: StringToLocalize[] ExtractStrings()
          VB: Function ExtractStrings As StringToLocalize()
        return:
          type: Global.StringToLocalize[]
      overload: Global.ILocalizable.ExtractStrings*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.ILocalizable.GetComponent
      commentId: M:Global.ILocalizable.GetComponent
      language: CSharp
      name:
        CSharp: GetComponent()
        VB: GetComponent()
      nameWithType:
        CSharp: ILocalizable.GetComponent()
        VB: ILocalizable.GetComponent()
      qualifiedName:
        CSharp: ILocalizable.GetComponent()
        VB: ILocalizable.GetComponent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetComponent
        path: ''
        startLine: 167
      syntax:
        content:
          CSharp: Component GetComponent()
          VB: Function GetComponent As Component
        return:
          type: Global.Component
      overload: Global.ILocalizable.GetComponent*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.ILocalizable.OnApplyChanges
      commentId: M:Global.ILocalizable.OnApplyChanges
      language: CSharp
      name:
        CSharp: OnApplyChanges()
        VB: OnApplyChanges()
      nameWithType:
        CSharp: ILocalizable.OnApplyChanges()
        VB: ILocalizable.OnApplyChanges()
      qualifiedName:
        CSharp: ILocalizable.OnApplyChanges()
        VB: ILocalizable.OnApplyChanges()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnApplyChanges
        path: ''
        startLine: 168
      syntax:
        content:
          CSharp: void OnApplyChanges()
          VB: Sub OnApplyChanges
      overload: Global.ILocalizable.OnApplyChanges*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.ILocalizable.Localize(System.Boolean)
      commentId: M:Global.ILocalizable.Localize(System.Boolean)
      language: CSharp
      name:
        CSharp: Localize(Boolean)
        VB: Localize(Boolean)
      nameWithType:
        CSharp: ILocalizable.Localize(Boolean)
        VB: ILocalizable.Localize(Boolean)
      qualifiedName:
        CSharp: ILocalizable.Localize(System.Boolean)
        VB: ILocalizable.Localize(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Localize
        path: ''
        startLine: 169
      syntax:
        content:
          CSharp: void Localize(bool force = false)
          VB: Sub Localize(force As Boolean = False)
        parameters:
        - id: force
          type: System.Boolean
      overload: Global.ILocalizable.Localize*
      modifiers:
        CSharp: []
        VB: []
    - id: Global.ILocalizable.IsNewlyAdded
      commentId: P:Global.ILocalizable.IsNewlyAdded
      language: CSharp
      name:
        CSharp: IsNewlyAdded
        VB: IsNewlyAdded
      nameWithType:
        CSharp: ILocalizable.IsNewlyAdded
        VB: ILocalizable.IsNewlyAdded
      qualifiedName:
        CSharp: ILocalizable.IsNewlyAdded
        VB: ILocalizable.IsNewlyAdded
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsNewlyAdded
        path: ''
        startLine: 170
      syntax:
        content:
          CSharp: bool IsNewlyAdded { get; set; }
          VB: Property IsNewlyAdded As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.ILocalizable.IsNewlyAdded*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: Global.MaterialEvents
    commentId: T:Global.MaterialEvents
    language: CSharp
    name:
      CSharp: MaterialEvents
      VB: MaterialEvents
    nameWithType:
      CSharp: MaterialEvents
      VB: MaterialEvents
    qualifiedName:
      CSharp: MaterialEvents
      VB: MaterialEvents
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MaterialEvents
      path: ''
      startLine: 176
    syntax:
      content:
        CSharp: 'public class MaterialEvents : MonoBehaviour'
        VB: >-
          Public Class MaterialEvents

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.MaterialEvents.ShaderColorName
      commentId: F:Global.MaterialEvents.ShaderColorName
      language: CSharp
      name:
        CSharp: ShaderColorName
        VB: ShaderColorName
      nameWithType:
        CSharp: MaterialEvents.ShaderColorName
        VB: MaterialEvents.ShaderColorName
      qualifiedName:
        CSharp: MaterialEvents.ShaderColorName
        VB: MaterialEvents.ShaderColorName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShaderColorName
        path: ''
        startLine: 180
      syntax:
        content:
          CSharp: public string ShaderColorName
          VB: Public ShaderColorName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.ShaderFloatName
      commentId: F:Global.MaterialEvents.ShaderFloatName
      language: CSharp
      name:
        CSharp: ShaderFloatName
        VB: ShaderFloatName
      nameWithType:
        CSharp: MaterialEvents.ShaderFloatName
        VB: MaterialEvents.ShaderFloatName
      qualifiedName:
        CSharp: MaterialEvents.ShaderFloatName
        VB: MaterialEvents.ShaderFloatName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShaderFloatName
        path: ''
        startLine: 180
      syntax:
        content:
          CSharp: public string ShaderFloatName
          VB: Public ShaderFloatName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.ShaderIntName
      commentId: F:Global.MaterialEvents.ShaderIntName
      language: CSharp
      name:
        CSharp: ShaderIntName
        VB: ShaderIntName
      nameWithType:
        CSharp: MaterialEvents.ShaderIntName
        VB: MaterialEvents.ShaderIntName
      qualifiedName:
        CSharp: MaterialEvents.ShaderIntName
        VB: MaterialEvents.ShaderIntName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShaderIntName
        path: ''
        startLine: 180
      syntax:
        content:
          CSharp: public string ShaderIntName
          VB: Public ShaderIntName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.ShaderVectorName
      commentId: F:Global.MaterialEvents.ShaderVectorName
      language: CSharp
      name:
        CSharp: ShaderVectorName
        VB: ShaderVectorName
      nameWithType:
        CSharp: MaterialEvents.ShaderVectorName
        VB: MaterialEvents.ShaderVectorName
      qualifiedName:
        CSharp: MaterialEvents.ShaderVectorName
        VB: MaterialEvents.ShaderVectorName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShaderVectorName
        path: ''
        startLine: 180
      syntax:
        content:
          CSharp: public string ShaderVectorName
          VB: Public ShaderVectorName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.indexedColors
      commentId: F:Global.MaterialEvents.indexedColors
      language: CSharp
      name:
        CSharp: indexedColors
        VB: indexedColors
      nameWithType:
        CSharp: MaterialEvents.indexedColors
        VB: MaterialEvents.indexedColors
      qualifiedName:
        CSharp: MaterialEvents.indexedColors
        VB: MaterialEvents.indexedColors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: indexedColors
        path: ''
        startLine: 184
      syntax:
        content:
          CSharp: public Color[] indexedColors
          VB: Public indexedColors As Color()
        return:
          type: Global.Color[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.indexedVectors
      commentId: F:Global.MaterialEvents.indexedVectors
      language: CSharp
      name:
        CSharp: indexedVectors
        VB: indexedVectors
      nameWithType:
        CSharp: MaterialEvents.indexedVectors
        VB: MaterialEvents.indexedVectors
      qualifiedName:
        CSharp: MaterialEvents.indexedVectors
        VB: MaterialEvents.indexedVectors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: indexedVectors
        path: ''
        startLine: 187
      syntax:
        content:
          CSharp: public Vector4[] indexedVectors
          VB: Public indexedVectors As Vector4()
        return:
          type: Global.Vector4[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.tweenFrom
      commentId: F:Global.MaterialEvents.tweenFrom
      language: CSharp
      name:
        CSharp: tweenFrom
        VB: tweenFrom
      nameWithType:
        CSharp: MaterialEvents.tweenFrom
        VB: MaterialEvents.tweenFrom
      qualifiedName:
        CSharp: MaterialEvents.tweenFrom
        VB: MaterialEvents.tweenFrom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tweenFrom
        path: ''
        startLine: 190
      syntax:
        content:
          CSharp: public Color tweenFrom
          VB: Public tweenFrom As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.tweenTo
      commentId: F:Global.MaterialEvents.tweenTo
      language: CSharp
      name:
        CSharp: tweenTo
        VB: tweenTo
      nameWithType:
        CSharp: MaterialEvents.tweenTo
        VB: MaterialEvents.tweenTo
      qualifiedName:
        CSharp: MaterialEvents.tweenTo
        VB: MaterialEvents.tweenTo
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tweenTo
        path: ''
        startLine: 190
      syntax:
        content:
          CSharp: public Color tweenTo
          VB: Public tweenTo As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.tweenLength
      commentId: F:Global.MaterialEvents.tweenLength
      language: CSharp
      name:
        CSharp: tweenLength
        VB: tweenLength
      nameWithType:
        CSharp: MaterialEvents.tweenLength
        VB: MaterialEvents.tweenLength
      qualifiedName:
        CSharp: MaterialEvents.tweenLength
        VB: MaterialEvents.tweenLength
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tweenLength
        path: ''
        startLine: 192
      syntax:
        content:
          CSharp: public float tweenLength
          VB: Public tweenLength As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.easeType
      commentId: F:Global.MaterialEvents.easeType
      language: CSharp
      name:
        CSharp: easeType
        VB: easeType
      nameWithType:
        CSharp: MaterialEvents.easeType
        VB: MaterialEvents.easeType
      qualifiedName:
        CSharp: MaterialEvents.easeType
        VB: MaterialEvents.easeType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: easeType
        path: ''
        startLine: 193
      syntax:
        content:
          CSharp: public Ease easeType
          VB: Public easeType As Ease
        return:
          type: Global.Ease
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.loopType
      commentId: F:Global.MaterialEvents.loopType
      language: CSharp
      name:
        CSharp: loopType
        VB: loopType
      nameWithType:
        CSharp: MaterialEvents.loopType
        VB: MaterialEvents.loopType
      qualifiedName:
        CSharp: MaterialEvents.loopType
        VB: MaterialEvents.loopType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: loopType
        path: ''
        startLine: 194
      syntax:
        content:
          CSharp: public LoopType loopType
          VB: Public loopType As LoopType
        return:
          type: Global.LoopType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.tweenOnEnable
      commentId: F:Global.MaterialEvents.tweenOnEnable
      language: CSharp
      name:
        CSharp: tweenOnEnable
        VB: tweenOnEnable
      nameWithType:
        CSharp: MaterialEvents.tweenOnEnable
        VB: MaterialEvents.tweenOnEnable
      qualifiedName:
        CSharp: MaterialEvents.tweenOnEnable
        VB: MaterialEvents.tweenOnEnable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: tweenOnEnable
        path: ''
        startLine: 195
      syntax:
        content:
          CSharp: public bool tweenOnEnable
          VB: Public tweenOnEnable As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.SetColor(System.Int32)
      commentId: M:Global.MaterialEvents.SetColor(System.Int32)
      language: CSharp
      name:
        CSharp: SetColor(Int32)
        VB: SetColor(Int32)
      nameWithType:
        CSharp: MaterialEvents.SetColor(Int32)
        VB: MaterialEvents.SetColor(Int32)
      qualifiedName:
        CSharp: MaterialEvents.SetColor(System.Int32)
        VB: MaterialEvents.SetColor(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColor
        path: ''
        startLine: 200
      syntax:
        content:
          CSharp: public void SetColor(int colorIndex)
          VB: Public Sub SetColor(colorIndex As Integer)
        parameters:
        - id: colorIndex
          type: System.Int32
      overload: Global.MaterialEvents.SetColor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.TweenColor
      commentId: M:Global.MaterialEvents.TweenColor
      language: CSharp
      name:
        CSharp: TweenColor()
        VB: TweenColor()
      nameWithType:
        CSharp: MaterialEvents.TweenColor()
        VB: MaterialEvents.TweenColor()
      qualifiedName:
        CSharp: MaterialEvents.TweenColor()
        VB: MaterialEvents.TweenColor()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TweenColor
        path: ''
        startLine: 208
      syntax:
        content:
          CSharp: public void TweenColor()
          VB: Public Sub TweenColor
      overload: Global.MaterialEvents.TweenColor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.StopTweens
      commentId: M:Global.MaterialEvents.StopTweens
      language: CSharp
      name:
        CSharp: StopTweens()
        VB: StopTweens()
      nameWithType:
        CSharp: MaterialEvents.StopTweens()
        VB: MaterialEvents.StopTweens()
      qualifiedName:
        CSharp: MaterialEvents.StopTweens()
        VB: MaterialEvents.StopTweens()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StopTweens
        path: ''
        startLine: 214
      syntax:
        content:
          CSharp: public void StopTweens()
          VB: Public Sub StopTweens
      overload: Global.MaterialEvents.StopTweens*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.TweenFloat(System.Single)
      commentId: M:Global.MaterialEvents.TweenFloat(System.Single)
      language: CSharp
      name:
        CSharp: TweenFloat(Single)
        VB: TweenFloat(Single)
      nameWithType:
        CSharp: MaterialEvents.TweenFloat(Single)
        VB: MaterialEvents.TweenFloat(Single)
      qualifiedName:
        CSharp: MaterialEvents.TweenFloat(System.Single)
        VB: MaterialEvents.TweenFloat(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TweenFloat
        path: ''
        startLine: 220
      syntax:
        content:
          CSharp: public void TweenFloat(float target)
          VB: Public Sub TweenFloat(target As Single)
        parameters:
        - id: target
          type: System.Single
      overload: Global.MaterialEvents.TweenFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.SetFloat(System.Single)
      commentId: M:Global.MaterialEvents.SetFloat(System.Single)
      language: CSharp
      name:
        CSharp: SetFloat(Single)
        VB: SetFloat(Single)
      nameWithType:
        CSharp: MaterialEvents.SetFloat(Single)
        VB: MaterialEvents.SetFloat(Single)
      qualifiedName:
        CSharp: MaterialEvents.SetFloat(System.Single)
        VB: MaterialEvents.SetFloat(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetFloat
        path: ''
        startLine: 222
      syntax:
        content:
          CSharp: public void SetFloat(float value)
          VB: Public Sub SetFloat(value As Single)
        parameters:
        - id: value
          type: System.Single
      overload: Global.MaterialEvents.SetFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.SetVector(System.Int32)
      commentId: M:Global.MaterialEvents.SetVector(System.Int32)
      language: CSharp
      name:
        CSharp: SetVector(Int32)
        VB: SetVector(Int32)
      nameWithType:
        CSharp: MaterialEvents.SetVector(Int32)
        VB: MaterialEvents.SetVector(Int32)
      qualifiedName:
        CSharp: MaterialEvents.SetVector(System.Int32)
        VB: MaterialEvents.SetVector(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetVector
        path: ''
        startLine: 229
      syntax:
        content:
          CSharp: public void SetVector(int index)
          VB: Public Sub SetVector(index As Integer)
        parameters:
        - id: index
          type: System.Int32
      overload: Global.MaterialEvents.SetVector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.SetInt(System.Int32)
      commentId: M:Global.MaterialEvents.SetInt(System.Int32)
      language: CSharp
      name:
        CSharp: SetInt(Int32)
        VB: SetInt(Int32)
      nameWithType:
        CSharp: MaterialEvents.SetInt(Int32)
        VB: MaterialEvents.SetInt(Int32)
      qualifiedName:
        CSharp: MaterialEvents.SetInt(System.Int32)
        VB: MaterialEvents.SetInt(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetInt
        path: ''
        startLine: 236
      syntax:
        content:
          CSharp: public void SetInt(int value)
          VB: Public Sub SetInt(value As Integer)
        parameters:
        - id: value
          type: System.Int32
      overload: Global.MaterialEvents.SetInt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.OnEnable
      commentId: M:Global.MaterialEvents.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: MaterialEvents.OnEnable()
        VB: MaterialEvents.OnEnable()
      qualifiedName:
        CSharp: MaterialEvents.OnEnable()
        VB: MaterialEvents.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnable
        path: ''
        startLine: 243
      syntax:
        content:
          CSharp: public void OnEnable()
          VB: Public Sub OnEnable
      overload: Global.MaterialEvents.OnEnable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.OnDisable
      commentId: M:Global.MaterialEvents.OnDisable
      language: CSharp
      name:
        CSharp: OnDisable()
        VB: OnDisable()
      nameWithType:
        CSharp: MaterialEvents.OnDisable()
        VB: MaterialEvents.OnDisable()
      qualifiedName:
        CSharp: MaterialEvents.OnDisable()
        VB: MaterialEvents.OnDisable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDisable
        path: ''
        startLine: 249
      syntax:
        content:
          CSharp: public void OnDisable()
          VB: Public Sub OnDisable
      overload: Global.MaterialEvents.OnDisable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MaterialEvents.SetColor(Color)
      commentId: M:Global.MaterialEvents.SetColor(Color)
      language: CSharp
      name:
        CSharp: SetColor(Color)
        VB: SetColor(Color)
      nameWithType:
        CSharp: MaterialEvents.SetColor(Color)
        VB: MaterialEvents.SetColor(Color)
      qualifiedName:
        CSharp: MaterialEvents.SetColor(Color)
        VB: MaterialEvents.SetColor(Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetColor
        path: ''
        startLine: 288
      syntax:
        content:
          CSharp: public void SetColor(Color c)
          VB: Public Sub SetColor(c As Color)
        parameters:
        - id: c
          type: Global.Color
      overload: Global.MaterialEvents.SetColor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ModkitPrefabContainer
    commentId: T:Global.ModkitPrefabContainer
    language: CSharp
    name:
      CSharp: ModkitPrefabContainer
      VB: ModkitPrefabContainer
    nameWithType:
      CSharp: ModkitPrefabContainer
      VB: ModkitPrefabContainer
    qualifiedName:
      CSharp: ModkitPrefabContainer
      VB: ModkitPrefabContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ModkitPrefabContainer
      path: ''
      startLine: 306
    summary: "\nA container for prefabs that will get loaded by the modkit. Any type of prefab the modkit can load can be used.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ModkitPrefabContainer : MonoBehaviour'
        VB: >-
          Public Class ModkitPrefabContainer

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ModkitPrefabContainer.Prefabs
      commentId: F:Global.ModkitPrefabContainer.Prefabs
      language: CSharp
      name:
        CSharp: Prefabs
        VB: Prefabs
      nameWithType:
        CSharp: ModkitPrefabContainer.Prefabs
        VB: ModkitPrefabContainer.Prefabs
      qualifiedName:
        CSharp: ModkitPrefabContainer.Prefabs
        VB: ModkitPrefabContainer.Prefabs
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Prefabs
        path: ''
        startLine: 308
      syntax:
        content:
          CSharp: public GameObject[] Prefabs
          VB: Public Prefabs As GameObject()
        return:
          type: Global.GameObject[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.NetObjComponent
    commentId: T:Global.NetObjComponent
    language: CSharp
    name:
      CSharp: NetObjComponent
      VB: NetObjComponent
    nameWithType:
      CSharp: NetObjComponent
      VB: NetObjComponent
    qualifiedName:
      CSharp: NetObjComponent
      VB: NetObjComponent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: NetObjComponent
      path: ''
      startLine: 316
    syntax:
      content:
        CSharp: 'public class NetObjComponent : MonoBehaviour'
        VB: >-
          Public Class NetObjComponent

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.OptimizedMonobeh
    commentId: T:Global.OptimizedMonobeh
    language: CSharp
    name:
      CSharp: OptimizedMonobeh
      VB: OptimizedMonobeh
    nameWithType:
      CSharp: OptimizedMonobeh
      VB: OptimizedMonobeh
    qualifiedName:
      CSharp: OptimizedMonobeh
      VB: OptimizedMonobeh
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: OptimizedMonobeh
      path: ''
      startLine: 322
    syntax:
      content:
        CSharp: 'public class OptimizedMonobeh : MonoBehaviour'
        VB: >-
          Public Class OptimizedMonobeh

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.PerformInteraction
    commentId: T:Global.PerformInteraction
    language: CSharp
    name:
      CSharp: PerformInteraction
      VB: PerformInteraction
    nameWithType:
      CSharp: PerformInteraction
      VB: PerformInteraction
    qualifiedName:
      CSharp: PerformInteraction
      VB: PerformInteraction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PerformInteraction
      path: ''
      startLine: 326
    syntax:
      content:
        CSharp: 'public class PerformInteraction : MonoBehaviour'
        VB: >-
          Public Class PerformInteraction

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.AutohookAttribute
    commentId: T:Global.AutohookAttribute
    language: CSharp
    name:
      CSharp: AutohookAttribute
      VB: AutohookAttribute
    nameWithType:
      CSharp: AutohookAttribute
      VB: AutohookAttribute
    qualifiedName:
      CSharp: AutohookAttribute
      VB: AutohookAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AutohookAttribute
      path: ''
      startLine: 333
    summary: "\nAutomatically hooks up a property to a component on the same gameobject in the editor. Useful for skipping GetComponent calls.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AutohookAttribute : PropertyAttribute'
        VB: >-
          Public Class AutohookAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.EnumFlagsMaskAttribute
    commentId: T:Global.EnumFlagsMaskAttribute
    language: CSharp
    name:
      CSharp: EnumFlagsMaskAttribute
      VB: EnumFlagsMaskAttribute
    nameWithType:
      CSharp: EnumFlagsMaskAttribute
      VB: EnumFlagsMaskAttribute
    qualifiedName:
      CSharp: EnumFlagsMaskAttribute
      VB: EnumFlagsMaskAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EnumFlagsMaskAttribute
      path: ''
      startLine: 338
    summary: "\nUse an inspector that helps define a mask (for flags enums)\n"
    example: []
    syntax:
      content:
        CSharp: 'public class EnumFlagsMaskAttribute : PropertyAttribute'
        VB: >-
          Public Class EnumFlagsMaskAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.QuaternionToEulerAttribute
    commentId: T:Global.QuaternionToEulerAttribute
    language: CSharp
    name:
      CSharp: QuaternionToEulerAttribute
      VB: QuaternionToEulerAttribute
    nameWithType:
      CSharp: QuaternionToEulerAttribute
      VB: QuaternionToEulerAttribute
    qualifiedName:
      CSharp: QuaternionToEulerAttribute
      VB: QuaternionToEulerAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: QuaternionToEulerAttribute
      path: ''
      startLine: 343
    summary: "\nUse this on a <see cref=\"!:Quaternion\"></see> field to show a Vector3 in inspector for it.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class QuaternionToEulerAttribute : PropertyAttribute'
        VB: >-
          Public Class QuaternionToEulerAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.SpecificInteractable
    commentId: T:Global.SpecificInteractable
    language: CSharp
    name:
      CSharp: SpecificInteractable
      VB: SpecificInteractable
    nameWithType:
      CSharp: SpecificInteractable
      VB: SpecificInteractable
    qualifiedName:
      CSharp: SpecificInteractable
      VB: SpecificInteractable
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SpecificInteractable
      path: ''
      startLine: 348
    syntax:
      content:
        CSharp: 'public class SpecificInteractable : MonoBehaviour'
        VB: >-
          Public Class SpecificInteractable

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SpecificInteractable.interactionTargetName
      commentId: F:Global.SpecificInteractable.interactionTargetName
      language: CSharp
      name:
        CSharp: interactionTargetName
        VB: interactionTargetName
      nameWithType:
        CSharp: SpecificInteractable.interactionTargetName
        VB: SpecificInteractable.interactionTargetName
      qualifiedName:
        CSharp: SpecificInteractable.interactionTargetName
        VB: SpecificInteractable.interactionTargetName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: interactionTargetName
        path: ''
        startLine: 353
      syntax:
        content:
          CSharp: public string interactionTargetName
          VB: Public interactionTargetName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.StringToLocalize
    commentId: T:Global.StringToLocalize
    language: CSharp
    name:
      CSharp: StringToLocalize
      VB: StringToLocalize
    nameWithType:
      CSharp: StringToLocalize
      VB: StringToLocalize
    qualifiedName:
      CSharp: StringToLocalize
      VB: StringToLocalize
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StringToLocalize
      path: ''
      startLine: 361
    summary: 'Class used by Localization Tool to hold strings intended for localization. '
    example: []
    syntax:
      content:
        CSharp: public class StringToLocalize
        VB: Public Class StringToLocalize
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.StringToLocalize.String
      commentId: P:Global.StringToLocalize.String
      language: CSharp
      name:
        CSharp: String
        VB: String
      nameWithType:
        CSharp: StringToLocalize.String
        VB: StringToLocalize.String
      qualifiedName:
        CSharp: StringToLocalize.String
        VB: StringToLocalize.String
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: String
        path: ''
        startLine: 364
      syntax:
        content:
          CSharp: public string String { get; set; }
          VB: Public Property String As String
        parameters: []
        return:
          type: System.String
      overload: Global.StringToLocalize.String*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.Source
      commentId: P:Global.StringToLocalize.Source
      language: CSharp
      name:
        CSharp: Source
        VB: Source
      nameWithType:
        CSharp: StringToLocalize.Source
        VB: StringToLocalize.Source
      qualifiedName:
        CSharp: StringToLocalize.Source
        VB: StringToLocalize.Source
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Source
        path: ''
        startLine: 365
      syntax:
        content:
          CSharp: public string Source { get; set; }
          VB: Public Property Source As String
        parameters: []
        return:
          type: System.String
      overload: Global.StringToLocalize.Source*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.Comment
      commentId: P:Global.StringToLocalize.Comment
      language: CSharp
      name:
        CSharp: Comment
        VB: Comment
      nameWithType:
        CSharp: StringToLocalize.Comment
        VB: StringToLocalize.Comment
      qualifiedName:
        CSharp: StringToLocalize.Comment
        VB: StringToLocalize.Comment
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Comment
        path: ''
        startLine: 366
      syntax:
        content:
          CSharp: public string Comment { get; set; }
          VB: Public Property Comment As String
        parameters: []
        return:
          type: System.String
      overload: Global.StringToLocalize.Comment*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.AutoLoc
      commentId: P:Global.StringToLocalize.AutoLoc
      language: CSharp
      name:
        CSharp: AutoLoc
        VB: AutoLoc
      nameWithType:
        CSharp: StringToLocalize.AutoLoc
        VB: StringToLocalize.AutoLoc
      qualifiedName:
        CSharp: StringToLocalize.AutoLoc
        VB: StringToLocalize.AutoLoc
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AutoLoc
        path: ''
        startLine: 367
      syntax:
        content:
          CSharp: public bool AutoLoc { get; set; }
          VB: Public Property AutoLoc As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.StringToLocalize.AutoLoc*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.HasContextConflict
      commentId: P:Global.StringToLocalize.HasContextConflict
      language: CSharp
      name:
        CSharp: HasContextConflict
        VB: HasContextConflict
      nameWithType:
        CSharp: StringToLocalize.HasContextConflict
        VB: StringToLocalize.HasContextConflict
      qualifiedName:
        CSharp: StringToLocalize.HasContextConflict
        VB: StringToLocalize.HasContextConflict
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasContextConflict
        path: ''
        startLine: 368
      syntax:
        content:
          CSharp: public bool HasContextConflict { get; set; }
          VB: Public Property HasContextConflict As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.StringToLocalize.HasContextConflict*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.ContextConflicts
      commentId: P:Global.StringToLocalize.ContextConflicts
      language: CSharp
      name:
        CSharp: ContextConflicts
        VB: ContextConflicts
      nameWithType:
        CSharp: StringToLocalize.ContextConflicts
        VB: StringToLocalize.ContextConflicts
      qualifiedName:
        CSharp: StringToLocalize.ContextConflicts
        VB: StringToLocalize.ContextConflicts
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ContextConflicts
        path: ''
        startLine: 369
      syntax:
        content:
          CSharp: public string[] ContextConflicts { get; set; }
          VB: Public Property ContextConflicts As String()
        parameters: []
        return:
          type: System.String[]
      overload: Global.StringToLocalize.ContextConflicts*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.Replacement
      commentId: P:Global.StringToLocalize.Replacement
      language: CSharp
      name:
        CSharp: Replacement
        VB: Replacement
      nameWithType:
        CSharp: StringToLocalize.Replacement
        VB: StringToLocalize.Replacement
      qualifiedName:
        CSharp: StringToLocalize.Replacement
        VB: StringToLocalize.Replacement
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Replacement
        path: ''
        startLine: 370
      syntax:
        content:
          CSharp: public string Replacement { get; set; }
          VB: Public Property Replacement As String
        parameters: []
        return:
          type: System.String
      overload: Global.StringToLocalize.Replacement*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Global.StringToLocalize.IsPrefab
      commentId: P:Global.StringToLocalize.IsPrefab
      language: CSharp
      name:
        CSharp: IsPrefab
        VB: IsPrefab
      nameWithType:
        CSharp: StringToLocalize.IsPrefab
        VB: StringToLocalize.IsPrefab
      qualifiedName:
        CSharp: StringToLocalize.IsPrefab
        VB: StringToLocalize.IsPrefab
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPrefab
        path: ''
        startLine: 372
      syntax:
        content:
          CSharp: public bool IsPrefab { get; }
          VB: Public ReadOnly Property IsPrefab As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.StringToLocalize.IsPrefab*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Global.StringToLocalize.InvalidCommentChars
      commentId: F:Global.StringToLocalize.InvalidCommentChars
      language: CSharp
      name:
        CSharp: InvalidCommentChars
        VB: InvalidCommentChars
      nameWithType:
        CSharp: StringToLocalize.InvalidCommentChars
        VB: StringToLocalize.InvalidCommentChars
      qualifiedName:
        CSharp: StringToLocalize.InvalidCommentChars
        VB: StringToLocalize.InvalidCommentChars
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InvalidCommentChars
        path: ''
        startLine: 374
      syntax:
        content:
          CSharp: public static readonly char[] InvalidCommentChars
          VB: Public Shared ReadOnly InvalidCommentChars As Char()
        return:
          type: System.Char[]
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.StringToLocalize.ValidadeComment(System.String,System.String,System.String)
      commentId: M:Global.StringToLocalize.ValidadeComment(System.String,System.String,System.String)
      language: CSharp
      name:
        CSharp: ValidadeComment(String, String, String)
        VB: ValidadeComment(String, String, String)
      nameWithType:
        CSharp: StringToLocalize.ValidadeComment(String, String, String)
        VB: StringToLocalize.ValidadeComment(String, String, String)
      qualifiedName:
        CSharp: StringToLocalize.ValidadeComment(System.String, System.String, System.String)
        VB: StringToLocalize.ValidadeComment(System.String, System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ValidadeComment
        path: ''
        startLine: 375
      syntax:
        content:
          CSharp: public static void ValidadeComment(string comment, string loc, string file)
          VB: Public Shared Sub ValidadeComment(comment As String, loc As String, file As String)
        parameters:
        - id: comment
          type: System.String
        - id: loc
          type: System.String
        - id: file
          type: System.String
      overload: Global.StringToLocalize.ValidadeComment*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.StringToLocalize.op_Implicit(EmbeddedLocString)~StringToLocalize
      commentId: M:Global.StringToLocalize.op_Implicit(EmbeddedLocString)~StringToLocalize
      language: CSharp
      name:
        CSharp: Implicit(EmbeddedLocString to StringToLocalize)
        VB: Widening(EmbeddedLocString to StringToLocalize)
      nameWithType:
        CSharp: StringToLocalize.Implicit(EmbeddedLocString to StringToLocalize)
        VB: StringToLocalize.Widening(EmbeddedLocString to StringToLocalize)
      qualifiedName:
        CSharp: StringToLocalize.Implicit(EmbeddedLocString to StringToLocalize)
        VB: StringToLocalize.Widening(EmbeddedLocString to StringToLocalize)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 380
      syntax:
        content:
          CSharp: public static implicit operator StringToLocalize(EmbeddedLocString locString)
          VB: Public Shared Widening Operator CType(locString As EmbeddedLocString) As StringToLocalize
        parameters:
        - id: locString
          type: Global.EmbeddedLocString
        return:
          type: Global.StringToLocalize
      overload: Global.StringToLocalize.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.StringToLocalize.op_Implicit(System.String)~StringToLocalize
      commentId: M:Global.StringToLocalize.op_Implicit(System.String)~StringToLocalize
      language: CSharp
      name:
        CSharp: Implicit(String to StringToLocalize)
        VB: Widening(String to StringToLocalize)
      nameWithType:
        CSharp: StringToLocalize.Implicit(String to StringToLocalize)
        VB: StringToLocalize.Widening(String to StringToLocalize)
      qualifiedName:
        CSharp: StringToLocalize.Implicit(System.String to StringToLocalize)
        VB: StringToLocalize.Widening(System.String to StringToLocalize)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: op_Implicit
        path: ''
        startLine: 381
      syntax:
        content:
          CSharp: public static implicit operator StringToLocalize(string str)
          VB: Public Shared Widening Operator CType(str As String) As StringToLocalize
        parameters:
        - id: str
          type: System.String
        return:
          type: Global.StringToLocalize
      overload: Global.StringToLocalize.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.StringToLocalizeExtensions
    commentId: T:Global.StringToLocalizeExtensions
    language: CSharp
    name:
      CSharp: StringToLocalizeExtensions
      VB: StringToLocalizeExtensions
    nameWithType:
      CSharp: StringToLocalizeExtensions
      VB: StringToLocalizeExtensions
    qualifiedName:
      CSharp: StringToLocalizeExtensions
      VB: StringToLocalizeExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StringToLocalizeExtensions
      path: ''
      startLine: 384
    syntax:
      content:
        CSharp: public static class StringToLocalizeExtensions
        VB: Public Module StringToLocalizeExtensions
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Global.StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString[])
      commentId: M:Global.StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString[])
      language: CSharp
      name:
        CSharp: AsStringsToLocalize(EmbeddedLocString[])
        VB: AsStringsToLocalize(EmbeddedLocString())
      nameWithType:
        CSharp: StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString[])
        VB: StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString())
      qualifiedName:
        CSharp: StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString[])
        VB: StringToLocalizeExtensions.AsStringsToLocalize(EmbeddedLocString())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AsStringsToLocalize
        path: ''
        startLine: 386
      syntax:
        content:
          CSharp: public static StringToLocalize[] AsStringsToLocalize(this EmbeddedLocString[] values)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function AsStringsToLocalize(values As EmbeddedLocString()) As StringToLocalize()
        parameters:
        - id: values
          type: Global.EmbeddedLocString[]
        return:
          type: Global.StringToLocalize[]
      overload: Global.StringToLocalizeExtensions.AsStringsToLocalize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.SubscribableBehavior
    commentId: T:Global.SubscribableBehavior
    language: CSharp
    name:
      CSharp: SubscribableBehavior
      VB: SubscribableBehavior
    nameWithType:
      CSharp: SubscribableBehavior
      VB: SubscribableBehavior
    qualifiedName:
      CSharp: SubscribableBehavior
      VB: SubscribableBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SubscribableBehavior
      path: ''
      startLine: 393
    syntax:
      content:
        CSharp: 'public class SubscribableBehavior : MonoBehaviour'
        VB: >-
          Public Class SubscribableBehavior

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.AxisSyncMode
    commentId: T:Global.AxisSyncMode
    language: CSharp
    name:
      CSharp: AxisSyncMode
      VB: AxisSyncMode
    nameWithType:
      CSharp: AxisSyncMode
      VB: AxisSyncMode
    qualifiedName:
      CSharp: AxisSyncMode
      VB: AxisSyncMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AxisSyncMode
      path: ''
      startLine: 400
    summary: 'Describes which axis or combination, if any, to synchronize. '
    example: []
    syntax:
      content:
        CSharp: public enum AxisSyncMode
        VB: Public Enum AxisSyncMode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.AxisSyncMode.None
      commentId: F:Global.AxisSyncMode.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: AxisSyncMode.None
        VB: AxisSyncMode.None
      qualifiedName:
        CSharp: AxisSyncMode.None
        VB: AxisSyncMode.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 402
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisX
      commentId: F:Global.AxisSyncMode.AxisX
      language: CSharp
      name:
        CSharp: AxisX
        VB: AxisX
      nameWithType:
        CSharp: AxisSyncMode.AxisX
        VB: AxisSyncMode.AxisX
      qualifiedName:
        CSharp: AxisSyncMode.AxisX
        VB: AxisSyncMode.AxisX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisX
        path: ''
        startLine: 403
      syntax:
        content:
          CSharp: AxisX = 1
          VB: AxisX = 1
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisY
      commentId: F:Global.AxisSyncMode.AxisY
      language: CSharp
      name:
        CSharp: AxisY
        VB: AxisY
      nameWithType:
        CSharp: AxisSyncMode.AxisY
        VB: AxisSyncMode.AxisY
      qualifiedName:
        CSharp: AxisSyncMode.AxisY
        VB: AxisSyncMode.AxisY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisY
        path: ''
        startLine: 404
      syntax:
        content:
          CSharp: AxisY = 2
          VB: AxisY = 2
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisZ
      commentId: F:Global.AxisSyncMode.AxisZ
      language: CSharp
      name:
        CSharp: AxisZ
        VB: AxisZ
      nameWithType:
        CSharp: AxisSyncMode.AxisZ
        VB: AxisSyncMode.AxisZ
      qualifiedName:
        CSharp: AxisSyncMode.AxisZ
        VB: AxisSyncMode.AxisZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisZ
        path: ''
        startLine: 405
      syntax:
        content:
          CSharp: AxisZ = 3
          VB: AxisZ = 3
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisXY
      commentId: F:Global.AxisSyncMode.AxisXY
      language: CSharp
      name:
        CSharp: AxisXY
        VB: AxisXY
      nameWithType:
        CSharp: AxisSyncMode.AxisXY
        VB: AxisSyncMode.AxisXY
      qualifiedName:
        CSharp: AxisSyncMode.AxisXY
        VB: AxisSyncMode.AxisXY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisXY
        path: ''
        startLine: 406
      syntax:
        content:
          CSharp: AxisXY = 4
          VB: AxisXY = 4
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisXZ
      commentId: F:Global.AxisSyncMode.AxisXZ
      language: CSharp
      name:
        CSharp: AxisXZ
        VB: AxisXZ
      nameWithType:
        CSharp: AxisSyncMode.AxisXZ
        VB: AxisSyncMode.AxisXZ
      qualifiedName:
        CSharp: AxisSyncMode.AxisXZ
        VB: AxisSyncMode.AxisXZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisXZ
        path: ''
        startLine: 407
      syntax:
        content:
          CSharp: AxisXZ = 5
          VB: AxisXZ = 5
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisYZ
      commentId: F:Global.AxisSyncMode.AxisYZ
      language: CSharp
      name:
        CSharp: AxisYZ
        VB: AxisYZ
      nameWithType:
        CSharp: AxisSyncMode.AxisYZ
        VB: AxisSyncMode.AxisYZ
      qualifiedName:
        CSharp: AxisSyncMode.AxisYZ
        VB: AxisSyncMode.AxisYZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisYZ
        path: ''
        startLine: 408
      syntax:
        content:
          CSharp: AxisYZ = 6
          VB: AxisYZ = 6
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.AxisSyncMode.AxisXYZ
      commentId: F:Global.AxisSyncMode.AxisXYZ
      language: CSharp
      name:
        CSharp: AxisXYZ
        VB: AxisXYZ
      nameWithType:
        CSharp: AxisSyncMode.AxisXYZ
        VB: AxisSyncMode.AxisXYZ
      qualifiedName:
        CSharp: AxisSyncMode.AxisXYZ
        VB: AxisSyncMode.AxisXYZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AxisXYZ
        path: ''
        startLine: 409
      syntax:
        content:
          CSharp: AxisXYZ = 7
          VB: AxisXYZ = 7
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.SyncPhysics
    commentId: T:Global.SyncPhysics
    language: CSharp
    name:
      CSharp: SyncPhysics
      VB: SyncPhysics
    nameWithType:
      CSharp: SyncPhysics
      VB: SyncPhysics
    qualifiedName:
      CSharp: SyncPhysics
      VB: SyncPhysics
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SyncPhysics
      path: ''
      startLine: 413
    syntax:
      content:
        CSharp: 'public class SyncPhysics : MonoBehaviour'
        VB: >-
          Public Class SyncPhysics

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SyncPhysics.SyncPos
      commentId: F:Global.SyncPhysics.SyncPos
      language: CSharp
      name:
        CSharp: SyncPos
        VB: SyncPos
      nameWithType:
        CSharp: SyncPhysics.SyncPos
        VB: SyncPhysics.SyncPos
      qualifiedName:
        CSharp: SyncPhysics.SyncPos
        VB: SyncPhysics.SyncPos
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SyncPos
        path: ''
        startLine: 417
      syntax:
        content:
          CSharp: public bool SyncPos
          VB: Public SyncPos As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.SyncVelocity
      commentId: F:Global.SyncPhysics.SyncVelocity
      language: CSharp
      name:
        CSharp: SyncVelocity
        VB: SyncVelocity
      nameWithType:
        CSharp: SyncPhysics.SyncVelocity
        VB: SyncPhysics.SyncVelocity
      qualifiedName:
        CSharp: SyncPhysics.SyncVelocity
        VB: SyncPhysics.SyncVelocity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SyncVelocity
        path: ''
        startLine: 420
      syntax:
        content:
          CSharp: public bool SyncVelocity
          VB: Public SyncVelocity As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.SyncRot
      commentId: F:Global.SyncPhysics.SyncRot
      language: CSharp
      name:
        CSharp: SyncRot
        VB: SyncRot
      nameWithType:
        CSharp: SyncPhysics.SyncRot
        VB: SyncPhysics.SyncRot
      qualifiedName:
        CSharp: SyncPhysics.SyncRot
        VB: SyncPhysics.SyncRot
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SyncRot
        path: ''
        startLine: 423
      syntax:
        content:
          CSharp: public bool SyncRot
          VB: Public SyncRot As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.RotSyncMode
      commentId: F:Global.SyncPhysics.RotSyncMode
      language: CSharp
      name:
        CSharp: RotSyncMode
        VB: RotSyncMode
      nameWithType:
        CSharp: SyncPhysics.RotSyncMode
        VB: SyncPhysics.RotSyncMode
      qualifiedName:
        CSharp: SyncPhysics.RotSyncMode
        VB: SyncPhysics.RotSyncMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: RotSyncMode
        path: ''
        startLine: 424
      syntax:
        content:
          CSharp: public AxisSyncMode RotSyncMode
          VB: Public RotSyncMode As AxisSyncMode
        return:
          type: Global.AxisSyncMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.ManuallyUpdated
      commentId: F:Global.SyncPhysics.ManuallyUpdated
      language: CSharp
      name:
        CSharp: ManuallyUpdated
        VB: ManuallyUpdated
      nameWithType:
        CSharp: SyncPhysics.ManuallyUpdated
        VB: SyncPhysics.ManuallyUpdated
      qualifiedName:
        CSharp: SyncPhysics.ManuallyUpdated
        VB: SyncPhysics.ManuallyUpdated
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ManuallyUpdated
        path: ''
        startLine: 427
      syntax:
        content:
          CSharp: public bool ManuallyUpdated
          VB: Public ManuallyUpdated As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.lockDistance
      commentId: F:Global.SyncPhysics.lockDistance
      language: CSharp
      name:
        CSharp: lockDistance
        VB: lockDistance
      nameWithType:
        CSharp: SyncPhysics.lockDistance
        VB: SyncPhysics.lockDistance
      qualifiedName:
        CSharp: SyncPhysics.lockDistance
        VB: SyncPhysics.lockDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lockDistance
        path: ''
        startLine: 428
      syntax:
        content:
          CSharp: public float lockDistance
          VB: Public lockDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.snapDistance
      commentId: F:Global.SyncPhysics.snapDistance
      language: CSharp
      name:
        CSharp: snapDistance
        VB: snapDistance
      nameWithType:
        CSharp: SyncPhysics.snapDistance
        VB: SyncPhysics.snapDistance
      qualifiedName:
        CSharp: SyncPhysics.snapDistance
        VB: SyncPhysics.snapDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: snapDistance
        path: ''
        startLine: 429
      syntax:
        content:
          CSharp: public float snapDistance
          VB: Public snapDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.debugKeyframes
      commentId: F:Global.SyncPhysics.debugKeyframes
      language: CSharp
      name:
        CSharp: debugKeyframes
        VB: debugKeyframes
      nameWithType:
        CSharp: SyncPhysics.debugKeyframes
        VB: SyncPhysics.debugKeyframes
      qualifiedName:
        CSharp: SyncPhysics.debugKeyframes
        VB: SyncPhysics.debugKeyframes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: debugKeyframes
        path: ''
        startLine: 432
      syntax:
        content:
          CSharp: public bool debugKeyframes
          VB: Public debugKeyframes As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SyncPhysics.maxDepenetationVelocity
      commentId: F:Global.SyncPhysics.maxDepenetationVelocity
      language: CSharp
      name:
        CSharp: maxDepenetationVelocity
        VB: maxDepenetationVelocity
      nameWithType:
        CSharp: SyncPhysics.maxDepenetationVelocity
        VB: SyncPhysics.maxDepenetationVelocity
      qualifiedName:
        CSharp: SyncPhysics.maxDepenetationVelocity
        VB: SyncPhysics.maxDepenetationVelocity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxDepenetationVelocity
        path: ''
        startLine: 435
      syntax:
        content:
          CSharp: public float maxDepenetationVelocity
          VB: Public maxDepenetationVelocity As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.TextureScroll
    commentId: T:Global.TextureScroll
    language: CSharp
    name:
      CSharp: TextureScroll
      VB: TextureScroll
    nameWithType:
      CSharp: TextureScroll
      VB: TextureScroll
    qualifiedName:
      CSharp: TextureScroll
      VB: TextureScroll
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TextureScroll
      path: ''
      startLine: 445
    summary: "\nUse this class for scrolling texture on conveyor belts.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TextureScroll : MonoBehaviour'
        VB: >-
          Public Class TextureScroll

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.TextureScroll.materialIndex
      commentId: F:Global.TextureScroll.materialIndex
      language: CSharp
      name:
        CSharp: materialIndex
        VB: materialIndex
      nameWithType:
        CSharp: TextureScroll.materialIndex
        VB: TextureScroll.materialIndex
      qualifiedName:
        CSharp: TextureScroll.materialIndex
        VB: TextureScroll.materialIndex
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: materialIndex
        path: ''
        startLine: 447
      syntax:
        content:
          CSharp: public int materialIndex
          VB: Public materialIndex As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.TextureScroll.direction
      commentId: F:Global.TextureScroll.direction
      language: CSharp
      name:
        CSharp: direction
        VB: direction
      nameWithType:
        CSharp: TextureScroll.direction
        VB: TextureScroll.direction
      qualifiedName:
        CSharp: TextureScroll.direction
        VB: TextureScroll.direction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: direction
        path: ''
        startLine: 448
      syntax:
        content:
          CSharp: public UnityEngine.Vector2 direction
          VB: Public direction As UnityEngine.Vector2
        return:
          type: Global.UnityEngine.Vector2
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.TextureScroll.StartScrolling
      commentId: M:Global.TextureScroll.StartScrolling
      language: CSharp
      name:
        CSharp: StartScrolling()
        VB: StartScrolling()
      nameWithType:
        CSharp: TextureScroll.StartScrolling()
        VB: TextureScroll.StartScrolling()
      qualifiedName:
        CSharp: TextureScroll.StartScrolling()
        VB: TextureScroll.StartScrolling()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartScrolling
        path: ''
        startLine: 460
      syntax:
        content:
          CSharp: public void StartScrolling()
          VB: Public Sub StartScrolling
      overload: Global.TextureScroll.StartScrolling*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.TextureScroll.StopScrolling
      commentId: M:Global.TextureScroll.StopScrolling
      language: CSharp
      name:
        CSharp: StopScrolling()
        VB: StopScrolling()
      nameWithType:
        CSharp: TextureScroll.StopScrolling()
        VB: TextureScroll.StopScrolling()
      qualifiedName:
        CSharp: TextureScroll.StopScrolling()
        VB: TextureScroll.StopScrolling()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StopScrolling
        path: ''
        startLine: 471
      syntax:
        content:
          CSharp: public void StopScrolling()
          VB: Public Sub StopScrolling
      overload: Global.TextureScroll.StopScrolling*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ToolInteraction
    commentId: T:Global.ToolInteraction
    language: CSharp
    name:
      CSharp: ToolInteraction
      VB: ToolInteraction
    nameWithType:
      CSharp: ToolInteraction
      VB: ToolInteraction
    qualifiedName:
      CSharp: ToolInteraction
      VB: ToolInteraction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ToolInteraction
      path: ''
      startLine: 503
    syntax:
      content:
        CSharp: 'public class ToolInteraction : MonoBehaviour'
        VB: >-
          Public Class ToolInteraction

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ToolInteraction.HasTakeAnimation
      commentId: F:Global.ToolInteraction.HasTakeAnimation
      language: CSharp
      name:
        CSharp: HasTakeAnimation
        VB: HasTakeAnimation
      nameWithType:
        CSharp: ToolInteraction.HasTakeAnimation
        VB: ToolInteraction.HasTakeAnimation
      qualifiedName:
        CSharp: ToolInteraction.HasTakeAnimation
        VB: ToolInteraction.HasTakeAnimation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasTakeAnimation
        path: ''
        startLine: 505
      syntax:
        content:
          CSharp: public bool HasTakeAnimation
          VB: Public HasTakeAnimation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.HasPlaceAnimation
      commentId: F:Global.ToolInteraction.HasPlaceAnimation
      language: CSharp
      name:
        CSharp: HasPlaceAnimation
        VB: HasPlaceAnimation
      nameWithType:
        CSharp: ToolInteraction.HasPlaceAnimation
        VB: ToolInteraction.HasPlaceAnimation
      qualifiedName:
        CSharp: ToolInteraction.HasPlaceAnimation
        VB: ToolInteraction.HasPlaceAnimation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasPlaceAnimation
        path: ''
        startLine: 506
      syntax:
        content:
          CSharp: public bool HasPlaceAnimation
          VB: Public HasPlaceAnimation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.MustContainCarriedItem
      commentId: F:Global.ToolInteraction.MustContainCarriedItem
      language: CSharp
      name:
        CSharp: MustContainCarriedItem
        VB: MustContainCarriedItem
      nameWithType:
        CSharp: ToolInteraction.MustContainCarriedItem
        VB: ToolInteraction.MustContainCarriedItem
      qualifiedName:
        CSharp: ToolInteraction.MustContainCarriedItem
        VB: ToolInteraction.MustContainCarriedItem
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MustContainCarriedItem
        path: ''
        startLine: 507
      syntax:
        content:
          CSharp: public bool MustContainCarriedItem
          VB: Public MustContainCarriedItem As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.TakeRequiresCalories
      commentId: F:Global.ToolInteraction.TakeRequiresCalories
      language: CSharp
      name:
        CSharp: TakeRequiresCalories
        VB: TakeRequiresCalories
      nameWithType:
        CSharp: ToolInteraction.TakeRequiresCalories
        VB: ToolInteraction.TakeRequiresCalories
      qualifiedName:
        CSharp: ToolInteraction.TakeRequiresCalories
        VB: ToolInteraction.TakeRequiresCalories
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TakeRequiresCalories
        path: ''
        startLine: 508
      syntax:
        content:
          CSharp: public bool TakeRequiresCalories
          VB: Public TakeRequiresCalories As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.PlaceRequiresCalories
      commentId: F:Global.ToolInteraction.PlaceRequiresCalories
      language: CSharp
      name:
        CSharp: PlaceRequiresCalories
        VB: PlaceRequiresCalories
      nameWithType:
        CSharp: ToolInteraction.PlaceRequiresCalories
        VB: ToolInteraction.PlaceRequiresCalories
      qualifiedName:
        CSharp: ToolInteraction.PlaceRequiresCalories
        VB: ToolInteraction.PlaceRequiresCalories
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PlaceRequiresCalories
        path: ''
        startLine: 509
      syntax:
        content:
          CSharp: public bool PlaceRequiresCalories
          VB: Public PlaceRequiresCalories As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.CanBeUsedInSyncWithThirdPerson
      commentId: F:Global.ToolInteraction.CanBeUsedInSyncWithThirdPerson
      language: CSharp
      name:
        CSharp: CanBeUsedInSyncWithThirdPerson
        VB: CanBeUsedInSyncWithThirdPerson
      nameWithType:
        CSharp: ToolInteraction.CanBeUsedInSyncWithThirdPerson
        VB: ToolInteraction.CanBeUsedInSyncWithThirdPerson
      qualifiedName:
        CSharp: ToolInteraction.CanBeUsedInSyncWithThirdPerson
        VB: ToolInteraction.CanBeUsedInSyncWithThirdPerson
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CanBeUsedInSyncWithThirdPerson
        path: ''
        startLine: 510
      syntax:
        content:
          CSharp: public bool CanBeUsedInSyncWithThirdPerson
          VB: Public CanBeUsedInSyncWithThirdPerson As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
      commentId: F:Global.ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
      language: CSharp
      name:
        CSharp: CanLoopAnimationOnHoldInThirdPerson
        VB: CanLoopAnimationOnHoldInThirdPerson
      nameWithType:
        CSharp: ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
        VB: ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
      qualifiedName:
        CSharp: ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
        VB: ToolInteraction.CanLoopAnimationOnHoldInThirdPerson
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CanLoopAnimationOnHoldInThirdPerson
        path: ''
        startLine: 511
      syntax:
        content:
          CSharp: public bool CanLoopAnimationOnHoldInThirdPerson
          VB: Public CanLoopAnimationOnHoldInThirdPerson As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.IgnoreUIDelayInteraction
      commentId: F:Global.ToolInteraction.IgnoreUIDelayInteraction
      language: CSharp
      name:
        CSharp: IgnoreUIDelayInteraction
        VB: IgnoreUIDelayInteraction
      nameWithType:
        CSharp: ToolInteraction.IgnoreUIDelayInteraction
        VB: ToolInteraction.IgnoreUIDelayInteraction
      qualifiedName:
        CSharp: ToolInteraction.IgnoreUIDelayInteraction
        VB: ToolInteraction.IgnoreUIDelayInteraction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IgnoreUIDelayInteraction
        path: ''
        startLine: 512
      syntax:
        content:
          CSharp: public bool IgnoreUIDelayInteraction
          VB: Public IgnoreUIDelayInteraction As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.HasCustomInputHandler
      commentId: F:Global.ToolInteraction.HasCustomInputHandler
      language: CSharp
      name:
        CSharp: HasCustomInputHandler
        VB: HasCustomInputHandler
      nameWithType:
        CSharp: ToolInteraction.HasCustomInputHandler
        VB: ToolInteraction.HasCustomInputHandler
      qualifiedName:
        CSharp: ToolInteraction.HasCustomInputHandler
        VB: ToolInteraction.HasCustomInputHandler
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasCustomInputHandler
        path: ''
        startLine: 515
      syntax:
        content:
          CSharp: public bool HasCustomInputHandler
          VB: Public HasCustomInputHandler As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.inputState
      commentId: F:Global.ToolInteraction.inputState
      language: CSharp
      name:
        CSharp: inputState
        VB: inputState
      nameWithType:
        CSharp: ToolInteraction.inputState
        VB: ToolInteraction.inputState
      qualifiedName:
        CSharp: ToolInteraction.inputState
        VB: ToolInteraction.inputState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: inputState
        path: ''
        startLine: 516
      syntax:
        content:
          CSharp: public ToolInteraction.ToolInputState inputState
          VB: Public inputState As ToolInteraction.ToolInputState
        return:
          type: Global.ToolInteraction.ToolInputState
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ToolInteraction.Multiples
      commentId: F:Global.ToolInteraction.Multiples
      language: CSharp
      name:
        CSharp: Multiples
        VB: Multiples
      nameWithType:
        CSharp: ToolInteraction.Multiples
        VB: ToolInteraction.Multiples
      qualifiedName:
        CSharp: ToolInteraction.Multiples
        VB: ToolInteraction.Multiples
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Multiples
        path: ''
        startLine: 518
      syntax:
        content:
          CSharp: public Transform[] Multiples
          VB: Public Multiples As Transform()
        return:
          type: Global.Transform[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ToolInteraction.ToolInputState
    commentId: T:Global.ToolInteraction.ToolInputState
    language: CSharp
    name:
      CSharp: ToolInteraction.ToolInputState
      VB: ToolInteraction.ToolInputState
    nameWithType:
      CSharp: ToolInteraction.ToolInputState
      VB: ToolInteraction.ToolInputState
    qualifiedName:
      CSharp: ToolInteraction.ToolInputState
      VB: ToolInteraction.ToolInputState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ToolInputState
      path: ''
      startLine: 524
    summary: "\nState of the tool button. (it usually is the left mouse button).\nTool controller can get the input state from here and controls how the tool works\n"
    example: []
    syntax:
      content:
        CSharp: public enum ToolInputState
        VB: Public Enum ToolInputState
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.ToolInteraction.ToolInputState.None
      commentId: F:Global.ToolInteraction.ToolInputState.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: ToolInteraction.ToolInputState.None
        VB: ToolInteraction.ToolInputState.None
      qualifiedName:
        CSharp: ToolInteraction.ToolInputState.None
        VB: ToolInteraction.ToolInputState.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 527
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Global.ToolInteraction.ToolInputState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.ToolInteraction.ToolInputState.ButtonDown
      commentId: F:Global.ToolInteraction.ToolInputState.ButtonDown
      language: CSharp
      name:
        CSharp: ButtonDown
        VB: ButtonDown
      nameWithType:
        CSharp: ToolInteraction.ToolInputState.ButtonDown
        VB: ToolInteraction.ToolInputState.ButtonDown
      qualifiedName:
        CSharp: ToolInteraction.ToolInputState.ButtonDown
        VB: ToolInteraction.ToolInputState.ButtonDown
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ButtonDown
        path: ''
        startLine: 528
      syntax:
        content:
          CSharp: ButtonDown = 1
          VB: ButtonDown = 1
        return:
          type: Global.ToolInteraction.ToolInputState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.ToolInteraction.ToolInputState.ButtonUp
      commentId: F:Global.ToolInteraction.ToolInputState.ButtonUp
      language: CSharp
      name:
        CSharp: ButtonUp
        VB: ButtonUp
      nameWithType:
        CSharp: ToolInteraction.ToolInputState.ButtonUp
        VB: ToolInteraction.ToolInputState.ButtonUp
      qualifiedName:
        CSharp: ToolInteraction.ToolInputState.ButtonUp
        VB: ToolInteraction.ToolInputState.ButtonUp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ButtonUp
        path: ''
        startLine: 529
      syntax:
        content:
          CSharp: ButtonUp = 2
          VB: ButtonUp = 2
        return:
          type: Global.ToolInteraction.ToolInputState
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.UnityAnimal
    commentId: T:Global.UnityAnimal
    language: CSharp
    name:
      CSharp: UnityAnimal
      VB: UnityAnimal
    nameWithType:
      CSharp: UnityAnimal
      VB: UnityAnimal
    qualifiedName:
      CSharp: UnityAnimal
      VB: UnityAnimal
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UnityAnimal
      path: ''
      startLine: 536
    summary: Primary component for registering a game object as an Eco animal.
    example: []
    syntax:
      content:
        CSharp: 'public class UnityAnimal : OptimizedMonobeh'
        VB: >-
          Public Class UnityAnimal

              Inherits OptimizedMonobeh
    inheritance:
    - System.Object
    - Global.OptimizedMonobeh
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.UnityAnimal.ragdollCenter
      commentId: F:Global.UnityAnimal.ragdollCenter
      language: CSharp
      name:
        CSharp: ragdollCenter
        VB: ragdollCenter
      nameWithType:
        CSharp: UnityAnimal.ragdollCenter
        VB: UnityAnimal.ragdollCenter
      qualifiedName:
        CSharp: UnityAnimal.ragdollCenter
        VB: UnityAnimal.ragdollCenter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ragdollCenter
        path: ''
        startLine: 543
      syntax:
        content:
          CSharp: public Transform ragdollCenter
          VB: Public ragdollCenter As Transform
        return:
          type: Global.Transform
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.UnityAnimal.playerAvoidanceRange
      commentId: F:Global.UnityAnimal.playerAvoidanceRange
      language: CSharp
      name:
        CSharp: playerAvoidanceRange
        VB: playerAvoidanceRange
      nameWithType:
        CSharp: UnityAnimal.playerAvoidanceRange
        VB: UnityAnimal.playerAvoidanceRange
      qualifiedName:
        CSharp: UnityAnimal.playerAvoidanceRange
        VB: UnityAnimal.playerAvoidanceRange
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerAvoidanceRange
        path: ''
        startLine: 547
      summary: Max range in units to raycast players in front.
      example: []
      syntax:
        content:
          CSharp: public float playerAvoidanceRange
          VB: Public playerAvoidanceRange As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.UnityObjectExtensions
    commentId: T:Global.UnityObjectExtensions
    language: CSharp
    name:
      CSharp: UnityObjectExtensions
      VB: UnityObjectExtensions
    nameWithType:
      CSharp: UnityObjectExtensions
      VB: UnityObjectExtensions
    qualifiedName:
      CSharp: UnityObjectExtensions
      VB: UnityObjectExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UnityObjectExtensions
      path: ''
      startLine: 558
    syntax:
      content:
        CSharp: public static class UnityObjectExtensions
        VB: Public Module UnityObjectExtensions
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.GetScenePath(MonoBehaviour)
      commentId: M:Global.UnityObjectExtensions.GetScenePath(MonoBehaviour)
      language: CSharp
      name:
        CSharp: GetScenePath(MonoBehaviour)
        VB: GetScenePath(MonoBehaviour)
      nameWithType:
        CSharp: UnityObjectExtensions.GetScenePath(MonoBehaviour)
        VB: UnityObjectExtensions.GetScenePath(MonoBehaviour)
      qualifiedName:
        CSharp: UnityObjectExtensions.GetScenePath(MonoBehaviour)
        VB: UnityObjectExtensions.GetScenePath(MonoBehaviour)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScenePath
        path: ''
        startLine: 560
      syntax:
        content:
          CSharp: public static string GetScenePath(this MonoBehaviour b)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetScenePath(b As MonoBehaviour) As String
        parameters:
        - id: b
          type: Global.MonoBehaviour
        return:
          type: System.String
      overload: Global.UnityObjectExtensions.GetScenePath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.GetScenePath(GameObject)
      commentId: M:Global.UnityObjectExtensions.GetScenePath(GameObject)
      language: CSharp
      name:
        CSharp: GetScenePath(GameObject)
        VB: GetScenePath(GameObject)
      nameWithType:
        CSharp: UnityObjectExtensions.GetScenePath(GameObject)
        VB: UnityObjectExtensions.GetScenePath(GameObject)
      qualifiedName:
        CSharp: UnityObjectExtensions.GetScenePath(GameObject)
        VB: UnityObjectExtensions.GetScenePath(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScenePath
        path: ''
        startLine: 561
      syntax:
        content:
          CSharp: public static string GetScenePath(this GameObject g)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetScenePath(g As GameObject) As String
        parameters:
        - id: g
          type: Global.GameObject
        return:
          type: System.String
      overload: Global.UnityObjectExtensions.GetScenePath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.GetScenePath(Transform)
      commentId: M:Global.UnityObjectExtensions.GetScenePath(Transform)
      language: CSharp
      name:
        CSharp: GetScenePath(Transform)
        VB: GetScenePath(Transform)
      nameWithType:
        CSharp: UnityObjectExtensions.GetScenePath(Transform)
        VB: UnityObjectExtensions.GetScenePath(Transform)
      qualifiedName:
        CSharp: UnityObjectExtensions.GetScenePath(Transform)
        VB: UnityObjectExtensions.GetScenePath(Transform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetScenePath
        path: ''
        startLine: 563
      syntax:
        content:
          CSharp: public static string GetScenePath(this Transform t)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetScenePath(t As Transform) As String
        parameters:
        - id: t
          type: Global.Transform
        return:
          type: System.String
      overload: Global.UnityObjectExtensions.GetScenePath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.GetOrAddComponent``1(GameObject)
      commentId: M:Global.UnityObjectExtensions.GetOrAddComponent``1(GameObject)
      language: CSharp
      name:
        CSharp: GetOrAddComponent<T>(GameObject)
        VB: GetOrAddComponent(Of T)(GameObject)
      nameWithType:
        CSharp: UnityObjectExtensions.GetOrAddComponent<T>(GameObject)
        VB: UnityObjectExtensions.GetOrAddComponent(Of T)(GameObject)
      qualifiedName:
        CSharp: UnityObjectExtensions.GetOrAddComponent<T>(GameObject)
        VB: UnityObjectExtensions.GetOrAddComponent(Of T)(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetOrAddComponent
        path: ''
        startLine: 579
      summary: 'Gets or adds a component of type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>. '
      example: []
      syntax:
        content:
          CSharp: >-
            public static T GetOrAddComponent<T>(this GameObject gameObject)

                where T : Component
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetOrAddComponent(Of T As Component)(gameObject As GameObject) As T
        parameters:
        - id: gameObject
          type: Global.GameObject
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: Global.UnityObjectExtensions.GetOrAddComponent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.GetOrAddComponent(GameObject,Type)
      commentId: M:Global.UnityObjectExtensions.GetOrAddComponent(GameObject,Type)
      language: CSharp
      name:
        CSharp: GetOrAddComponent(GameObject, Type)
        VB: GetOrAddComponent(GameObject, Type)
      nameWithType:
        CSharp: UnityObjectExtensions.GetOrAddComponent(GameObject, Type)
        VB: UnityObjectExtensions.GetOrAddComponent(GameObject, Type)
      qualifiedName:
        CSharp: UnityObjectExtensions.GetOrAddComponent(GameObject, Type)
        VB: UnityObjectExtensions.GetOrAddComponent(GameObject, Type)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetOrAddComponent
        path: ''
        startLine: 583
      summary: 'Gets or adds a component of the provided type. '
      example: []
      syntax:
        content:
          CSharp: public static Component GetOrAddComponent(this GameObject gameObject, Type componentType)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetOrAddComponent(gameObject As GameObject, componentType As Type) As Component
        parameters:
        - id: gameObject
          type: Global.GameObject
        - id: componentType
          type: Global.Type
        return:
          type: Global.Component
      overload: Global.UnityObjectExtensions.GetOrAddComponent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.HasComponent``1(GameObject)
      commentId: M:Global.UnityObjectExtensions.HasComponent``1(GameObject)
      language: CSharp
      name:
        CSharp: HasComponent<T>(GameObject)
        VB: HasComponent(Of T)(GameObject)
      nameWithType:
        CSharp: UnityObjectExtensions.HasComponent<T>(GameObject)
        VB: UnityObjectExtensions.HasComponent(Of T)(GameObject)
      qualifiedName:
        CSharp: UnityObjectExtensions.HasComponent<T>(GameObject)
        VB: UnityObjectExtensions.HasComponent(Of T)(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasComponent
        path: ''
        startLine: 587
      summary: 'Checks if <code data-dev-comment-type="paramref" class="paramref">gameObject</code> has a component of type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>. '
      example: []
      syntax:
        content:
          CSharp: public static bool HasComponent<T>(this GameObject gameObject)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function HasComponent(Of T)(gameObject As GameObject) As Boolean
        parameters:
        - id: gameObject
          type: Global.GameObject
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Global.UnityObjectExtensions.HasComponent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.UnityObjectExtensions.HasComponent``1(Component)
      commentId: M:Global.UnityObjectExtensions.HasComponent``1(Component)
      language: CSharp
      name:
        CSharp: HasComponent<T>(Component)
        VB: HasComponent(Of T)(Component)
      nameWithType:
        CSharp: UnityObjectExtensions.HasComponent<T>(Component)
        VB: UnityObjectExtensions.HasComponent(Of T)(Component)
      qualifiedName:
        CSharp: UnityObjectExtensions.HasComponent<T>(Component)
        VB: UnityObjectExtensions.HasComponent(Of T)(Component)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HasComponent
        path: ''
        startLine: 591
      summary: 'Checks if <code data-dev-comment-type="paramref" class="paramref">component</code> has a component of type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code>. '
      example: []
      syntax:
        content:
          CSharp: public static bool HasComponent<T>(this Component component)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function HasComponent(Of T)(component As Component) As Boolean
        parameters:
        - id: component
          type: Global.Component
        typeParameters:
        - id: T
        return:
          type: System.Boolean
      overload: Global.UnityObjectExtensions.HasComponent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.WaitForGround
    commentId: T:Global.WaitForGround
    language: CSharp
    name:
      CSharp: WaitForGround
      VB: WaitForGround
    nameWithType:
      CSharp: WaitForGround
      VB: WaitForGround
    qualifiedName:
      CSharp: WaitForGround
      VB: WaitForGround
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WaitForGround
      path: ''
      startLine: 599
    summary: Disables an object completely until there is ground underneath it, then enables it in an attempt to prevent physics objects from falling through the earth among other things.
    example: []
    syntax:
      content:
        CSharp: 'public class WaitForGround : MonoBehaviour'
        VB: >-
          Public Class WaitForGround

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.ChangedStringStateEvent
    commentId: T:Global.ChangedStringStateEvent
    language: CSharp
    name:
      CSharp: ChangedStringStateEvent
      VB: ChangedStringStateEvent
    nameWithType:
      CSharp: ChangedStringStateEvent
      VB: ChangedStringStateEvent
    qualifiedName:
      CSharp: ChangedStringStateEvent
      VB: ChangedStringStateEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ChangedStringStateEvent
      path: ''
      startLine: 608
    syntax:
      content:
        CSharp: 'public class ChangedStringStateEvent : UnityEvent<string>'
        VB: >-
          Public Class ChangedStringStateEvent

              Inherits UnityEvent(Of String)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.ChangedFloatStateEvent
    commentId: T:Global.ChangedFloatStateEvent
    language: CSharp
    name:
      CSharp: ChangedFloatStateEvent
      VB: ChangedFloatStateEvent
    nameWithType:
      CSharp: ChangedFloatStateEvent
      VB: ChangedFloatStateEvent
    qualifiedName:
      CSharp: ChangedFloatStateEvent
      VB: ChangedFloatStateEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ChangedFloatStateEvent
      path: ''
      startLine: 612
    syntax:
      content:
        CSharp: 'public class ChangedFloatStateEvent : UnityEvent<float>'
        VB: >-
          Public Class ChangedFloatStateEvent

              Inherits UnityEvent(Of Single)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.ChangedStateEvent
    commentId: T:Global.ChangedStateEvent
    language: CSharp
    name:
      CSharp: ChangedStateEvent
      VB: ChangedStateEvent
    nameWithType:
      CSharp: ChangedStateEvent
      VB: ChangedStateEvent
    qualifiedName:
      CSharp: ChangedStateEvent
      VB: ChangedStateEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ChangedStateEvent
      path: ''
      startLine: 616
    syntax:
      content:
        CSharp: 'public class ChangedStateEvent : UnityEvent<bool>'
        VB: >-
          Public Class ChangedStateEvent

              Inherits UnityEvent(Of Boolean)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.SetStateEvent
    commentId: T:Global.SetStateEvent
    language: CSharp
    name:
      CSharp: SetStateEvent
      VB: SetStateEvent
    nameWithType:
      CSharp: SetStateEvent
      VB: SetStateEvent
    qualifiedName:
      CSharp: SetStateEvent
      VB: SetStateEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SetStateEvent
      path: ''
      startLine: 620
    syntax:
      content:
        CSharp: 'public class SetStateEvent : UnityEvent'
        VB: >-
          Public Class SetStateEvent

              Inherits UnityEvent
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.WorldObject
    commentId: T:Global.WorldObject
    language: CSharp
    name:
      CSharp: WorldObject
      VB: WorldObject
    nameWithType:
      CSharp: WorldObject
      VB: WorldObject
    qualifiedName:
      CSharp: WorldObject
      VB: WorldObject
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WorldObject
      path: ''
      startLine: 625
    syntax:
      content:
        CSharp: 'public class WorldObject : SubscribableBehavior'
        VB: >-
          Public Class WorldObject

              Inherits SubscribableBehavior
    inheritance:
    - System.Object
    - Global.SubscribableBehavior
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WorldObject.OverrideInitEnabled
      commentId: F:Global.WorldObject.OverrideInitEnabled
      language: CSharp
      name:
        CSharp: OverrideInitEnabled
        VB: OverrideInitEnabled
      nameWithType:
        CSharp: WorldObject.OverrideInitEnabled
        VB: WorldObject.OverrideInitEnabled
      qualifiedName:
        CSharp: WorldObject.OverrideInitEnabled
        VB: WorldObject.OverrideInitEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverrideInitEnabled
        path: ''
        startLine: 632
      syntax:
        content:
          CSharp: public bool OverrideInitEnabled
          VB: Public OverrideInitEnabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitialState
      commentId: F:Global.WorldObject.OnInitialState
      language: CSharp
      name:
        CSharp: OnInitialState
        VB: OnInitialState
      nameWithType:
        CSharp: WorldObject.OnInitialState
        VB: WorldObject.OnInitialState
      qualifiedName:
        CSharp: WorldObject.OnInitialState
        VB: WorldObject.OnInitialState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitialState
        path: ''
        startLine: 633
      syntax:
        content:
          CSharp: public ChangedStateEvent OnInitialState
          VB: Public OnInitialState As ChangedStateEvent
        return:
          type: Global.ChangedStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitiallyEnabled
      commentId: F:Global.WorldObject.OnInitiallyEnabled
      language: CSharp
      name:
        CSharp: OnInitiallyEnabled
        VB: OnInitiallyEnabled
      nameWithType:
        CSharp: WorldObject.OnInitiallyEnabled
        VB: WorldObject.OnInitiallyEnabled
      qualifiedName:
        CSharp: WorldObject.OnInitiallyEnabled
        VB: WorldObject.OnInitiallyEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitiallyEnabled
        path: ''
        startLine: 634
      syntax:
        content:
          CSharp: public SetStateEvent OnInitiallyEnabled
          VB: Public OnInitiallyEnabled As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitiallyDisabled
      commentId: F:Global.WorldObject.OnInitiallyDisabled
      language: CSharp
      name:
        CSharp: OnInitiallyDisabled
        VB: OnInitiallyDisabled
      nameWithType:
        CSharp: WorldObject.OnInitiallyDisabled
        VB: WorldObject.OnInitiallyDisabled
      qualifiedName:
        CSharp: WorldObject.OnInitiallyDisabled
        VB: WorldObject.OnInitiallyDisabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitiallyDisabled
        path: ''
        startLine: 635
      syntax:
        content:
          CSharp: public SetStateEvent OnInitiallyDisabled
          VB: Public OnInitiallyDisabled As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnEnabledChanged
      commentId: F:Global.WorldObject.OnEnabledChanged
      language: CSharp
      name:
        CSharp: OnEnabledChanged
        VB: OnEnabledChanged
      nameWithType:
        CSharp: WorldObject.OnEnabledChanged
        VB: WorldObject.OnEnabledChanged
      qualifiedName:
        CSharp: WorldObject.OnEnabledChanged
        VB: WorldObject.OnEnabledChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnabledChanged
        path: ''
        startLine: 638
      syntax:
        content:
          CSharp: public ChangedStateEvent OnEnabledChanged
          VB: Public OnEnabledChanged As ChangedStateEvent
        return:
          type: Global.ChangedStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnEnabled
      commentId: F:Global.WorldObject.OnEnabled
      language: CSharp
      name:
        CSharp: OnEnabled
        VB: OnEnabled
      nameWithType:
        CSharp: WorldObject.OnEnabled
        VB: WorldObject.OnEnabled
      qualifiedName:
        CSharp: WorldObject.OnEnabled
        VB: WorldObject.OnEnabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnabled
        path: ''
        startLine: 639
      syntax:
        content:
          CSharp: public SetStateEvent OnEnabled
          VB: Public OnEnabled As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnDisabled
      commentId: F:Global.WorldObject.OnDisabled
      language: CSharp
      name:
        CSharp: OnDisabled
        VB: OnDisabled
      nameWithType:
        CSharp: WorldObject.OnDisabled
        VB: WorldObject.OnDisabled
      qualifiedName:
        CSharp: WorldObject.OnDisabled
        VB: WorldObject.OnDisabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDisabled
        path: ''
        startLine: 640
      syntax:
        content:
          CSharp: public SetStateEvent OnDisabled
          VB: Public OnDisabled As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OverrideInitOperating
      commentId: F:Global.WorldObject.OverrideInitOperating
      language: CSharp
      name:
        CSharp: OverrideInitOperating
        VB: OverrideInitOperating
      nameWithType:
        CSharp: WorldObject.OverrideInitOperating
        VB: WorldObject.OverrideInitOperating
      qualifiedName:
        CSharp: WorldObject.OverrideInitOperating
        VB: WorldObject.OverrideInitOperating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverrideInitOperating
        path: ''
        startLine: 645
      syntax:
        content:
          CSharp: public bool OverrideInitOperating
          VB: Public OverrideInitOperating As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitialOperatingState
      commentId: F:Global.WorldObject.OnInitialOperatingState
      language: CSharp
      name:
        CSharp: OnInitialOperatingState
        VB: OnInitialOperatingState
      nameWithType:
        CSharp: WorldObject.OnInitialOperatingState
        VB: WorldObject.OnInitialOperatingState
      qualifiedName:
        CSharp: WorldObject.OnInitialOperatingState
        VB: WorldObject.OnInitialOperatingState
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitialOperatingState
        path: ''
        startLine: 646
      syntax:
        content:
          CSharp: public ChangedStateEvent OnInitialOperatingState
          VB: Public OnInitialOperatingState As ChangedStateEvent
        return:
          type: Global.ChangedStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitiallyEnabledOperating
      commentId: F:Global.WorldObject.OnInitiallyEnabledOperating
      language: CSharp
      name:
        CSharp: OnInitiallyEnabledOperating
        VB: OnInitiallyEnabledOperating
      nameWithType:
        CSharp: WorldObject.OnInitiallyEnabledOperating
        VB: WorldObject.OnInitiallyEnabledOperating
      qualifiedName:
        CSharp: WorldObject.OnInitiallyEnabledOperating
        VB: WorldObject.OnInitiallyEnabledOperating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitiallyEnabledOperating
        path: ''
        startLine: 647
      syntax:
        content:
          CSharp: public SetStateEvent OnInitiallyEnabledOperating
          VB: Public OnInitiallyEnabledOperating As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnInitiallyDisabledOperating
      commentId: F:Global.WorldObject.OnInitiallyDisabledOperating
      language: CSharp
      name:
        CSharp: OnInitiallyDisabledOperating
        VB: OnInitiallyDisabledOperating
      nameWithType:
        CSharp: WorldObject.OnInitiallyDisabledOperating
        VB: WorldObject.OnInitiallyDisabledOperating
      qualifiedName:
        CSharp: WorldObject.OnInitiallyDisabledOperating
        VB: WorldObject.OnInitiallyDisabledOperating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInitiallyDisabledOperating
        path: ''
        startLine: 648
      syntax:
        content:
          CSharp: public SetStateEvent OnInitiallyDisabledOperating
          VB: Public OnInitiallyDisabledOperating As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnOperatingChanged
      commentId: F:Global.WorldObject.OnOperatingChanged
      language: CSharp
      name:
        CSharp: OnOperatingChanged
        VB: OnOperatingChanged
      nameWithType:
        CSharp: WorldObject.OnOperatingChanged
        VB: WorldObject.OnOperatingChanged
      qualifiedName:
        CSharp: WorldObject.OnOperatingChanged
        VB: WorldObject.OnOperatingChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnOperatingChanged
        path: ''
        startLine: 651
      syntax:
        content:
          CSharp: public ChangedStateEvent OnOperatingChanged
          VB: Public OnOperatingChanged As ChangedStateEvent
        return:
          type: Global.ChangedStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnEnableOperating
      commentId: F:Global.WorldObject.OnEnableOperating
      language: CSharp
      name:
        CSharp: OnEnableOperating
        VB: OnEnableOperating
      nameWithType:
        CSharp: WorldObject.OnEnableOperating
        VB: WorldObject.OnEnableOperating
      qualifiedName:
        CSharp: WorldObject.OnEnableOperating
        VB: WorldObject.OnEnableOperating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnableOperating
        path: ''
        startLine: 652
      syntax:
        content:
          CSharp: public SetStateEvent OnEnableOperating
          VB: Public OnEnableOperating As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnDisableOperating
      commentId: F:Global.WorldObject.OnDisableOperating
      language: CSharp
      name:
        CSharp: OnDisableOperating
        VB: OnDisableOperating
      nameWithType:
        CSharp: WorldObject.OnDisableOperating
        VB: WorldObject.OnDisableOperating
      qualifiedName:
        CSharp: WorldObject.OnDisableOperating
        VB: WorldObject.OnDisableOperating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDisableOperating
        path: ''
        startLine: 653
      syntax:
        content:
          CSharp: public SetStateEvent OnDisableOperating
          VB: Public OnDisableOperating As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnUsingChanged
      commentId: F:Global.WorldObject.OnUsingChanged
      language: CSharp
      name:
        CSharp: OnUsingChanged
        VB: OnUsingChanged
      nameWithType:
        CSharp: WorldObject.OnUsingChanged
        VB: WorldObject.OnUsingChanged
      qualifiedName:
        CSharp: WorldObject.OnUsingChanged
        VB: WorldObject.OnUsingChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnUsingChanged
        path: ''
        startLine: 657
      syntax:
        content:
          CSharp: public ChangedStateEvent OnUsingChanged
          VB: Public OnUsingChanged As ChangedStateEvent
        return:
          type: Global.ChangedStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnEnableUsing
      commentId: F:Global.WorldObject.OnEnableUsing
      language: CSharp
      name:
        CSharp: OnEnableUsing
        VB: OnEnableUsing
      nameWithType:
        CSharp: WorldObject.OnEnableUsing
        VB: WorldObject.OnEnableUsing
      qualifiedName:
        CSharp: WorldObject.OnEnableUsing
        VB: WorldObject.OnEnableUsing
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnableUsing
        path: ''
        startLine: 658
      syntax:
        content:
          CSharp: public SetStateEvent OnEnableUsing
          VB: Public OnEnableUsing As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnDisableUsing
      commentId: F:Global.WorldObject.OnDisableUsing
      language: CSharp
      name:
        CSharp: OnDisableUsing
        VB: OnDisableUsing
      nameWithType:
        CSharp: WorldObject.OnDisableUsing
        VB: WorldObject.OnDisableUsing
      qualifiedName:
        CSharp: WorldObject.OnDisableUsing
        VB: WorldObject.OnDisableUsing
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDisableUsing
        path: ''
        startLine: 659
      syntax:
        content:
          CSharp: public SetStateEvent OnDisableUsing
          VB: Public OnDisableUsing As SetStateEvent
        return:
          type: Global.SetStateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.States
      commentId: F:Global.WorldObject.States
      language: CSharp
      name:
        CSharp: States
        VB: States
      nameWithType:
        CSharp: WorldObject.States
        VB: WorldObject.States
      qualifiedName:
        CSharp: WorldObject.States
        VB: WorldObject.States
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: States
        path: ''
        startLine: 661
      syntax:
        content:
          CSharp: public string[] States
          VB: Public States As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnStateEnabledEvents
      commentId: F:Global.WorldObject.OnStateEnabledEvents
      language: CSharp
      name:
        CSharp: OnStateEnabledEvents
        VB: OnStateEnabledEvents
      nameWithType:
        CSharp: WorldObject.OnStateEnabledEvents
        VB: WorldObject.OnStateEnabledEvents
      qualifiedName:
        CSharp: WorldObject.OnStateEnabledEvents
        VB: WorldObject.OnStateEnabledEvents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnabledEvents
        path: ''
        startLine: 662
      syntax:
        content:
          CSharp: public SetStateEvent[] OnStateEnabledEvents
          VB: Public OnStateEnabledEvents As SetStateEvent()
        return:
          type: Global.SetStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnStateDisabledEvents
      commentId: F:Global.WorldObject.OnStateDisabledEvents
      language: CSharp
      name:
        CSharp: OnStateDisabledEvents
        VB: OnStateDisabledEvents
      nameWithType:
        CSharp: WorldObject.OnStateDisabledEvents
        VB: WorldObject.OnStateDisabledEvents
      qualifiedName:
        CSharp: WorldObject.OnStateDisabledEvents
        VB: WorldObject.OnStateDisabledEvents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateDisabledEvents
        path: ''
        startLine: 663
      syntax:
        content:
          CSharp: public SetStateEvent[] OnStateDisabledEvents
          VB: Public OnStateDisabledEvents As SetStateEvent()
        return:
          type: Global.SetStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnStateChangedEvents
      commentId: F:Global.WorldObject.OnStateChangedEvents
      language: CSharp
      name:
        CSharp: OnStateChangedEvents
        VB: OnStateChangedEvents
      nameWithType:
        CSharp: WorldObject.OnStateChangedEvents
        VB: WorldObject.OnStateChangedEvents
      qualifiedName:
        CSharp: WorldObject.OnStateChangedEvents
        VB: WorldObject.OnStateChangedEvents
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateChangedEvents
        path: ''
        startLine: 664
      syntax:
        content:
          CSharp: public ChangedStateEvent[] OnStateChangedEvents
          VB: Public OnStateChangedEvents As ChangedStateEvent()
        return:
          type: Global.ChangedStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.StringStates
      commentId: F:Global.WorldObject.StringStates
      language: CSharp
      name:
        CSharp: StringStates
        VB: StringStates
      nameWithType:
        CSharp: WorldObject.StringStates
        VB: WorldObject.StringStates
      qualifiedName:
        CSharp: WorldObject.StringStates
        VB: WorldObject.StringStates
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StringStates
        path: ''
        startLine: 666
      syntax:
        content:
          CSharp: public string[] StringStates
          VB: Public StringStates As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnStringStateChanged
      commentId: F:Global.WorldObject.OnStringStateChanged
      language: CSharp
      name:
        CSharp: OnStringStateChanged
        VB: OnStringStateChanged
      nameWithType:
        CSharp: WorldObject.OnStringStateChanged
        VB: WorldObject.OnStringStateChanged
      qualifiedName:
        CSharp: WorldObject.OnStringStateChanged
        VB: WorldObject.OnStringStateChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStringStateChanged
        path: ''
        startLine: 667
      syntax:
        content:
          CSharp: public ChangedStringStateEvent[] OnStringStateChanged
          VB: Public OnStringStateChanged As ChangedStringStateEvent()
        return:
          type: Global.ChangedStringStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.FloatStates
      commentId: F:Global.WorldObject.FloatStates
      language: CSharp
      name:
        CSharp: FloatStates
        VB: FloatStates
      nameWithType:
        CSharp: WorldObject.FloatStates
        VB: WorldObject.FloatStates
      qualifiedName:
        CSharp: WorldObject.FloatStates
        VB: WorldObject.FloatStates
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FloatStates
        path: ''
        startLine: 669
      syntax:
        content:
          CSharp: public string[] FloatStates
          VB: Public FloatStates As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.OnFloatStateChanged
      commentId: F:Global.WorldObject.OnFloatStateChanged
      language: CSharp
      name:
        CSharp: OnFloatStateChanged
        VB: OnFloatStateChanged
      nameWithType:
        CSharp: WorldObject.OnFloatStateChanged
        VB: WorldObject.OnFloatStateChanged
      qualifiedName:
        CSharp: WorldObject.OnFloatStateChanged
        VB: WorldObject.OnFloatStateChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnFloatStateChanged
        path: ''
        startLine: 670
      syntax:
        content:
          CSharp: public ChangedFloatStateEvent[] OnFloatStateChanged
          VB: Public OnFloatStateChanged As ChangedFloatStateEvent()
        return:
          type: Global.ChangedFloatStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.Events
      commentId: F:Global.WorldObject.Events
      language: CSharp
      name:
        CSharp: Events
        VB: Events
      nameWithType:
        CSharp: WorldObject.Events
        VB: WorldObject.Events
      qualifiedName:
        CSharp: WorldObject.Events
        VB: WorldObject.Events
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Events
        path: ''
        startLine: 672
      syntax:
        content:
          CSharp: public string[] Events
          VB: Public Events As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.EventHandlers
      commentId: F:Global.WorldObject.EventHandlers
      language: CSharp
      name:
        CSharp: EventHandlers
        VB: EventHandlers
      nameWithType:
        CSharp: WorldObject.EventHandlers
        VB: WorldObject.EventHandlers
      qualifiedName:
        CSharp: WorldObject.EventHandlers
        VB: WorldObject.EventHandlers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EventHandlers
        path: ''
        startLine: 673
      syntax:
        content:
          CSharp: public SetStateEvent[] EventHandlers
          VB: Public EventHandlers As SetStateEvent()
        return:
          type: Global.SetStateEvent[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.hasOccupancy
      commentId: F:Global.WorldObject.hasOccupancy
      language: CSharp
      name:
        CSharp: hasOccupancy
        VB: hasOccupancy
      nameWithType:
        CSharp: WorldObject.hasOccupancy
        VB: WorldObject.hasOccupancy
      qualifiedName:
        CSharp: WorldObject.hasOccupancy
        VB: WorldObject.hasOccupancy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hasOccupancy
        path: ''
        startLine: 677
      syntax:
        content:
          CSharp: public bool hasOccupancy
          VB: Public hasOccupancy As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.overrideOccupancy
      commentId: F:Global.WorldObject.overrideOccupancy
      language: CSharp
      name:
        CSharp: overrideOccupancy
        VB: overrideOccupancy
      nameWithType:
        CSharp: WorldObject.overrideOccupancy
        VB: WorldObject.overrideOccupancy
      qualifiedName:
        CSharp: WorldObject.overrideOccupancy
        VB: WorldObject.overrideOccupancy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: overrideOccupancy
        path: ''
        startLine: 678
      syntax:
        content:
          CSharp: public bool overrideOccupancy
          VB: Public overrideOccupancy As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.size
      commentId: F:Global.WorldObject.size
      language: CSharp
      name:
        CSharp: size
        VB: size
      nameWithType:
        CSharp: WorldObject.size
        VB: WorldObject.size
      qualifiedName:
        CSharp: WorldObject.size
        VB: WorldObject.size
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: size
        path: ''
        startLine: 679
      syntax:
        content:
          CSharp: public Vector3 size
          VB: Public size As Vector3
        return:
          type: Global.Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.occupancyOffset
      commentId: F:Global.WorldObject.occupancyOffset
      language: CSharp
      name:
        CSharp: occupancyOffset
        VB: occupancyOffset
      nameWithType:
        CSharp: WorldObject.occupancyOffset
        VB: WorldObject.occupancyOffset
      qualifiedName:
        CSharp: WorldObject.occupancyOffset
        VB: WorldObject.occupancyOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: occupancyOffset
        path: ''
        startLine: 680
      syntax:
        content:
          CSharp: public Vector3 occupancyOffset
          VB: Public occupancyOffset As Vector3
        return:
          type: Global.Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WorldObject.interactable
      commentId: F:Global.WorldObject.interactable
      language: CSharp
      name:
        CSharp: interactable
        VB: interactable
      nameWithType:
        CSharp: WorldObject.interactable
        VB: WorldObject.interactable
      qualifiedName:
        CSharp: WorldObject.interactable
        VB: WorldObject.interactable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: interactable
        path: ''
        startLine: 684
      syntax:
        content:
          CSharp: public bool interactable
          VB: Public interactable As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.BlendTreeRandomizer
    commentId: T:Global.BlendTreeRandomizer
    language: CSharp
    name:
      CSharp: BlendTreeRandomizer
      VB: BlendTreeRandomizer
    nameWithType:
      CSharp: BlendTreeRandomizer
      VB: BlendTreeRandomizer
    qualifiedName:
      CSharp: BlendTreeRandomizer
      VB: BlendTreeRandomizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlendTreeRandomizer
      path: ''
      startLine: 689
    syntax:
      content:
        CSharp: 'public class BlendTreeRandomizer : StateMachineBehaviour'
        VB: >-
          Public Class BlendTreeRandomizer

              Inherits StateMachineBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.BlendTreeRandomizer.clipCount
      commentId: F:Global.BlendTreeRandomizer.clipCount
      language: CSharp
      name:
        CSharp: clipCount
        VB: clipCount
      nameWithType:
        CSharp: BlendTreeRandomizer.clipCount
        VB: BlendTreeRandomizer.clipCount
      qualifiedName:
        CSharp: BlendTreeRandomizer.clipCount
        VB: BlendTreeRandomizer.clipCount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: clipCount
        path: ''
        startLine: 692
      syntax:
        content:
          CSharp: public int clipCount
          VB: Public clipCount As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlendTreeRandomizer.probabilityThresholds
      commentId: F:Global.BlendTreeRandomizer.probabilityThresholds
      language: CSharp
      name:
        CSharp: probabilityThresholds
        VB: probabilityThresholds
      nameWithType:
        CSharp: BlendTreeRandomizer.probabilityThresholds
        VB: BlendTreeRandomizer.probabilityThresholds
      qualifiedName:
        CSharp: BlendTreeRandomizer.probabilityThresholds
        VB: BlendTreeRandomizer.probabilityThresholds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: probabilityThresholds
        path: ''
        startLine: 694
      syntax:
        content:
          CSharp: public float[] probabilityThresholds
          VB: Public probabilityThresholds As Single()
        return:
          type: System.Single[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlendTreeRandomizer.parameterName
      commentId: F:Global.BlendTreeRandomizer.parameterName
      language: CSharp
      name:
        CSharp: parameterName
        VB: parameterName
      nameWithType:
        CSharp: BlendTreeRandomizer.parameterName
        VB: BlendTreeRandomizer.parameterName
      qualifiedName:
        CSharp: BlendTreeRandomizer.parameterName
        VB: BlendTreeRandomizer.parameterName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parameterName
        path: ''
        startLine: 695
      syntax:
        content:
          CSharp: public string parameterName
          VB: Public parameterName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlendTreeRandomizer.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.BlendTreeRandomizer.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: OnStateEnter(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: BlendTreeRandomizer.OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: BlendTreeRandomizer.OnStateEnter(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: BlendTreeRandomizer.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
        VB: BlendTreeRandomizer.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnter
        path: ''
        startLine: 703
      syntax:
        content:
          CSharp: public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateEnter(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.BlendTreeRandomizer.OnStateEnter*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.SetStateTrackerIDOnStateEnter
    commentId: T:Global.SetStateTrackerIDOnStateEnter
    language: CSharp
    name:
      CSharp: SetStateTrackerIDOnStateEnter
      VB: SetStateTrackerIDOnStateEnter
    nameWithType:
      CSharp: SetStateTrackerIDOnStateEnter
      VB: SetStateTrackerIDOnStateEnter
    qualifiedName:
      CSharp: SetStateTrackerIDOnStateEnter
      VB: SetStateTrackerIDOnStateEnter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SetStateTrackerIDOnStateEnter
      path: ''
      startLine: 723
    syntax:
      content:
        CSharp: 'public class SetStateTrackerIDOnStateEnter : StateMachineBehaviour'
        VB: >-
          Public Class SetStateTrackerIDOnStateEnter

              Inherits StateMachineBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.SetStateTrackerIDOnStateEnter.ID
      commentId: F:Global.SetStateTrackerIDOnStateEnter.ID
      language: CSharp
      name:
        CSharp: ID
        VB: ID
      nameWithType:
        CSharp: SetStateTrackerIDOnStateEnter.ID
        VB: SetStateTrackerIDOnStateEnter.ID
      qualifiedName:
        CSharp: SetStateTrackerIDOnStateEnter.ID
        VB: SetStateTrackerIDOnStateEnter.ID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ID
        path: ''
        startLine: 726
      syntax:
        content:
          CSharp: public int ID
          VB: Public ID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.SetStateTrackerIDOnStateEnter.PropertyID
      commentId: F:Global.SetStateTrackerIDOnStateEnter.PropertyID
      language: CSharp
      name:
        CSharp: PropertyID
        VB: PropertyID
      nameWithType:
        CSharp: SetStateTrackerIDOnStateEnter.PropertyID
        VB: SetStateTrackerIDOnStateEnter.PropertyID
      qualifiedName:
        CSharp: SetStateTrackerIDOnStateEnter.PropertyID
        VB: SetStateTrackerIDOnStateEnter.PropertyID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PropertyID
        path: ''
        startLine: 728
      syntax:
        content:
          CSharp: public static readonly int PropertyID
          VB: Public Shared ReadOnly PropertyID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.SetStateTrackerIDOnStateEnter.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.SetStateTrackerIDOnStateEnter.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: OnStateEnter(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: SetStateTrackerIDOnStateEnter.OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: SetStateTrackerIDOnStateEnter.OnStateEnter(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: SetStateTrackerIDOnStateEnter.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
        VB: SetStateTrackerIDOnStateEnter.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnter
        path: ''
        startLine: 741
      syntax:
        content:
          CSharp: public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateEnter(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.SetStateTrackerIDOnStateEnter.OnStateEnter*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.StateMachineCountdown
    commentId: T:Global.StateMachineCountdown
    language: CSharp
    name:
      CSharp: StateMachineCountdown
      VB: StateMachineCountdown
    nameWithType:
      CSharp: StateMachineCountdown
      VB: StateMachineCountdown
    qualifiedName:
      CSharp: StateMachineCountdown
      VB: StateMachineCountdown
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StateMachineCountdown
      path: ''
      startLine: 749
    syntax:
      content:
        CSharp: 'public class StateMachineCountdown : StateMachineBehaviour'
        VB: >-
          Public Class StateMachineCountdown

              Inherits StateMachineBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.StateMachineCountdown.min
      commentId: F:Global.StateMachineCountdown.min
      language: CSharp
      name:
        CSharp: min
        VB: min
      nameWithType:
        CSharp: StateMachineCountdown.min
        VB: StateMachineCountdown.min
      qualifiedName:
        CSharp: StateMachineCountdown.min
        VB: StateMachineCountdown.min
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: min
        path: ''
        startLine: 751
      syntax:
        content:
          CSharp: public float min
          VB: Public min As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineCountdown.max
      commentId: F:Global.StateMachineCountdown.max
      language: CSharp
      name:
        CSharp: max
        VB: max
      nameWithType:
        CSharp: StateMachineCountdown.max
        VB: StateMachineCountdown.max
      qualifiedName:
        CSharp: StateMachineCountdown.max
        VB: StateMachineCountdown.max
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: max
        path: ''
        startLine: 752
      syntax:
        content:
          CSharp: public float max
          VB: Public max As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineCountdown.parameterName
      commentId: F:Global.StateMachineCountdown.parameterName
      language: CSharp
      name:
        CSharp: parameterName
        VB: parameterName
      nameWithType:
        CSharp: StateMachineCountdown.parameterName
        VB: StateMachineCountdown.parameterName
      qualifiedName:
        CSharp: StateMachineCountdown.parameterName
        VB: StateMachineCountdown.parameterName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parameterName
        path: ''
        startLine: 753
      syntax:
        content:
          CSharp: public string parameterName
          VB: Public parameterName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineCountdown.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.StateMachineCountdown.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: OnStateEnter(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: StateMachineCountdown.OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: StateMachineCountdown.OnStateEnter(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: StateMachineCountdown.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
        VB: StateMachineCountdown.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnter
        path: ''
        startLine: 762
      syntax:
        content:
          CSharp: public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateEnter(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.StateMachineCountdown.OnStateEnter*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.StateMachineCountdown.OnStateUpdate(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.StateMachineCountdown.OnStateUpdate(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateUpdate(Animator, AnimatorStateInfo, Int32)
        VB: OnStateUpdate(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: StateMachineCountdown.OnStateUpdate(Animator, AnimatorStateInfo, Int32)
        VB: StateMachineCountdown.OnStateUpdate(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: StateMachineCountdown.OnStateUpdate(Animator, AnimatorStateInfo, System.Int32)
        VB: StateMachineCountdown.OnStateUpdate(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateUpdate
        path: ''
        startLine: 767
      syntax:
        content:
          CSharp: public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateUpdate(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.StateMachineCountdown.OnStateUpdate*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.StateMachineFloatRandomizer
    commentId: T:Global.StateMachineFloatRandomizer
    language: CSharp
    name:
      CSharp: StateMachineFloatRandomizer
      VB: StateMachineFloatRandomizer
    nameWithType:
      CSharp: StateMachineFloatRandomizer
      VB: StateMachineFloatRandomizer
    qualifiedName:
      CSharp: StateMachineFloatRandomizer
      VB: StateMachineFloatRandomizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StateMachineFloatRandomizer
      path: ''
      startLine: 775
    syntax:
      content:
        CSharp: 'public class StateMachineFloatRandomizer : StateMachineBehaviour'
        VB: >-
          Public Class StateMachineFloatRandomizer

              Inherits StateMachineBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.StateMachineFloatRandomizer.parameterName
      commentId: F:Global.StateMachineFloatRandomizer.parameterName
      language: CSharp
      name:
        CSharp: parameterName
        VB: parameterName
      nameWithType:
        CSharp: StateMachineFloatRandomizer.parameterName
        VB: StateMachineFloatRandomizer.parameterName
      qualifiedName:
        CSharp: StateMachineFloatRandomizer.parameterName
        VB: StateMachineFloatRandomizer.parameterName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parameterName
        path: ''
        startLine: 777
      syntax:
        content:
          CSharp: public string parameterName
          VB: Public parameterName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineFloatRandomizer.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.StateMachineFloatRandomizer.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: OnStateEnter(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: StateMachineFloatRandomizer.OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: StateMachineFloatRandomizer.OnStateEnter(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: StateMachineFloatRandomizer.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
        VB: StateMachineFloatRandomizer.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnter
        path: ''
        startLine: 785
      syntax:
        content:
          CSharp: public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateEnter(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.StateMachineFloatRandomizer.OnStateEnter*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.StateMachineRandomRange
    commentId: T:Global.StateMachineRandomRange
    language: CSharp
    name:
      CSharp: StateMachineRandomRange
      VB: StateMachineRandomRange
    nameWithType:
      CSharp: StateMachineRandomRange
      VB: StateMachineRandomRange
    qualifiedName:
      CSharp: StateMachineRandomRange
      VB: StateMachineRandomRange
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: StateMachineRandomRange
      path: ''
      startLine: 792
    syntax:
      content:
        CSharp: 'public class StateMachineRandomRange : StateMachineBehaviour'
        VB: >-
          Public Class StateMachineRandomRange

              Inherits StateMachineBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.StateMachineRandomRange.min
      commentId: F:Global.StateMachineRandomRange.min
      language: CSharp
      name:
        CSharp: min
        VB: min
      nameWithType:
        CSharp: StateMachineRandomRange.min
        VB: StateMachineRandomRange.min
      qualifiedName:
        CSharp: StateMachineRandomRange.min
        VB: StateMachineRandomRange.min
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: min
        path: ''
        startLine: 794
      syntax:
        content:
          CSharp: public float min
          VB: Public min As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineRandomRange.max
      commentId: F:Global.StateMachineRandomRange.max
      language: CSharp
      name:
        CSharp: max
        VB: max
      nameWithType:
        CSharp: StateMachineRandomRange.max
        VB: StateMachineRandomRange.max
      qualifiedName:
        CSharp: StateMachineRandomRange.max
        VB: StateMachineRandomRange.max
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: max
        path: ''
        startLine: 795
      syntax:
        content:
          CSharp: public float max
          VB: Public max As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineRandomRange.parameterName
      commentId: F:Global.StateMachineRandomRange.parameterName
      language: CSharp
      name:
        CSharp: parameterName
        VB: parameterName
      nameWithType:
        CSharp: StateMachineRandomRange.parameterName
        VB: StateMachineRandomRange.parameterName
      qualifiedName:
        CSharp: StateMachineRandomRange.parameterName
        VB: StateMachineRandomRange.parameterName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parameterName
        path: ''
        startLine: 796
      syntax:
        content:
          CSharp: public string parameterName
          VB: Public parameterName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.StateMachineRandomRange.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      commentId: M:Global.StateMachineRandomRange.OnStateEnter(Animator,AnimatorStateInfo,System.Int32)
      language: CSharp
      name:
        CSharp: OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: OnStateEnter(Animator, AnimatorStateInfo, Int32)
      nameWithType:
        CSharp: StateMachineRandomRange.OnStateEnter(Animator, AnimatorStateInfo, Int32)
        VB: StateMachineRandomRange.OnStateEnter(Animator, AnimatorStateInfo, Int32)
      qualifiedName:
        CSharp: StateMachineRandomRange.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
        VB: StateMachineRandomRange.OnStateEnter(Animator, AnimatorStateInfo, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnStateEnter
        path: ''
        startLine: 804
      syntax:
        content:
          CSharp: public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
          VB: Public Overrides Sub OnStateEnter(animator As Animator, stateInfo As AnimatorStateInfo, layerIndex As Integer)
        parameters:
        - id: animator
          type: Global.Animator
        - id: stateInfo
          type: Global.AnimatorStateInfo
        - id: layerIndex
          type: System.Int32
      overload: Global.StateMachineRandomRange.OnStateEnter*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.AutohookPropertyDrawer
    commentId: T:Global.AutohookPropertyDrawer
    language: CSharp
    name:
      CSharp: AutohookPropertyDrawer
      VB: AutohookPropertyDrawer
    nameWithType:
      CSharp: AutohookPropertyDrawer
      VB: AutohookPropertyDrawer
    qualifiedName:
      CSharp: AutohookPropertyDrawer
      VB: AutohookPropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AutohookPropertyDrawer
      path: ''
      startLine: 815
    syntax:
      content:
        CSharp: 'public class AutohookPropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class AutohookPropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.AutohookPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Global.AutohookPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: AutohookPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: AutohookPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: AutohookPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: AutohookPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnGUI
        path: ''
        startLine: 818
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Global.Rect
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
      overload: Global.AutohookPropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      commentId: M:Global.AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: GetPropertyHeight(SerializedProperty, GUIContent)
        VB: GetPropertyHeight(SerializedProperty, GUIContent)
      nameWithType:
        CSharp: AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
        VB: AutohookPropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPropertyHeight
        path: ''
        startLine: 838
      syntax:
        content:
          CSharp: public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
          VB: Public Overrides Function GetPropertyHeight(property As SerializedProperty, label As GUIContent) As Single
        parameters:
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
        return:
          type: System.Single
      overload: Global.AutohookPropertyDrawer.GetPropertyHeight*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.EnumFlagsMaskAttributeDrawer
    commentId: T:Global.EnumFlagsMaskAttributeDrawer
    language: CSharp
    name:
      CSharp: EnumFlagsMaskAttributeDrawer
      VB: EnumFlagsMaskAttributeDrawer
    nameWithType:
      CSharp: EnumFlagsMaskAttributeDrawer
      VB: EnumFlagsMaskAttributeDrawer
    qualifiedName:
      CSharp: EnumFlagsMaskAttributeDrawer
      VB: EnumFlagsMaskAttributeDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EnumFlagsMaskAttributeDrawer
      path: ''
      startLine: 899
    syntax:
      content:
        CSharp: 'public class EnumFlagsMaskAttributeDrawer : PropertyDrawer'
        VB: >-
          Public Class EnumFlagsMaskAttributeDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.EnumFlagsMaskAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Global.EnumFlagsMaskAttributeDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: EnumFlagsMaskAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: EnumFlagsMaskAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: EnumFlagsMaskAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: EnumFlagsMaskAttributeDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnGUI
        path: ''
        startLine: 902
      syntax:
        content:
          CSharp: public override void OnGUI(Rect _position, SerializedProperty _property, GUIContent _label)
          VB: Public Overrides Sub OnGUI(_position As Rect, _property As SerializedProperty, _label As GUIContent)
        parameters:
        - id: _position
          type: Global.Rect
        - id: _property
          type: Global.SerializedProperty
        - id: _label
          type: Global.GUIContent
      overload: Global.EnumFlagsMaskAttributeDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.ModExporter
    commentId: T:Global.ModExporter
    language: CSharp
    name:
      CSharp: ModExporter
      VB: ModExporter
    nameWithType:
      CSharp: ModExporter
      VB: ModExporter
    qualifiedName:
      CSharp: ModExporter
      VB: ModExporter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ModExporter
      path: ''
      startLine: 914
    syntax:
      content:
        CSharp: 'public class ModExporter : EditorWindow'
        VB: >-
          Public Class ModExporter

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ModExporter.ShowWindow
      commentId: M:Global.ModExporter.ShowWindow
      language: CSharp
      name:
        CSharp: ShowWindow()
        VB: ShowWindow()
      nameWithType:
        CSharp: ModExporter.ShowWindow()
        VB: ModExporter.ShowWindow()
      qualifiedName:
        CSharp: ModExporter.ShowWindow()
        VB: ModExporter.ShowWindow()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowWindow
        path: ''
        startLine: 920
      syntax:
        content:
          CSharp: public static void ShowWindow()
          VB: Public Shared Sub ShowWindow
      overload: Global.ModExporter.ShowWindow*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.ModExporter.OnGUI
      commentId: M:Global.ModExporter.OnGUI
      language: CSharp
      name:
        CSharp: OnGUI()
        VB: OnGUI()
      nameWithType:
        CSharp: ModExporter.OnGUI()
        VB: ModExporter.OnGUI()
      qualifiedName:
        CSharp: ModExporter.OnGUI()
        VB: ModExporter.OnGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnGUI
        path: ''
        startLine: 926
      syntax:
        content:
          CSharp: public void OnGUI()
          VB: Public Sub OnGUI
      overload: Global.ModExporter.OnGUI*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ModExporter.BuildSceneBundle
      commentId: M:Global.ModExporter.BuildSceneBundle
      language: CSharp
      name:
        CSharp: BuildSceneBundle()
        VB: BuildSceneBundle()
      nameWithType:
        CSharp: ModExporter.BuildSceneBundle()
        VB: ModExporter.BuildSceneBundle()
      qualifiedName:
        CSharp: ModExporter.BuildSceneBundle()
        VB: ModExporter.BuildSceneBundle()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: BuildSceneBundle
        path: ''
        startLine: 998
      syntax:
        content:
          CSharp: public static void BuildSceneBundle()
          VB: Public Shared Sub BuildSceneBundle
      overload: Global.ModExporter.BuildSceneBundle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.QuaternionToEulerPropertyDrawer
    commentId: T:Global.QuaternionToEulerPropertyDrawer
    language: CSharp
    name:
      CSharp: QuaternionToEulerPropertyDrawer
      VB: QuaternionToEulerPropertyDrawer
    nameWithType:
      CSharp: QuaternionToEulerPropertyDrawer
      VB: QuaternionToEulerPropertyDrawer
    qualifiedName:
      CSharp: QuaternionToEulerPropertyDrawer
      VB: QuaternionToEulerPropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: QuaternionToEulerPropertyDrawer
      path: ''
      startLine: 1060
    syntax:
      content:
        CSharp: 'public class QuaternionToEulerPropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class QuaternionToEulerPropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.QuaternionToEulerPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:Global.QuaternionToEulerPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: QuaternionToEulerPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: QuaternionToEulerPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: QuaternionToEulerPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: QuaternionToEulerPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnGUI
        path: ''
        startLine: 1062
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: Global.Rect
        - id: property
          type: Global.SerializedProperty
        - id: label
          type: Global.GUIContent
      overload: Global.QuaternionToEulerPropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.WorldObjectEditor
    commentId: T:Global.WorldObjectEditor
    language: CSharp
    name:
      CSharp: WorldObjectEditor
      VB: WorldObjectEditor
    nameWithType:
      CSharp: WorldObjectEditor
      VB: WorldObjectEditor
    qualifiedName:
      CSharp: WorldObjectEditor
      VB: WorldObjectEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WorldObjectEditor
      path: ''
      startLine: 1182
    syntax:
      content:
        CSharp: 'public class WorldObjectEditor : Editor'
        VB: >-
          Public Class WorldObjectEditor

              Inherits Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WorldObjectEditor.OnInspectorGUI
      commentId: M:Global.WorldObjectEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: WorldObjectEditor.OnInspectorGUI()
        VB: WorldObjectEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: WorldObjectEditor.OnInspectorGUI()
        VB: WorldObjectEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 1201
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Global.WorldObjectEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.OverrideMaterialTransparency
    commentId: T:Global.OverrideMaterialTransparency
    language: CSharp
    name:
      CSharp: OverrideMaterialTransparency
      VB: OverrideMaterialTransparency
    nameWithType:
      CSharp: OverrideMaterialTransparency
      VB: OverrideMaterialTransparency
    qualifiedName:
      CSharp: OverrideMaterialTransparency
      VB: OverrideMaterialTransparency
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: OverrideMaterialTransparency
      path: ''
      startLine: 3089
    summary: Force set a material to be transparent or opaque.
    example: []
    syntax:
      content:
        CSharp: 'public enum OverrideMaterialTransparency : byte'
        VB: Public Enum OverrideMaterialTransparency As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.OverrideMaterialTransparency.NotOverride
      commentId: F:Global.OverrideMaterialTransparency.NotOverride
      language: CSharp
      name:
        CSharp: NotOverride
        VB: NotOverride
      nameWithType:
        CSharp: OverrideMaterialTransparency.NotOverride
        VB: OverrideMaterialTransparency.NotOverride
      qualifiedName:
        CSharp: OverrideMaterialTransparency.NotOverride
        VB: OverrideMaterialTransparency.NotOverride
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NotOverride
        path: ''
        startLine: 3091
      syntax:
        content:
          CSharp: NotOverride = 0
          VB: NotOverride = 0
        return:
          type: Global.OverrideMaterialTransparency
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OverrideMaterialTransparency.ForceTransparent
      commentId: F:Global.OverrideMaterialTransparency.ForceTransparent
      language: CSharp
      name:
        CSharp: ForceTransparent
        VB: ForceTransparent
      nameWithType:
        CSharp: OverrideMaterialTransparency.ForceTransparent
        VB: OverrideMaterialTransparency.ForceTransparent
      qualifiedName:
        CSharp: OverrideMaterialTransparency.ForceTransparent
        VB: OverrideMaterialTransparency.ForceTransparent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ForceTransparent
        path: ''
        startLine: 3092
      syntax:
        content:
          CSharp: ForceTransparent = 1
          VB: ForceTransparent = 1
        return:
          type: Global.OverrideMaterialTransparency
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OverrideMaterialTransparency.ForceOpaque
      commentId: F:Global.OverrideMaterialTransparency.ForceOpaque
      language: CSharp
      name:
        CSharp: ForceOpaque
        VB: ForceOpaque
      nameWithType:
        CSharp: OverrideMaterialTransparency.ForceOpaque
        VB: OverrideMaterialTransparency.ForceOpaque
      qualifiedName:
        CSharp: OverrideMaterialTransparency.ForceOpaque
        VB: OverrideMaterialTransparency.ForceOpaque
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ForceOpaque
        path: ''
        startLine: 3093
      syntax:
        content:
          CSharp: ForceOpaque = 2
          VB: ForceOpaque = 2
        return:
          type: Global.OverrideMaterialTransparency
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.Block
    commentId: T:Global.Block
    language: CSharp
    name:
      CSharp: Block
      VB: Block
    nameWithType:
      CSharp: Block
      VB: Block
    qualifiedName:
      CSharp: Block
      VB: Block
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Block
      path: ''
      startLine: 3096
    syntax:
      content:
        CSharp: public class Block
        VB: Public Class Block
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.Block.InvalidId
      commentId: F:Global.Block.InvalidId
      language: CSharp
      name:
        CSharp: InvalidId
        VB: InvalidId
      nameWithType:
        CSharp: Block.InvalidId
        VB: Block.InvalidId
      qualifiedName:
        CSharp: Block.InvalidId
        VB: Block.InvalidId
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: InvalidId
        path: ''
        startLine: 3099
      syntax:
        content:
          CSharp: public const ushort InvalidId = 65535
          VB: Public Const InvalidId As UShort = 65535
        return:
          type: System.UInt16
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.Block.Name
      commentId: F:Global.Block.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: Block.Name
        VB: Block.Name
      qualifiedName:
        CSharp: Block.Name
        VB: Block.Name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Name
        path: ''
        startLine: 3101
      syntax:
        content:
          CSharp: public string Name
          VB: Public Name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Builder
      commentId: F:Global.Block.Builder
      language: CSharp
      name:
        CSharp: Builder
        VB: Builder
      nameWithType:
        CSharp: Block.Builder
        VB: Block.Builder
      qualifiedName:
        CSharp: Block.Builder
        VB: Block.Builder
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Builder
        path: ''
        startLine: 3102
      syntax:
        content:
          CSharp: public BlockBuilder Builder
          VB: Public Builder As BlockBuilder
        return:
          type: Global.BlockBuilder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Material
      commentId: F:Global.Block.Material
      language: CSharp
      name:
        CSharp: Material
        VB: Material
      nameWithType:
        CSharp: Block.Material
        VB: Block.Material
      qualifiedName:
        CSharp: Block.Material
        VB: Block.Material
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Material
        path: ''
        startLine: 3103
      syntax:
        content:
          CSharp: public Material Material
          VB: Public Material As Material
        return:
          type: Global.Material
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.OverrideMainMaterialTransparency
      commentId: F:Global.Block.OverrideMainMaterialTransparency
      language: CSharp
      name:
        CSharp: OverrideMainMaterialTransparency
        VB: OverrideMainMaterialTransparency
      nameWithType:
        CSharp: Block.OverrideMainMaterialTransparency
        VB: Block.OverrideMainMaterialTransparency
      qualifiedName:
        CSharp: Block.OverrideMainMaterialTransparency
        VB: Block.OverrideMainMaterialTransparency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverrideMainMaterialTransparency
        path: ''
        startLine: 3108
      summary: "\nForce set this.<xref href=\"Block.Material\" data-throw-if-not-resolved=\"false\"></xref> to be transparent. Check comment in\n<xref href=\"Block.IsMaterialTransparent\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n"
      example: []
      syntax:
        content:
          CSharp: public OverrideMaterialTransparency OverrideMainMaterialTransparency
          VB: Public OverrideMainMaterialTransparency As OverrideMaterialTransparency
        return:
          type: Global.OverrideMaterialTransparency
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Block.Material: 
        Block.IsMaterialTransparent: 
    - id: Global.Block.Materials
      commentId: F:Global.Block.Materials
      language: CSharp
      name:
        CSharp: Materials
        VB: Materials
      nameWithType:
        CSharp: Block.Materials
        VB: Block.Materials
      qualifiedName:
        CSharp: Block.Materials
        VB: Block.Materials
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Materials
        path: ''
        startLine: 3109
      syntax:
        content:
          CSharp: public Material[] Materials
          VB: Public Materials As Material()
        return:
          type: Global.Material[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.OverrideSubMaterialsTransparency
      commentId: F:Global.Block.OverrideSubMaterialsTransparency
      language: CSharp
      name:
        CSharp: OverrideSubMaterialsTransparency
        VB: OverrideSubMaterialsTransparency
      nameWithType:
        CSharp: Block.OverrideSubMaterialsTransparency
        VB: Block.OverrideSubMaterialsTransparency
      qualifiedName:
        CSharp: Block.OverrideSubMaterialsTransparency
        VB: Block.OverrideSubMaterialsTransparency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OverrideSubMaterialsTransparency
        path: ''
        startLine: 3114
      summary: "\nSimilar to this.<xref href=\"Block.OverrideMainMaterialTransparency\" data-throw-if-not-resolved=\"false\"></xref> but each of this\ncorresponding to an item in this.<xref href=\"Block.Materials\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public OverrideMaterialTransparency[] OverrideSubMaterialsTransparency
          VB: Public OverrideSubMaterialsTransparency As OverrideMaterialTransparency()
        return:
          type: Global.OverrideMaterialTransparency[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Block.OverrideMainMaterialTransparency: 
        Block.Materials: 
    - id: Global.Block.MinimapColor
      commentId: F:Global.Block.MinimapColor
      language: CSharp
      name:
        CSharp: MinimapColor
        VB: MinimapColor
      nameWithType:
        CSharp: Block.MinimapColor
        VB: Block.MinimapColor
      qualifiedName:
        CSharp: Block.MinimapColor
        VB: Block.MinimapColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MinimapColor
        path: ''
        startLine: 3116
      syntax:
        content:
          CSharp: public Color MinimapColor
          VB: Public MinimapColor As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsDiggable
      commentId: F:Global.Block.IsDiggable
      language: CSharp
      name:
        CSharp: IsDiggable
        VB: IsDiggable
      nameWithType:
        CSharp: Block.IsDiggable
        VB: Block.IsDiggable
      qualifiedName:
        CSharp: Block.IsDiggable
        VB: Block.IsDiggable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsDiggable
        path: ''
        startLine: 3117
      syntax:
        content:
          CSharp: public bool IsDiggable
          VB: Public IsDiggable As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsWater
      commentId: F:Global.Block.IsWater
      language: CSharp
      name:
        CSharp: IsWater
        VB: IsWater
      nameWithType:
        CSharp: Block.IsWater
        VB: Block.IsWater
      qualifiedName:
        CSharp: Block.IsWater
        VB: Block.IsWater
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsWater
        path: ''
        startLine: 3118
      syntax:
        content:
          CSharp: public bool IsWater
          VB: Public IsWater As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Solid
      commentId: F:Global.Block.Solid
      language: CSharp
      name:
        CSharp: Solid
        VB: Solid
      nameWithType:
        CSharp: Block.Solid
        VB: Block.Solid
      qualifiedName:
        CSharp: Block.Solid
        VB: Block.Solid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Solid
        path: ''
        startLine: 3119
      syntax:
        content:
          CSharp: public bool Solid
          VB: Public Solid As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.WaterOccupancy
      commentId: F:Global.Block.WaterOccupancy
      language: CSharp
      name:
        CSharp: WaterOccupancy
        VB: WaterOccupancy
      nameWithType:
        CSharp: Block.WaterOccupancy
        VB: Block.WaterOccupancy
      qualifiedName:
        CSharp: Block.WaterOccupancy
        VB: Block.WaterOccupancy
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: WaterOccupancy
        path: ''
        startLine: 3120
      syntax:
        content:
          CSharp: public bool WaterOccupancy
          VB: Public WaterOccupancy As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.BuildCollider
      commentId: F:Global.Block.BuildCollider
      language: CSharp
      name:
        CSharp: BuildCollider
        VB: BuildCollider
      nameWithType:
        CSharp: Block.BuildCollider
        VB: Block.BuildCollider
      qualifiedName:
        CSharp: Block.BuildCollider
        VB: Block.BuildCollider
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: BuildCollider
        path: ''
        startLine: 3121
      syntax:
        content:
          CSharp: public bool BuildCollider
          VB: Public BuildCollider As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Rendered
      commentId: F:Global.Block.Rendered
      language: CSharp
      name:
        CSharp: Rendered
        VB: Rendered
      nameWithType:
        CSharp: Block.Rendered
        VB: Block.Rendered
      qualifiedName:
        CSharp: Block.Rendered
        VB: Block.Rendered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Rendered
        path: ''
        startLine: 3122
      syntax:
        content:
          CSharp: public bool Rendered
          VB: Public Rendered As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.ShadowCastingMode
      commentId: F:Global.Block.ShadowCastingMode
      language: CSharp
      name:
        CSharp: ShadowCastingMode
        VB: ShadowCastingMode
      nameWithType:
        CSharp: Block.ShadowCastingMode
        VB: Block.ShadowCastingMode
      qualifiedName:
        CSharp: Block.ShadowCastingMode
        VB: Block.ShadowCastingMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShadowCastingMode
        path: ''
        startLine: 3123
      syntax:
        content:
          CSharp: public UnityEngine.Rendering.ShadowCastingMode ShadowCastingMode
          VB: Public ShadowCastingMode As UnityEngine.Rendering.ShadowCastingMode
        return:
          type: Global.UnityEngine.Rendering.ShadowCastingMode
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Layer
      commentId: F:Global.Block.Layer
      language: CSharp
      name:
        CSharp: Layer
        VB: Layer
      nameWithType:
        CSharp: Block.Layer
        VB: Block.Layer
      qualifiedName:
        CSharp: Block.Layer
        VB: Block.Layer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Layer
        path: ''
        startLine: 3124
      syntax:
        content:
          CSharp: public string Layer
          VB: Public Layer As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Category
      commentId: F:Global.Block.Category
      language: CSharp
      name:
        CSharp: Category
        VB: Category
      nameWithType:
        CSharp: Block.Category
        VB: Block.Category
      qualifiedName:
        CSharp: Block.Category
        VB: Block.Category
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Category
        path: ''
        startLine: 3125
      syntax:
        content:
          CSharp: public string Category
          VB: Public Category As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Tier
      commentId: F:Global.Block.Tier
      language: CSharp
      name:
        CSharp: Tier
        VB: Tier
      nameWithType:
        CSharp: Block.Tier
        VB: Block.Tier
      qualifiedName:
        CSharp: Block.Tier
        VB: Block.Tier
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Tier
        path: ''
        startLine: 3126
      syntax:
        content:
          CSharp: public int Tier
          VB: Public Tier As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.BlendingPriority
      commentId: F:Global.Block.BlendingPriority
      language: CSharp
      name:
        CSharp: BlendingPriority
        VB: BlendingPriority
      nameWithType:
        CSharp: Block.BlendingPriority
        VB: Block.BlendingPriority
      qualifiedName:
        CSharp: Block.BlendingPriority
        VB: Block.BlendingPriority
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: BlendingPriority
        path: ''
        startLine: 3128
      syntax:
        content:
          CSharp: public int BlendingPriority
          VB: Public BlendingPriority As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.categoryID
      commentId: F:Global.Block.categoryID
      language: CSharp
      name:
        CSharp: categoryID
        VB: categoryID
      nameWithType:
        CSharp: Block.categoryID
        VB: Block.categoryID
      qualifiedName:
        CSharp: Block.categoryID
        VB: Block.categoryID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: categoryID
        path: ''
        startLine: 3131
      syntax:
        content:
          CSharp: public int categoryID
          VB: Public categoryID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.nameID
      commentId: F:Global.Block.nameID
      language: CSharp
      name:
        CSharp: nameID
        VB: nameID
      nameWithType:
        CSharp: Block.nameID
        VB: Block.nameID
      qualifiedName:
        CSharp: Block.nameID
        VB: Block.nameID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nameID
        path: ''
        startLine: 3132
      syntax:
        content:
          CSharp: public ushort nameID
          VB: Public nameID As UShort
        return:
          type: System.UInt16
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.GenerateMeshCollider
      commentId: F:Global.Block.GenerateMeshCollider
      language: CSharp
      name:
        CSharp: GenerateMeshCollider
        VB: GenerateMeshCollider
      nameWithType:
        CSharp: Block.GenerateMeshCollider
        VB: Block.GenerateMeshCollider
      qualifiedName:
        CSharp: Block.GenerateMeshCollider
        VB: Block.GenerateMeshCollider
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GenerateMeshCollider
        path: ''
        startLine: 3134
      syntax:
        content:
          CSharp: public bool GenerateMeshCollider
          VB: Public GenerateMeshCollider As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsEmpty
      commentId: F:Global.Block.IsEmpty
      language: CSharp
      name:
        CSharp: IsEmpty
        VB: IsEmpty
      nameWithType:
        CSharp: Block.IsEmpty
        VB: Block.IsEmpty
      qualifiedName:
        CSharp: Block.IsEmpty
        VB: Block.IsEmpty
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsEmpty
        path: ''
        startLine: 3136
      syntax:
        content:
          CSharp: public bool IsEmpty
          VB: Public IsEmpty As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.PrefabHeightOffset
      commentId: F:Global.Block.PrefabHeightOffset
      language: CSharp
      name:
        CSharp: PrefabHeightOffset
        VB: PrefabHeightOffset
      nameWithType:
        CSharp: Block.PrefabHeightOffset
        VB: Block.PrefabHeightOffset
      qualifiedName:
        CSharp: Block.PrefabHeightOffset
        VB: Block.PrefabHeightOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PrefabHeightOffset
        path: ''
        startLine: 3137
      syntax:
        content:
          CSharp: public float PrefabHeightOffset
          VB: Public PrefabHeightOffset As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.ActualHeight
      commentId: F:Global.Block.ActualHeight
      language: CSharp
      name:
        CSharp: ActualHeight
        VB: ActualHeight
      nameWithType:
        CSharp: Block.ActualHeight
        VB: Block.ActualHeight
      qualifiedName:
        CSharp: Block.ActualHeight
        VB: Block.ActualHeight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ActualHeight
        path: ''
        startLine: 3138
      syntax:
        content:
          CSharp: public float ActualHeight
          VB: Public ActualHeight As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.AudioCategory
      commentId: F:Global.Block.AudioCategory
      language: CSharp
      name:
        CSharp: AudioCategory
        VB: AudioCategory
      nameWithType:
        CSharp: Block.AudioCategory
        VB: Block.AudioCategory
      qualifiedName:
        CSharp: Block.AudioCategory
        VB: Block.AudioCategory
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AudioCategory
        path: ''
        startLine: 3140
      syntax:
        content:
          CSharp: public string AudioCategory
          VB: Public AudioCategory As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.MusicCategory
      commentId: F:Global.Block.MusicCategory
      language: CSharp
      name:
        CSharp: MusicCategory
        VB: MusicCategory
      nameWithType:
        CSharp: Block.MusicCategory
        VB: Block.MusicCategory
      qualifiedName:
        CSharp: Block.MusicCategory
        VB: Block.MusicCategory
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MusicCategory
        path: ''
        startLine: 3142
      syntax:
        content:
          CSharp: public string MusicCategory
          VB: Public MusicCategory As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Effects
      commentId: F:Global.Block.Effects
      language: CSharp
      name:
        CSharp: Effects
        VB: Effects
      nameWithType:
        CSharp: Block.Effects
        VB: Block.Effects
      qualifiedName:
        CSharp: Block.Effects
        VB: Block.Effects
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Effects
        path: ''
        startLine: 3144
      syntax:
        content:
          CSharp: public GameObject[] Effects
          VB: Public Effects As GameObject()
        return:
          type: Global.GameObject[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.EffectNames
      commentId: F:Global.Block.EffectNames
      language: CSharp
      name:
        CSharp: EffectNames
        VB: EffectNames
      nameWithType:
        CSharp: Block.EffectNames
        VB: Block.EffectNames
      qualifiedName:
        CSharp: Block.EffectNames
        VB: Block.EffectNames
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EffectNames
        path: ''
        startLine: 3145
      syntax:
        content:
          CSharp: public string[] EffectNames
          VB: Public EffectNames As String()
        return:
          type: System.String[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.MaterialInfo
      commentId: F:Global.Block.MaterialInfo
      language: CSharp
      name:
        CSharp: MaterialInfo
        VB: MaterialInfo
      nameWithType:
        CSharp: Block.MaterialInfo
        VB: Block.MaterialInfo
      qualifiedName:
        CSharp: Block.MaterialInfo
        VB: Block.MaterialInfo
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MaterialInfo
        path: ''
        startLine: 3147
      syntax:
        content:
          CSharp: public MaterialInfo MaterialInfo
          VB: Public MaterialInfo As MaterialInfo
        return:
          type: Global.MaterialInfo
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.MaterialInfos
      commentId: F:Global.Block.MaterialInfos
      language: CSharp
      name:
        CSharp: MaterialInfos
        VB: MaterialInfos
      nameWithType:
        CSharp: Block.MaterialInfos
        VB: Block.MaterialInfos
      qualifiedName:
        CSharp: Block.MaterialInfos
        VB: Block.MaterialInfos
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MaterialInfos
        path: ''
        startLine: 3148
      syntax:
        content:
          CSharp: public MaterialInfo[] MaterialInfos
          VB: Public MaterialInfos As MaterialInfo()
        return:
          type: Global.MaterialInfo[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Interactable
      commentId: F:Global.Block.Interactable
      language: CSharp
      name:
        CSharp: Interactable
        VB: Interactable
      nameWithType:
        CSharp: Block.Interactable
        VB: Block.Interactable
      qualifiedName:
        CSharp: Block.Interactable
        VB: Block.Interactable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Interactable
        path: ''
        startLine: 3149
      syntax:
        content:
          CSharp: public bool Interactable
          VB: Public Interactable As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.SticksToWalls
      commentId: F:Global.Block.SticksToWalls
      language: CSharp
      name:
        CSharp: SticksToWalls
        VB: SticksToWalls
      nameWithType:
        CSharp: Block.SticksToWalls
        VB: Block.SticksToWalls
      qualifiedName:
        CSharp: Block.SticksToWalls
        VB: Block.SticksToWalls
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SticksToWalls
        path: ''
        startLine: 3150
      syntax:
        content:
          CSharp: public bool SticksToWalls
          VB: Public SticksToWalls As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.MoveEfficiency
      commentId: F:Global.Block.MoveEfficiency
      language: CSharp
      name:
        CSharp: MoveEfficiency
        VB: MoveEfficiency
      nameWithType:
        CSharp: Block.MoveEfficiency
        VB: Block.MoveEfficiency
      qualifiedName:
        CSharp: Block.MoveEfficiency
        VB: Block.MoveEfficiency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: MoveEfficiency
        path: ''
        startLine: 3151
      syntax:
        content:
          CSharp: public float MoveEfficiency
          VB: Public MoveEfficiency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.Hardness
      commentId: F:Global.Block.Hardness
      language: CSharp
      name:
        CSharp: Hardness
        VB: Hardness
      nameWithType:
        CSharp: Block.Hardness
        VB: Block.Hardness
      qualifiedName:
        CSharp: Block.Hardness
        VB: Block.Hardness
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Hardness
        path: ''
        startLine: 3152
      syntax:
        content:
          CSharp: public int Hardness
          VB: Public Hardness As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsPlant
      commentId: F:Global.Block.IsPlant
      language: CSharp
      name:
        CSharp: IsPlant
        VB: IsPlant
      nameWithType:
        CSharp: Block.IsPlant
        VB: Block.IsPlant
      qualifiedName:
        CSharp: Block.IsPlant
        VB: Block.IsPlant
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPlant
        path: ''
        startLine: 3153
      syntax:
        content:
          CSharp: public bool IsPlant
          VB: Public IsPlant As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.rotation
      commentId: F:Global.Block.rotation
      language: CSharp
      name:
        CSharp: rotation
        VB: rotation
      nameWithType:
        CSharp: Block.rotation
        VB: Block.rotation
      qualifiedName:
        CSharp: Block.rotation
        VB: Block.rotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rotation
        path: ''
        startLine: 3154
      syntax:
        content:
          CSharp: public int rotation
          VB: Public rotation As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.LookAtTooltip
      commentId: F:Global.Block.LookAtTooltip
      language: CSharp
      name:
        CSharp: LookAtTooltip
        VB: LookAtTooltip
      nameWithType:
        CSharp: Block.LookAtTooltip
        VB: Block.LookAtTooltip
      qualifiedName:
        CSharp: Block.LookAtTooltip
        VB: Block.LookAtTooltip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LookAtTooltip
        path: ''
        startLine: 3155
      syntax:
        content:
          CSharp: public LocString LookAtTooltip
          VB: Public LookAtTooltip As LocString
        return:
          type: Global.LocString
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsMaterialTransparent
      commentId: F:Global.Block.IsMaterialTransparent
      language: CSharp
      name:
        CSharp: IsMaterialTransparent
        VB: IsMaterialTransparent
      nameWithType:
        CSharp: Block.IsMaterialTransparent
        VB: Block.IsMaterialTransparent
      qualifiedName:
        CSharp: Block.IsMaterialTransparent
        VB: Block.IsMaterialTransparent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsMaterialTransparent
        path: ''
        startLine: 3160
      syntax:
        content:
          CSharp: public List<bool> IsMaterialTransparent
          VB: Public IsMaterialTransparent As List(Of Boolean)
        return:
          type: Global.List{System.Boolean}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsLadder
      commentId: F:Global.Block.IsLadder
      language: CSharp
      name:
        CSharp: IsLadder
        VB: IsLadder
      nameWithType:
        CSharp: Block.IsLadder
        VB: Block.IsLadder
      qualifiedName:
        CSharp: Block.IsLadder
        VB: Block.IsLadder
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsLadder
        path: ''
        startLine: 3162
      syntax:
        content:
          CSharp: public bool IsLadder
          VB: Public IsLadder As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.IsSlope
      commentId: F:Global.Block.IsSlope
      language: CSharp
      name:
        CSharp: IsSlope
        VB: IsSlope
      nameWithType:
        CSharp: Block.IsSlope
        VB: Block.IsSlope
      qualifiedName:
        CSharp: Block.IsSlope
        VB: Block.IsSlope
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsSlope
        path: ''
        startLine: 3163
      syntax:
        content:
          CSharp: public bool IsSlope
          VB: Public IsSlope As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.Block.CanBuild
      commentId: P:Global.Block.CanBuild
      language: CSharp
      name:
        CSharp: CanBuild
        VB: CanBuild
      nameWithType:
        CSharp: Block.CanBuild
        VB: Block.CanBuild
      qualifiedName:
        CSharp: Block.CanBuild
        VB: Block.CanBuild
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CanBuild
        path: ''
        startLine: 3166
      summary: 'True if the block is empty, water, or a non-tree plant. '
      example: []
      syntax:
        content:
          CSharp: public bool CanBuild { get; }
          VB: Public ReadOnly Property CanBuild As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Global.Block.CanBuild*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Global.BlockSet
    commentId: T:Global.BlockSet
    language: CSharp
    name:
      CSharp: BlockSet
      VB: BlockSet
    nameWithType:
      CSharp: BlockSet
      VB: BlockSet
    qualifiedName:
      CSharp: BlockSet
      VB: BlockSet
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockSet
      path: ''
      startLine: 3178
    syntax:
      content:
        CSharp: 'public class BlockSet : ScriptableObject'
        VB: >-
          Public Class BlockSet

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.BlockSet.Blocks
      commentId: F:Global.BlockSet.Blocks
      language: CSharp
      name:
        CSharp: Blocks
        VB: Blocks
      nameWithType:
        CSharp: BlockSet.Blocks
        VB: BlockSet.Blocks
      qualifiedName:
        CSharp: BlockSet.Blocks
        VB: BlockSet.Blocks
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Blocks
        path: ''
        startLine: 3182
      syntax:
        content:
          CSharp: public List<Block> Blocks
          VB: Public Blocks As List(Of Block)
        return:
          type: Global.List{Block}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.BlockSetContainer
    commentId: T:Global.BlockSetContainer
    language: CSharp
    name:
      CSharp: BlockSetContainer
      VB: BlockSetContainer
    nameWithType:
      CSharp: BlockSetContainer
      VB: BlockSetContainer
    qualifiedName:
      CSharp: BlockSetContainer
      VB: BlockSetContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockSetContainer
      path: ''
      startLine: 3190
    syntax:
      content:
        CSharp: 'public class BlockSetContainer : MonoBehaviour'
        VB: >-
          Public Class BlockSetContainer

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.BlockSetContainer.blockSets
      commentId: F:Global.BlockSetContainer.blockSets
      language: CSharp
      name:
        CSharp: blockSets
        VB: blockSets
      nameWithType:
        CSharp: BlockSetContainer.blockSets
        VB: BlockSetContainer.blockSets
      qualifiedName:
        CSharp: BlockSetContainer.blockSets
        VB: BlockSetContainer.blockSets
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: blockSets
        path: ''
        startLine: 3192
      syntax:
        content:
          CSharp: public BlockSet[] blockSets
          VB: Public blockSets As BlockSet()
        return:
          type: Global.BlockSet[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.BlockRule
    commentId: T:Global.BlockRule
    language: CSharp
    name:
      CSharp: BlockRule
      VB: BlockRule
    nameWithType:
      CSharp: BlockRule
      VB: BlockRule
    qualifiedName:
      CSharp: BlockRule
      VB: BlockRule
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockRule
      path: ''
      startLine: 3202
    syntax:
      content:
        CSharp: public class BlockRule
        VB: Public Class BlockRule
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.BlockRule.ruleType
      commentId: F:Global.BlockRule.ruleType
      language: CSharp
      name:
        CSharp: ruleType
        VB: ruleType
      nameWithType:
        CSharp: BlockRule.ruleType
        VB: BlockRule.ruleType
      qualifiedName:
        CSharp: BlockRule.ruleType
        VB: BlockRule.ruleType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ruleType
        path: ''
        startLine: 3219
      syntax:
        content:
          CSharp: public BlockRule.RuleType ruleType
          VB: Public ruleType As BlockRule.RuleType
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlockRule.ruleString
      commentId: F:Global.BlockRule.ruleString
      language: CSharp
      name:
        CSharp: ruleString
        VB: ruleString
      nameWithType:
        CSharp: BlockRule.ruleString
        VB: BlockRule.ruleString
      qualifiedName:
        CSharp: BlockRule.ruleString
        VB: BlockRule.ruleString
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ruleString
        path: ''
        startLine: 3220
      syntax:
        content:
          CSharp: public string ruleString
          VB: Public ruleString As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlockRule.ruleID
      commentId: F:Global.BlockRule.ruleID
      language: CSharp
      name:
        CSharp: ruleID
        VB: ruleID
      nameWithType:
        CSharp: BlockRule.ruleID
        VB: BlockRule.ruleID
      qualifiedName:
        CSharp: BlockRule.ruleID
        VB: BlockRule.ruleID
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ruleID
        path: ''
        startLine: 3221
      syntax:
        content:
          CSharp: public int ruleID
          VB: Public ruleID As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlockRule.ToString
      commentId: M:Global.BlockRule.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: BlockRule.ToString()
        VB: BlockRule.ToString()
      qualifiedName:
        CSharp: BlockRule.ToString()
        VB: BlockRule.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3223
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Global.BlockRule.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.BlockRule.RuleType
    commentId: T:Global.BlockRule.RuleType
    language: CSharp
    name:
      CSharp: BlockRule.RuleType
      VB: BlockRule.RuleType
    nameWithType:
      CSharp: BlockRule.RuleType
      VB: BlockRule.RuleType
    qualifiedName:
      CSharp: BlockRule.RuleType
      VB: BlockRule.RuleType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RuleType
      path: ''
      startLine: 3205
    syntax:
      content:
        CSharp: public enum RuleType
        VB: Public Enum RuleType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.BlockRule.RuleType.EqualsType
      commentId: F:Global.BlockRule.RuleType.EqualsType
      language: CSharp
      name:
        CSharp: EqualsType
        VB: EqualsType
      nameWithType:
        CSharp: BlockRule.RuleType.EqualsType
        VB: BlockRule.RuleType.EqualsType
      qualifiedName:
        CSharp: BlockRule.RuleType.EqualsType
        VB: BlockRule.RuleType.EqualsType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EqualsType
        path: ''
        startLine: 3207
      syntax:
        content:
          CSharp: EqualsType = 0
          VB: EqualsType = 0
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.NotEqualsType
      commentId: F:Global.BlockRule.RuleType.NotEqualsType
      language: CSharp
      name:
        CSharp: NotEqualsType
        VB: NotEqualsType
      nameWithType:
        CSharp: BlockRule.RuleType.NotEqualsType
        VB: BlockRule.RuleType.NotEqualsType
      qualifiedName:
        CSharp: BlockRule.RuleType.NotEqualsType
        VB: BlockRule.RuleType.NotEqualsType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NotEqualsType
        path: ''
        startLine: 3208
      syntax:
        content:
          CSharp: NotEqualsType = 1
          VB: NotEqualsType = 1
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.NotSolidType
      commentId: F:Global.BlockRule.RuleType.NotSolidType
      language: CSharp
      name:
        CSharp: NotSolidType
        VB: NotSolidType
      nameWithType:
        CSharp: BlockRule.RuleType.NotSolidType
        VB: BlockRule.RuleType.NotSolidType
      qualifiedName:
        CSharp: BlockRule.RuleType.NotSolidType
        VB: BlockRule.RuleType.NotSolidType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NotSolidType
        path: ''
        startLine: 3209
      syntax:
        content:
          CSharp: NotSolidType = 2
          VB: NotSolidType = 2
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.IsSolidType
      commentId: F:Global.BlockRule.RuleType.IsSolidType
      language: CSharp
      name:
        CSharp: IsSolidType
        VB: IsSolidType
      nameWithType:
        CSharp: BlockRule.RuleType.IsSolidType
        VB: BlockRule.RuleType.IsSolidType
      qualifiedName:
        CSharp: BlockRule.RuleType.IsSolidType
        VB: BlockRule.RuleType.IsSolidType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsSolidType
        path: ''
        startLine: 3210
      syntax:
        content:
          CSharp: IsSolidType = 3
          VB: IsSolidType = 3
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.EqualsCategory
      commentId: F:Global.BlockRule.RuleType.EqualsCategory
      language: CSharp
      name:
        CSharp: EqualsCategory
        VB: EqualsCategory
      nameWithType:
        CSharp: BlockRule.RuleType.EqualsCategory
        VB: BlockRule.RuleType.EqualsCategory
      qualifiedName:
        CSharp: BlockRule.RuleType.EqualsCategory
        VB: BlockRule.RuleType.EqualsCategory
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EqualsCategory
        path: ''
        startLine: 3211
      syntax:
        content:
          CSharp: EqualsCategory = 4
          VB: EqualsCategory = 4
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.NotEqualsCategory
      commentId: F:Global.BlockRule.RuleType.NotEqualsCategory
      language: CSharp
      name:
        CSharp: NotEqualsCategory
        VB: NotEqualsCategory
      nameWithType:
        CSharp: BlockRule.RuleType.NotEqualsCategory
        VB: BlockRule.RuleType.NotEqualsCategory
      qualifiedName:
        CSharp: BlockRule.RuleType.NotEqualsCategory
        VB: BlockRule.RuleType.NotEqualsCategory
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NotEqualsCategory
        path: ''
        startLine: 3212
      syntax:
        content:
          CSharp: NotEqualsCategory = 5
          VB: NotEqualsCategory = 5
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.EqualsThisType
      commentId: F:Global.BlockRule.RuleType.EqualsThisType
      language: CSharp
      name:
        CSharp: EqualsThisType
        VB: EqualsThisType
      nameWithType:
        CSharp: BlockRule.RuleType.EqualsThisType
        VB: BlockRule.RuleType.EqualsThisType
      qualifiedName:
        CSharp: BlockRule.RuleType.EqualsThisType
        VB: BlockRule.RuleType.EqualsThisType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EqualsThisType
        path: ''
        startLine: 3213
      syntax:
        content:
          CSharp: EqualsThisType = 6
          VB: EqualsThisType = 6
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.NotEqualsThisType
      commentId: F:Global.BlockRule.RuleType.NotEqualsThisType
      language: CSharp
      name:
        CSharp: NotEqualsThisType
        VB: NotEqualsThisType
      nameWithType:
        CSharp: BlockRule.RuleType.NotEqualsThisType
        VB: BlockRule.RuleType.NotEqualsThisType
      qualifiedName:
        CSharp: BlockRule.RuleType.NotEqualsThisType
        VB: BlockRule.RuleType.NotEqualsThisType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: NotEqualsThisType
        path: ''
        startLine: 3214
      syntax:
        content:
          CSharp: NotEqualsThisType = 7
          VB: NotEqualsThisType = 7
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.SameOrHigherPriority
      commentId: F:Global.BlockRule.RuleType.SameOrHigherPriority
      language: CSharp
      name:
        CSharp: SameOrHigherPriority
        VB: SameOrHigherPriority
      nameWithType:
        CSharp: BlockRule.RuleType.SameOrHigherPriority
        VB: BlockRule.RuleType.SameOrHigherPriority
      qualifiedName:
        CSharp: BlockRule.RuleType.SameOrHigherPriority
        VB: BlockRule.RuleType.SameOrHigherPriority
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SameOrHigherPriority
        path: ''
        startLine: 3215
      syntax:
        content:
          CSharp: SameOrHigherPriority = 8
          VB: SameOrHigherPriority = 8
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.BlockRule.RuleType.LowerPriorirty
      commentId: F:Global.BlockRule.RuleType.LowerPriorirty
      language: CSharp
      name:
        CSharp: LowerPriorirty
        VB: LowerPriorirty
      nameWithType:
        CSharp: BlockRule.RuleType.LowerPriorirty
        VB: BlockRule.RuleType.LowerPriorirty
      qualifiedName:
        CSharp: BlockRule.RuleType.LowerPriorirty
        VB: BlockRule.RuleType.LowerPriorirty
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LowerPriorirty
        path: ''
        startLine: 3216
      syntax:
        content:
          CSharp: LowerPriorirty = 9
          VB: LowerPriorirty = 9
        return:
          type: Global.BlockRule.RuleType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.OffsetCondition
    commentId: T:Global.OffsetCondition
    language: CSharp
    name:
      CSharp: OffsetCondition
      VB: OffsetCondition
    nameWithType:
      CSharp: OffsetCondition
      VB: OffsetCondition
    qualifiedName:
      CSharp: OffsetCondition
      VB: OffsetCondition
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: OffsetCondition
      path: ''
      startLine: 3251
    syntax:
      content:
        CSharp: public class OffsetCondition
        VB: Public Class OffsetCondition
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.OffsetCondition.offsetType
      commentId: F:Global.OffsetCondition.offsetType
      language: CSharp
      name:
        CSharp: offsetType
        VB: offsetType
      nameWithType:
        CSharp: OffsetCondition.offsetType
        VB: OffsetCondition.offsetType
      qualifiedName:
        CSharp: OffsetCondition.offsetType
        VB: OffsetCondition.offsetType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: offsetType
        path: ''
        startLine: 3254
      syntax:
        content:
          CSharp: public OffsetCondition.Offset offsetType
          VB: Public offsetType As OffsetCondition.Offset
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.OffsetCondition.rules
      commentId: F:Global.OffsetCondition.rules
      language: CSharp
      name:
        CSharp: rules
        VB: rules
      nameWithType:
        CSharp: OffsetCondition.rules
        VB: OffsetCondition.rules
      qualifiedName:
        CSharp: OffsetCondition.rules
        VB: OffsetCondition.rules
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: rules
        path: ''
        startLine: 3255
      syntax:
        content:
          CSharp: public List<BlockRule> rules
          VB: Public rules As List(Of BlockRule)
        return:
          type: Global.List{BlockRule}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.OffsetCondition.OffsetMapping
      commentId: F:Global.OffsetCondition.OffsetMapping
      language: CSharp
      name:
        CSharp: OffsetMapping
        VB: OffsetMapping
      nameWithType:
        CSharp: OffsetCondition.OffsetMapping
        VB: OffsetCondition.OffsetMapping
      qualifiedName:
        CSharp: OffsetCondition.OffsetMapping
        VB: OffsetCondition.OffsetMapping
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OffsetMapping
        path: ''
        startLine: 3295
      syntax:
        content:
          CSharp: public static Vector3[] OffsetMapping
          VB: Public Shared OffsetMapping As Vector3()
        return:
          type: Global.Vector3[]
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.OffsetCondition.IndexMapping
      commentId: F:Global.OffsetCondition.IndexMapping
      language: CSharp
      name:
        CSharp: IndexMapping
        VB: IndexMapping
      nameWithType:
        CSharp: OffsetCondition.IndexMapping
        VB: OffsetCondition.IndexMapping
      qualifiedName:
        CSharp: OffsetCondition.IndexMapping
        VB: OffsetCondition.IndexMapping
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IndexMapping
        path: ''
        startLine: 3331
      syntax:
        content:
          CSharp: public static int[] IndexMapping
          VB: Public Shared IndexMapping As Integer()
        return:
          type: System.Int32[]
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.OffsetCondition.GetFromVector(Vector3)
      commentId: M:Global.OffsetCondition.GetFromVector(Vector3)
      language: CSharp
      name:
        CSharp: GetFromVector(Vector3)
        VB: GetFromVector(Vector3)
      nameWithType:
        CSharp: OffsetCondition.GetFromVector(Vector3)
        VB: OffsetCondition.GetFromVector(Vector3)
      qualifiedName:
        CSharp: OffsetCondition.GetFromVector(Vector3)
        VB: OffsetCondition.GetFromVector(Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetFromVector
        path: ''
        startLine: 3339
      syntax:
        content:
          CSharp: public static OffsetCondition.Offset GetFromVector(Vector3 v)
          VB: Public Shared Function GetFromVector(v As Vector3) As OffsetCondition.Offset
        parameters:
        - id: v
          type: Global.Vector3
        return:
          type: Global.OffsetCondition.Offset
      overload: Global.OffsetCondition.GetFromVector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.OffsetCondition.#ctor(OffsetCondition.Offset)
      commentId: M:Global.OffsetCondition.#ctor(OffsetCondition.Offset)
      language: CSharp
      name:
        CSharp: OffsetCondition(OffsetCondition.Offset)
        VB: OffsetCondition(OffsetCondition.Offset)
      nameWithType:
        CSharp: OffsetCondition.OffsetCondition(OffsetCondition.Offset)
        VB: OffsetCondition.OffsetCondition(OffsetCondition.Offset)
      qualifiedName:
        CSharp: OffsetCondition.OffsetCondition(OffsetCondition.Offset)
        VB: OffsetCondition.OffsetCondition(OffsetCondition.Offset)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 3351
      syntax:
        content:
          CSharp: public OffsetCondition(OffsetCondition.Offset offset)
          VB: Public Sub New(offset As OffsetCondition.Offset)
        parameters:
        - id: offset
          type: Global.OffsetCondition.Offset
      overload: Global.OffsetCondition.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.OffsetCondition.ToString
      commentId: M:Global.OffsetCondition.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: OffsetCondition.ToString()
        VB: OffsetCondition.ToString()
      qualifiedName:
        CSharp: OffsetCondition.ToString()
        VB: OffsetCondition.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3356
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Global.OffsetCondition.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.OffsetCondition.Offset
    commentId: T:Global.OffsetCondition.Offset
    language: CSharp
    name:
      CSharp: OffsetCondition.Offset
      VB: OffsetCondition.Offset
    nameWithType:
      CSharp: OffsetCondition.Offset
      VB: OffsetCondition.Offset
    qualifiedName:
      CSharp: OffsetCondition.Offset
      VB: OffsetCondition.Offset
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Offset
      path: ''
      startLine: 3257
    syntax:
      content:
        CSharp: public enum Offset
        VB: Public Enum Offset
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.OffsetCondition.Offset.Offset_020
      commentId: F:Global.OffsetCondition.Offset.Offset_020
      language: CSharp
      name:
        CSharp: Offset_020
        VB: Offset_020
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_020
        VB: OffsetCondition.Offset.Offset_020
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_020
        VB: OffsetCondition.Offset.Offset_020
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_020
        path: ''
        startLine: 3260
      syntax:
        content:
          CSharp: Offset_020 = 0
          VB: Offset_020 = 0
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_120
      commentId: F:Global.OffsetCondition.Offset.Offset_120
      language: CSharp
      name:
        CSharp: Offset_120
        VB: Offset_120
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_120
        VB: OffsetCondition.Offset.Offset_120
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_120
        VB: OffsetCondition.Offset.Offset_120
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_120
        path: ''
        startLine: 3261
      syntax:
        content:
          CSharp: Offset_120 = 1
          VB: Offset_120 = 1
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_220
      commentId: F:Global.OffsetCondition.Offset.Offset_220
      language: CSharp
      name:
        CSharp: Offset_220
        VB: Offset_220
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_220
        VB: OffsetCondition.Offset.Offset_220
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_220
        VB: OffsetCondition.Offset.Offset_220
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_220
        path: ''
        startLine: 3262
      syntax:
        content:
          CSharp: Offset_220 = 2
          VB: Offset_220 = 2
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_021
      commentId: F:Global.OffsetCondition.Offset.Offset_021
      language: CSharp
      name:
        CSharp: Offset_021
        VB: Offset_021
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_021
        VB: OffsetCondition.Offset.Offset_021
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_021
        VB: OffsetCondition.Offset.Offset_021
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_021
        path: ''
        startLine: 3263
      syntax:
        content:
          CSharp: Offset_021 = 3
          VB: Offset_021 = 3
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_121
      commentId: F:Global.OffsetCondition.Offset.Offset_121
      language: CSharp
      name:
        CSharp: Offset_121
        VB: Offset_121
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_121
        VB: OffsetCondition.Offset.Offset_121
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_121
        VB: OffsetCondition.Offset.Offset_121
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_121
        path: ''
        startLine: 3264
      syntax:
        content:
          CSharp: Offset_121 = 4
          VB: Offset_121 = 4
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_221
      commentId: F:Global.OffsetCondition.Offset.Offset_221
      language: CSharp
      name:
        CSharp: Offset_221
        VB: Offset_221
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_221
        VB: OffsetCondition.Offset.Offset_221
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_221
        VB: OffsetCondition.Offset.Offset_221
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_221
        path: ''
        startLine: 3265
      syntax:
        content:
          CSharp: Offset_221 = 5
          VB: Offset_221 = 5
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_022
      commentId: F:Global.OffsetCondition.Offset.Offset_022
      language: CSharp
      name:
        CSharp: Offset_022
        VB: Offset_022
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_022
        VB: OffsetCondition.Offset.Offset_022
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_022
        VB: OffsetCondition.Offset.Offset_022
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_022
        path: ''
        startLine: 3266
      syntax:
        content:
          CSharp: Offset_022 = 6
          VB: Offset_022 = 6
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_122
      commentId: F:Global.OffsetCondition.Offset.Offset_122
      language: CSharp
      name:
        CSharp: Offset_122
        VB: Offset_122
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_122
        VB: OffsetCondition.Offset.Offset_122
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_122
        VB: OffsetCondition.Offset.Offset_122
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_122
        path: ''
        startLine: 3267
      syntax:
        content:
          CSharp: Offset_122 = 7
          VB: Offset_122 = 7
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_222
      commentId: F:Global.OffsetCondition.Offset.Offset_222
      language: CSharp
      name:
        CSharp: Offset_222
        VB: Offset_222
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_222
        VB: OffsetCondition.Offset.Offset_222
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_222
        VB: OffsetCondition.Offset.Offset_222
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_222
        path: ''
        startLine: 3268
      syntax:
        content:
          CSharp: Offset_222 = 8
          VB: Offset_222 = 8
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_010
      commentId: F:Global.OffsetCondition.Offset.Offset_010
      language: CSharp
      name:
        CSharp: Offset_010
        VB: Offset_010
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_010
        VB: OffsetCondition.Offset.Offset_010
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_010
        VB: OffsetCondition.Offset.Offset_010
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_010
        path: ''
        startLine: 3271
      syntax:
        content:
          CSharp: Offset_010 = 9
          VB: Offset_010 = 9
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_110
      commentId: F:Global.OffsetCondition.Offset.Offset_110
      language: CSharp
      name:
        CSharp: Offset_110
        VB: Offset_110
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_110
        VB: OffsetCondition.Offset.Offset_110
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_110
        VB: OffsetCondition.Offset.Offset_110
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_110
        path: ''
        startLine: 3272
      syntax:
        content:
          CSharp: Offset_110 = 10
          VB: Offset_110 = 10
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_210
      commentId: F:Global.OffsetCondition.Offset.Offset_210
      language: CSharp
      name:
        CSharp: Offset_210
        VB: Offset_210
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_210
        VB: OffsetCondition.Offset.Offset_210
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_210
        VB: OffsetCondition.Offset.Offset_210
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_210
        path: ''
        startLine: 3273
      syntax:
        content:
          CSharp: Offset_210 = 11
          VB: Offset_210 = 11
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_011
      commentId: F:Global.OffsetCondition.Offset.Offset_011
      language: CSharp
      name:
        CSharp: Offset_011
        VB: Offset_011
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_011
        VB: OffsetCondition.Offset.Offset_011
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_011
        VB: OffsetCondition.Offset.Offset_011
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_011
        path: ''
        startLine: 3274
      syntax:
        content:
          CSharp: Offset_011 = 12
          VB: Offset_011 = 12
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_211
      commentId: F:Global.OffsetCondition.Offset.Offset_211
      language: CSharp
      name:
        CSharp: Offset_211
        VB: Offset_211
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_211
        VB: OffsetCondition.Offset.Offset_211
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_211
        VB: OffsetCondition.Offset.Offset_211
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_211
        path: ''
        startLine: 3276
      syntax:
        content:
          CSharp: Offset_211 = 13
          VB: Offset_211 = 13
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_012
      commentId: F:Global.OffsetCondition.Offset.Offset_012
      language: CSharp
      name:
        CSharp: Offset_012
        VB: Offset_012
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_012
        VB: OffsetCondition.Offset.Offset_012
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_012
        VB: OffsetCondition.Offset.Offset_012
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_012
        path: ''
        startLine: 3277
      syntax:
        content:
          CSharp: Offset_012 = 14
          VB: Offset_012 = 14
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_112
      commentId: F:Global.OffsetCondition.Offset.Offset_112
      language: CSharp
      name:
        CSharp: Offset_112
        VB: Offset_112
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_112
        VB: OffsetCondition.Offset.Offset_112
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_112
        VB: OffsetCondition.Offset.Offset_112
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_112
        path: ''
        startLine: 3278
      syntax:
        content:
          CSharp: Offset_112 = 15
          VB: Offset_112 = 15
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_212
      commentId: F:Global.OffsetCondition.Offset.Offset_212
      language: CSharp
      name:
        CSharp: Offset_212
        VB: Offset_212
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_212
        VB: OffsetCondition.Offset.Offset_212
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_212
        VB: OffsetCondition.Offset.Offset_212
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_212
        path: ''
        startLine: 3279
      syntax:
        content:
          CSharp: Offset_212 = 16
          VB: Offset_212 = 16
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_000
      commentId: F:Global.OffsetCondition.Offset.Offset_000
      language: CSharp
      name:
        CSharp: Offset_000
        VB: Offset_000
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_000
        VB: OffsetCondition.Offset.Offset_000
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_000
        VB: OffsetCondition.Offset.Offset_000
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_000
        path: ''
        startLine: 3282
      syntax:
        content:
          CSharp: Offset_000 = 17
          VB: Offset_000 = 17
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_100
      commentId: F:Global.OffsetCondition.Offset.Offset_100
      language: CSharp
      name:
        CSharp: Offset_100
        VB: Offset_100
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_100
        VB: OffsetCondition.Offset.Offset_100
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_100
        VB: OffsetCondition.Offset.Offset_100
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_100
        path: ''
        startLine: 3283
      syntax:
        content:
          CSharp: Offset_100 = 18
          VB: Offset_100 = 18
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_200
      commentId: F:Global.OffsetCondition.Offset.Offset_200
      language: CSharp
      name:
        CSharp: Offset_200
        VB: Offset_200
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_200
        VB: OffsetCondition.Offset.Offset_200
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_200
        VB: OffsetCondition.Offset.Offset_200
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_200
        path: ''
        startLine: 3284
      syntax:
        content:
          CSharp: Offset_200 = 19
          VB: Offset_200 = 19
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_001
      commentId: F:Global.OffsetCondition.Offset.Offset_001
      language: CSharp
      name:
        CSharp: Offset_001
        VB: Offset_001
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_001
        VB: OffsetCondition.Offset.Offset_001
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_001
        VB: OffsetCondition.Offset.Offset_001
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_001
        path: ''
        startLine: 3285
      syntax:
        content:
          CSharp: Offset_001 = 20
          VB: Offset_001 = 20
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_101
      commentId: F:Global.OffsetCondition.Offset.Offset_101
      language: CSharp
      name:
        CSharp: Offset_101
        VB: Offset_101
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_101
        VB: OffsetCondition.Offset.Offset_101
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_101
        VB: OffsetCondition.Offset.Offset_101
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_101
        path: ''
        startLine: 3286
      syntax:
        content:
          CSharp: Offset_101 = 21
          VB: Offset_101 = 21
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_201
      commentId: F:Global.OffsetCondition.Offset.Offset_201
      language: CSharp
      name:
        CSharp: Offset_201
        VB: Offset_201
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_201
        VB: OffsetCondition.Offset.Offset_201
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_201
        VB: OffsetCondition.Offset.Offset_201
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_201
        path: ''
        startLine: 3287
      syntax:
        content:
          CSharp: Offset_201 = 22
          VB: Offset_201 = 22
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_002
      commentId: F:Global.OffsetCondition.Offset.Offset_002
      language: CSharp
      name:
        CSharp: Offset_002
        VB: Offset_002
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_002
        VB: OffsetCondition.Offset.Offset_002
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_002
        VB: OffsetCondition.Offset.Offset_002
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_002
        path: ''
        startLine: 3288
      syntax:
        content:
          CSharp: Offset_002 = 23
          VB: Offset_002 = 23
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_102
      commentId: F:Global.OffsetCondition.Offset.Offset_102
      language: CSharp
      name:
        CSharp: Offset_102
        VB: Offset_102
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_102
        VB: OffsetCondition.Offset.Offset_102
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_102
        VB: OffsetCondition.Offset.Offset_102
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_102
        path: ''
        startLine: 3289
      syntax:
        content:
          CSharp: Offset_102 = 24
          VB: Offset_102 = 24
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_202
      commentId: F:Global.OffsetCondition.Offset.Offset_202
      language: CSharp
      name:
        CSharp: Offset_202
        VB: Offset_202
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_202
        VB: OffsetCondition.Offset.Offset_202
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_202
        VB: OffsetCondition.Offset.Offset_202
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_202
        path: ''
        startLine: 3290
      syntax:
        content:
          CSharp: Offset_202 = 25
          VB: Offset_202 = 25
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.OffsetCondition.Offset.Offset_Null
      commentId: F:Global.OffsetCondition.Offset.Offset_Null
      language: CSharp
      name:
        CSharp: Offset_Null
        VB: Offset_Null
      nameWithType:
        CSharp: OffsetCondition.Offset.Offset_Null
        VB: OffsetCondition.Offset.Offset_Null
      qualifiedName:
        CSharp: OffsetCondition.Offset.Offset_Null
        VB: OffsetCondition.Offset.Offset_Null
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Offset_Null
        path: ''
        startLine: 3292
      syntax:
        content:
          CSharp: Offset_Null = 26
          VB: Offset_Null = 26
        return:
          type: Global.OffsetCondition.Offset
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.RotationAxis
    commentId: T:Global.RotationAxis
    language: CSharp
    name:
      CSharp: RotationAxis
      VB: RotationAxis
    nameWithType:
      CSharp: RotationAxis
      VB: RotationAxis
    qualifiedName:
      CSharp: RotationAxis
      VB: RotationAxis
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RotationAxis
      path: ''
      startLine: 3365
    syntax:
      content:
        CSharp: public enum RotationAxis
        VB: Public Enum RotationAxis
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.RotationAxis.AroundX
      commentId: F:Global.RotationAxis.AroundX
      language: CSharp
      name:
        CSharp: AroundX
        VB: AroundX
      nameWithType:
        CSharp: RotationAxis.AroundX
        VB: RotationAxis.AroundX
      qualifiedName:
        CSharp: RotationAxis.AroundX
        VB: RotationAxis.AroundX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AroundX
        path: ''
        startLine: 3367
      syntax:
        content:
          CSharp: AroundX = 0
          VB: AroundX = 0
        return:
          type: Global.RotationAxis
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.RotationAxis.AroundY
      commentId: F:Global.RotationAxis.AroundY
      language: CSharp
      name:
        CSharp: AroundY
        VB: AroundY
      nameWithType:
        CSharp: RotationAxis.AroundY
        VB: RotationAxis.AroundY
      qualifiedName:
        CSharp: RotationAxis.AroundY
        VB: RotationAxis.AroundY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AroundY
        path: ''
        startLine: 3368
      syntax:
        content:
          CSharp: AroundY = 1
          VB: AroundY = 1
        return:
          type: Global.RotationAxis
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.RotationAxis.AroundZ
      commentId: F:Global.RotationAxis.AroundZ
      language: CSharp
      name:
        CSharp: AroundZ
        VB: AroundZ
      nameWithType:
        CSharp: RotationAxis.AroundZ
        VB: RotationAxis.AroundZ
      qualifiedName:
        CSharp: RotationAxis.AroundZ
        VB: RotationAxis.AroundZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AroundZ
        path: ''
        startLine: 3369
      syntax:
        content:
          CSharp: AroundZ = 2
          VB: AroundZ = 2
        return:
          type: Global.RotationAxis
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.PerFaceFlag
    commentId: T:Global.PerFaceFlag
    language: CSharp
    name:
      CSharp: PerFaceFlag
      VB: PerFaceFlag
    nameWithType:
      CSharp: PerFaceFlag
      VB: PerFaceFlag
    qualifiedName:
      CSharp: PerFaceFlag
      VB: PerFaceFlag
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PerFaceFlag
      path: ''
      startLine: 3372
    syntax:
      content:
        CSharp: 'public enum PerFaceFlag : sbyte'
        VB: Public Enum PerFaceFlag As SByte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Global.PerFaceFlag.None
      commentId: F:Global.PerFaceFlag.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: PerFaceFlag.None
        VB: PerFaceFlag.None
      qualifiedName:
        CSharp: PerFaceFlag.None
        VB: PerFaceFlag.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: None
        path: ''
        startLine: 3375
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Front
      commentId: F:Global.PerFaceFlag.Front
      language: CSharp
      name:
        CSharp: Front
        VB: Front
      nameWithType:
        CSharp: PerFaceFlag.Front
        VB: PerFaceFlag.Front
      qualifiedName:
        CSharp: PerFaceFlag.Front
        VB: PerFaceFlag.Front
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Front
        path: ''
        startLine: 3376
      syntax:
        content:
          CSharp: Front = 1
          VB: Front = 1
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Back
      commentId: F:Global.PerFaceFlag.Back
      language: CSharp
      name:
        CSharp: Back
        VB: Back
      nameWithType:
        CSharp: PerFaceFlag.Back
        VB: PerFaceFlag.Back
      qualifiedName:
        CSharp: PerFaceFlag.Back
        VB: PerFaceFlag.Back
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Back
        path: ''
        startLine: 3377
      syntax:
        content:
          CSharp: Back = 2
          VB: Back = 2
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Right
      commentId: F:Global.PerFaceFlag.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: PerFaceFlag.Right
        VB: PerFaceFlag.Right
      qualifiedName:
        CSharp: PerFaceFlag.Right
        VB: PerFaceFlag.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Right
        path: ''
        startLine: 3378
      syntax:
        content:
          CSharp: Right = 4
          VB: Right = 4
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Left
      commentId: F:Global.PerFaceFlag.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: PerFaceFlag.Left
        VB: PerFaceFlag.Left
      qualifiedName:
        CSharp: PerFaceFlag.Left
        VB: PerFaceFlag.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Left
        path: ''
        startLine: 3379
      syntax:
        content:
          CSharp: Left = 8
          VB: Left = 8
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Up
      commentId: F:Global.PerFaceFlag.Up
      language: CSharp
      name:
        CSharp: Up
        VB: Up
      nameWithType:
        CSharp: PerFaceFlag.Up
        VB: PerFaceFlag.Up
      qualifiedName:
        CSharp: PerFaceFlag.Up
        VB: PerFaceFlag.Up
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Up
        path: ''
        startLine: 3380
      syntax:
        content:
          CSharp: Up = 16
          VB: Up = 16
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.Down
      commentId: F:Global.PerFaceFlag.Down
      language: CSharp
      name:
        CSharp: Down
        VB: Down
      nameWithType:
        CSharp: PerFaceFlag.Down
        VB: PerFaceFlag.Down
      qualifiedName:
        CSharp: PerFaceFlag.Down
        VB: PerFaceFlag.Down
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Down
        path: ''
        startLine: 3381
      syntax:
        content:
          CSharp: Down = 32
          VB: Down = 32
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Global.PerFaceFlag.All
      commentId: F:Global.PerFaceFlag.All
      language: CSharp
      name:
        CSharp: All
        VB: All
      nameWithType:
        CSharp: PerFaceFlag.All
        VB: PerFaceFlag.All
      qualifiedName:
        CSharp: PerFaceFlag.All
        VB: PerFaceFlag.All
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: All
        path: ''
        startLine: 3382
      syntax:
        content:
          CSharp: All = 63
          VB: All = 63
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Global.MeshUsageCase
    commentId: T:Global.MeshUsageCase
    language: CSharp
    name:
      CSharp: MeshUsageCase
      VB: MeshUsageCase
    nameWithType:
      CSharp: MeshUsageCase
      VB: MeshUsageCase
    qualifiedName:
      CSharp: MeshUsageCase
      VB: MeshUsageCase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MeshUsageCase
      path: ''
      startLine: 3385
    syntax:
      content:
        CSharp: public class MeshUsageCase
        VB: Public Class MeshUsageCase
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.MeshUsageCase.enabled
      commentId: F:Global.MeshUsageCase.enabled
      language: CSharp
      name:
        CSharp: enabled
        VB: enabled
      nameWithType:
        CSharp: MeshUsageCase.enabled
        VB: MeshUsageCase.enabled
      qualifiedName:
        CSharp: MeshUsageCase.enabled
        VB: MeshUsageCase.enabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: enabled
        path: ''
        startLine: 3388
      syntax:
        content:
          CSharp: public bool enabled
          VB: Public enabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.foldout
      commentId: F:Global.MeshUsageCase.foldout
      language: CSharp
      name:
        CSharp: foldout
        VB: foldout
      nameWithType:
        CSharp: MeshUsageCase.foldout
        VB: MeshUsageCase.foldout
      qualifiedName:
        CSharp: MeshUsageCase.foldout
        VB: MeshUsageCase.foldout
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: foldout
        path: ''
        startLine: 3391
      syntax:
        content:
          CSharp: public bool foldout
          VB: Public foldout As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.mesh
      commentId: F:Global.MeshUsageCase.mesh
      language: CSharp
      name:
        CSharp: mesh
        VB: mesh
      nameWithType:
        CSharp: MeshUsageCase.mesh
        VB: MeshUsageCase.mesh
      qualifiedName:
        CSharp: MeshUsageCase.mesh
        VB: MeshUsageCase.mesh
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: mesh
        path: ''
        startLine: 3393
      syntax:
        content:
          CSharp: public GameObject mesh
          VB: Public mesh As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.isMeshFacesConcave
      commentId: F:Global.MeshUsageCase.isMeshFacesConcave
      language: CSharp
      name:
        CSharp: isMeshFacesConcave
        VB: isMeshFacesConcave
      nameWithType:
        CSharp: MeshUsageCase.isMeshFacesConcave
        VB: MeshUsageCase.isMeshFacesConcave
      qualifiedName:
        CSharp: MeshUsageCase.isMeshFacesConcave
        VB: MeshUsageCase.isMeshFacesConcave
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isMeshFacesConcave
        path: ''
        startLine: 3395
      syntax:
        content:
          CSharp: public PerFaceFlag isMeshFacesConcave
          VB: Public isMeshFacesConcave As PerFaceFlag
        return:
          type: Global.PerFaceFlag
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.meshAlternates
      commentId: F:Global.MeshUsageCase.meshAlternates
      language: CSharp
      name:
        CSharp: meshAlternates
        VB: meshAlternates
      nameWithType:
        CSharp: MeshUsageCase.meshAlternates
        VB: MeshUsageCase.meshAlternates
      qualifiedName:
        CSharp: MeshUsageCase.meshAlternates
        VB: MeshUsageCase.meshAlternates
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: meshAlternates
        path: ''
        startLine: 3398
      syntax:
        content:
          CSharp: public GameObject[] meshAlternates
          VB: Public meshAlternates As GameObject()
        return:
          type: Global.GameObject[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.isMeshAlternatesFacesConcave
      commentId: F:Global.MeshUsageCase.isMeshAlternatesFacesConcave
      language: CSharp
      name:
        CSharp: isMeshAlternatesFacesConcave
        VB: isMeshAlternatesFacesConcave
      nameWithType:
        CSharp: MeshUsageCase.isMeshAlternatesFacesConcave
        VB: MeshUsageCase.isMeshAlternatesFacesConcave
      qualifiedName:
        CSharp: MeshUsageCase.isMeshAlternatesFacesConcave
        VB: MeshUsageCase.isMeshAlternatesFacesConcave
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isMeshAlternatesFacesConcave
        path: ''
        startLine: 3400
      syntax:
        content:
          CSharp: public PerFaceFlag[] isMeshAlternatesFacesConcave
          VB: Public isMeshAlternatesFacesConcave As PerFaceFlag()
        return:
          type: Global.PerFaceFlag[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.conditions
      commentId: F:Global.MeshUsageCase.conditions
      language: CSharp
      name:
        CSharp: conditions
        VB: conditions
      nameWithType:
        CSharp: MeshUsageCase.conditions
        VB: MeshUsageCase.conditions
      qualifiedName:
        CSharp: MeshUsageCase.conditions
        VB: MeshUsageCase.conditions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: conditions
        path: ''
        startLine: 3402
      syntax:
        content:
          CSharp: public List<OffsetCondition> conditions
          VB: Public conditions As List(Of OffsetCondition)
        return:
          type: Global.List{OffsetCondition}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.applyConditionsToAllRotations
      commentId: F:Global.MeshUsageCase.applyConditionsToAllRotations
      language: CSharp
      name:
        CSharp: applyConditionsToAllRotations
        VB: applyConditionsToAllRotations
      nameWithType:
        CSharp: MeshUsageCase.applyConditionsToAllRotations
        VB: MeshUsageCase.applyConditionsToAllRotations
      qualifiedName:
        CSharp: MeshUsageCase.applyConditionsToAllRotations
        VB: MeshUsageCase.applyConditionsToAllRotations
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: applyConditionsToAllRotations
        path: ''
        startLine: 3404
      syntax:
        content:
          CSharp: public bool applyConditionsToAllRotations
          VB: Public applyConditionsToAllRotations As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.axis
      commentId: F:Global.MeshUsageCase.axis
      language: CSharp
      name:
        CSharp: axis
        VB: axis
      nameWithType:
        CSharp: MeshUsageCase.axis
        VB: MeshUsageCase.axis
      qualifiedName:
        CSharp: MeshUsageCase.axis
        VB: MeshUsageCase.axis
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: axis
        path: ''
        startLine: 3405
      syntax:
        content:
          CSharp: public RotationAxis axis
          VB: Public axis As RotationAxis
        return:
          type: Global.RotationAxis
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.dontRotateBaseMesh
      commentId: F:Global.MeshUsageCase.dontRotateBaseMesh
      language: CSharp
      name:
        CSharp: dontRotateBaseMesh
        VB: dontRotateBaseMesh
      nameWithType:
        CSharp: MeshUsageCase.dontRotateBaseMesh
        VB: MeshUsageCase.dontRotateBaseMesh
      qualifiedName:
        CSharp: MeshUsageCase.dontRotateBaseMesh
        VB: MeshUsageCase.dontRotateBaseMesh
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: dontRotateBaseMesh
        path: ''
        startLine: 3406
      syntax:
        content:
          CSharp: public bool dontRotateBaseMesh
          VB: Public dontRotateBaseMesh As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.importRotation
      commentId: F:Global.MeshUsageCase.importRotation
      language: CSharp
      name:
        CSharp: importRotation
        VB: importRotation
      nameWithType:
        CSharp: MeshUsageCase.importRotation
        VB: MeshUsageCase.importRotation
      qualifiedName:
        CSharp: MeshUsageCase.importRotation
        VB: MeshUsageCase.importRotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: importRotation
        path: ''
        startLine: 3408
      syntax:
        content:
          CSharp: public Vector3 importRotation
          VB: Public importRotation As Vector3
        return:
          type: Global.Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.decorativeBuilders
      commentId: F:Global.MeshUsageCase.decorativeBuilders
      language: CSharp
      name:
        CSharp: decorativeBuilders
        VB: decorativeBuilders
      nameWithType:
        CSharp: MeshUsageCase.decorativeBuilders
        VB: MeshUsageCase.decorativeBuilders
      qualifiedName:
        CSharp: MeshUsageCase.decorativeBuilders
        VB: MeshUsageCase.decorativeBuilders
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: decorativeBuilders
        path: ''
        startLine: 3413
      syntax:
        content:
          CSharp: public CustomBuilder[] decorativeBuilders
          VB: Public decorativeBuilders As CustomBuilder()
        return:
          type: Global.CustomBuilder[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCase.ToString
      commentId: M:Global.MeshUsageCase.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: MeshUsageCase.ToString()
        VB: MeshUsageCase.ToString()
      qualifiedName:
        CSharp: MeshUsageCase.ToString()
        VB: MeshUsageCase.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3415
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Global.MeshUsageCase.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.BlockBuilder
    commentId: T:Global.BlockBuilder
    language: CSharp
    name:
      CSharp: BlockBuilder
      VB: BlockBuilder
    nameWithType:
      CSharp: BlockBuilder
      VB: BlockBuilder
    qualifiedName:
      CSharp: BlockBuilder
      VB: BlockBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockBuilder
      path: ''
      startLine: 3418
    syntax:
      content:
        CSharp: 'public class BlockBuilder : ScriptableObject'
        VB: >-
          Public Class BlockBuilder

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Global.CustomBuilder
    commentId: T:Global.CustomBuilder
    language: CSharp
    name:
      CSharp: CustomBuilder
      VB: CustomBuilder
    nameWithType:
      CSharp: CustomBuilder
      VB: CustomBuilder
    qualifiedName:
      CSharp: CustomBuilder
      VB: CustomBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CustomBuilder
      path: ''
      startLine: 3421
    syntax:
      content:
        CSharp: 'public class CustomBuilder : BlockBuilder'
        VB: >-
          Public Class CustomBuilder

              Inherits BlockBuilder
    inheritance:
    - System.Object
    - Global.BlockBuilder
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.CustomBuilder.usageCases
      commentId: F:Global.CustomBuilder.usageCases
      language: CSharp
      name:
        CSharp: usageCases
        VB: usageCases
      nameWithType:
        CSharp: CustomBuilder.usageCases
        VB: CustomBuilder.usageCases
      qualifiedName:
        CSharp: CustomBuilder.usageCases
        VB: CustomBuilder.usageCases
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: usageCases
        path: ''
        startLine: 3423
      syntax:
        content:
          CSharp: public List<MeshUsageCase> usageCases
          VB: Public usageCases As List(Of MeshUsageCase)
        return:
          type: Global.List{MeshUsageCase}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.CustomBuilder.previewMaterial
      commentId: F:Global.CustomBuilder.previewMaterial
      language: CSharp
      name:
        CSharp: previewMaterial
        VB: previewMaterial
      nameWithType:
        CSharp: CustomBuilder.previewMaterial
        VB: CustomBuilder.previewMaterial
      qualifiedName:
        CSharp: CustomBuilder.previewMaterial
        VB: CustomBuilder.previewMaterial
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: previewMaterial
        path: ''
        startLine: 3426
      syntax:
        content:
          CSharp: public Material previewMaterial
          VB: Public previewMaterial As Material
        return:
          type: Global.Material
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.ImageContainer
    commentId: T:Global.ImageContainer
    language: CSharp
    name:
      CSharp: ImageContainer
      VB: ImageContainer
    nameWithType:
      CSharp: ImageContainer
      VB: ImageContainer
    qualifiedName:
      CSharp: ImageContainer
      VB: ImageContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ImageContainer
      path: ''
      startLine: 3437
    syntax:
      content:
        CSharp: 'public class ImageContainer : MonoBehaviour'
        VB: >-
          Public Class ImageContainer

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ImageContainer.Sprites
      commentId: F:Global.ImageContainer.Sprites
      language: CSharp
      name:
        CSharp: Sprites
        VB: Sprites
      nameWithType:
        CSharp: ImageContainer.Sprites
        VB: ImageContainer.Sprites
      qualifiedName:
        CSharp: ImageContainer.Sprites
        VB: ImageContainer.Sprites
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Sprites
        path: ''
        startLine: 3439
      syntax:
        content:
          CSharp: public Sprite[] Sprites
          VB: Public Sprites As Sprite()
        return:
          type: Global.Sprite[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.ImageContainer.GetAll
      commentId: M:Global.ImageContainer.GetAll
      language: CSharp
      name:
        CSharp: GetAll()
        VB: GetAll()
      nameWithType:
        CSharp: ImageContainer.GetAll()
        VB: ImageContainer.GetAll()
      qualifiedName:
        CSharp: ImageContainer.GetAll()
        VB: ImageContainer.GetAll()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetAll
        path: ''
        startLine: 3441
      syntax:
        content:
          CSharp: public Dictionary<string, Sprite> GetAll()
          VB: Public Function GetAll As Dictionary(Of String, Sprite)
        return:
          type: Global.Dictionary{System.String,Sprite}
      overload: Global.ImageContainer.GetAll*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.PrefabBlockBuilder
    commentId: T:Global.PrefabBlockBuilder
    language: CSharp
    name:
      CSharp: PrefabBlockBuilder
      VB: PrefabBlockBuilder
    nameWithType:
      CSharp: PrefabBlockBuilder
      VB: PrefabBlockBuilder
    qualifiedName:
      CSharp: PrefabBlockBuilder
      VB: PrefabBlockBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PrefabBlockBuilder
      path: ''
      startLine: 3454
    syntax:
      content:
        CSharp: 'public abstract class PrefabBlockBuilder : BlockBuilder'
        VB: >-
          Public MustInherit Class PrefabBlockBuilder

              Inherits BlockBuilder
    inheritance:
    - System.Object
    - Global.BlockBuilder
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items: []
  - id: Global.PrefabUsageCase
    commentId: T:Global.PrefabUsageCase
    language: CSharp
    name:
      CSharp: PrefabUsageCase
      VB: PrefabUsageCase
    nameWithType:
      CSharp: PrefabUsageCase
      VB: PrefabUsageCase
    qualifiedName:
      CSharp: PrefabUsageCase
      VB: PrefabUsageCase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PrefabUsageCase
      path: ''
      startLine: 3461
    syntax:
      content:
        CSharp: public class PrefabUsageCase
        VB: Public Class PrefabUsageCase
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PrefabUsageCase.prefab
      commentId: F:Global.PrefabUsageCase.prefab
      language: CSharp
      name:
        CSharp: prefab
        VB: prefab
      nameWithType:
        CSharp: PrefabUsageCase.prefab
        VB: PrefabUsageCase.prefab
      qualifiedName:
        CSharp: PrefabUsageCase.prefab
        VB: PrefabUsageCase.prefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: prefab
        path: ''
        startLine: 3464
      syntax:
        content:
          CSharp: public GameObject prefab
          VB: Public prefab As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PrefabUsageCase.conditions
      commentId: F:Global.PrefabUsageCase.conditions
      language: CSharp
      name:
        CSharp: conditions
        VB: conditions
      nameWithType:
        CSharp: PrefabUsageCase.conditions
        VB: PrefabUsageCase.conditions
      qualifiedName:
        CSharp: PrefabUsageCase.conditions
        VB: PrefabUsageCase.conditions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: conditions
        path: ''
        startLine: 3465
      syntax:
        content:
          CSharp: public List<OffsetCondition> conditions
          VB: Public conditions As List(Of OffsetCondition)
        return:
          type: Global.List{OffsetCondition}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PrefabUsageCase.ToString
      commentId: M:Global.PrefabUsageCase.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PrefabUsageCase.ToString()
        VB: PrefabUsageCase.ToString()
      qualifiedName:
        CSharp: PrefabUsageCase.ToString()
        VB: PrefabUsageCase.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ToString
        path: ''
        startLine: 3467
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Global.PrefabUsageCase.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PrefabRuleBlockBuilder
    commentId: T:Global.PrefabRuleBlockBuilder
    language: CSharp
    name:
      CSharp: PrefabRuleBlockBuilder
      VB: PrefabRuleBlockBuilder
    nameWithType:
      CSharp: PrefabRuleBlockBuilder
      VB: PrefabRuleBlockBuilder
    qualifiedName:
      CSharp: PrefabRuleBlockBuilder
      VB: PrefabRuleBlockBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PrefabRuleBlockBuilder
      path: ''
      startLine: 3473
    syntax:
      content:
        CSharp: 'public class PrefabRuleBlockBuilder : PrefabBlockBuilder'
        VB: >-
          Public Class PrefabRuleBlockBuilder

              Inherits PrefabBlockBuilder
    inheritance:
    - System.Object
    - Global.BlockBuilder
    - Global.PrefabBlockBuilder
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PrefabRuleBlockBuilder.usageCases
      commentId: F:Global.PrefabRuleBlockBuilder.usageCases
      language: CSharp
      name:
        CSharp: usageCases
        VB: usageCases
      nameWithType:
        CSharp: PrefabRuleBlockBuilder.usageCases
        VB: PrefabRuleBlockBuilder.usageCases
      qualifiedName:
        CSharp: PrefabRuleBlockBuilder.usageCases
        VB: PrefabRuleBlockBuilder.usageCases
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: usageCases
        path: ''
        startLine: 3476
      syntax:
        content:
          CSharp: public List<PrefabUsageCase> usageCases
          VB: Public usageCases As List(Of PrefabUsageCase)
        return:
          type: Global.List{PrefabUsageCase}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.WeightedPrefabBlockBuilder
    commentId: T:Global.WeightedPrefabBlockBuilder
    language: CSharp
    name:
      CSharp: WeightedPrefabBlockBuilder
      VB: WeightedPrefabBlockBuilder
    nameWithType:
      CSharp: WeightedPrefabBlockBuilder
      VB: WeightedPrefabBlockBuilder
    qualifiedName:
      CSharp: WeightedPrefabBlockBuilder
      VB: WeightedPrefabBlockBuilder
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WeightedPrefabBlockBuilder
      path: ''
      startLine: 3481
    syntax:
      content:
        CSharp: 'public class WeightedPrefabBlockBuilder : PrefabBlockBuilder'
        VB: >-
          Public Class WeightedPrefabBlockBuilder

              Inherits PrefabBlockBuilder
    inheritance:
    - System.Object
    - Global.BlockBuilder
    - Global.PrefabBlockBuilder
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.WeightedPrefabBlockBuilder.prefabs
      commentId: F:Global.WeightedPrefabBlockBuilder.prefabs
      language: CSharp
      name:
        CSharp: prefabs
        VB: prefabs
      nameWithType:
        CSharp: WeightedPrefabBlockBuilder.prefabs
        VB: WeightedPrefabBlockBuilder.prefabs
      qualifiedName:
        CSharp: WeightedPrefabBlockBuilder.prefabs
        VB: WeightedPrefabBlockBuilder.prefabs
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: prefabs
        path: ''
        startLine: 3491
      syntax:
        content:
          CSharp: public WeightedPrefabBlockBuilder.WeightedPrefab[] prefabs
          VB: Public prefabs As WeightedPrefabBlockBuilder.WeightedPrefab()
        return:
          type: Global.WeightedPrefabBlockBuilder.WeightedPrefab[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab
    commentId: T:Global.WeightedPrefabBlockBuilder.WeightedPrefab
    language: CSharp
    name:
      CSharp: WeightedPrefabBlockBuilder.WeightedPrefab
      VB: WeightedPrefabBlockBuilder.WeightedPrefab
    nameWithType:
      CSharp: WeightedPrefabBlockBuilder.WeightedPrefab
      VB: WeightedPrefabBlockBuilder.WeightedPrefab
    qualifiedName:
      CSharp: WeightedPrefabBlockBuilder.WeightedPrefab
      VB: WeightedPrefabBlockBuilder.WeightedPrefab
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WeightedPrefab
      path: ''
      startLine: 3484
    syntax:
      content:
        CSharp: public struct WeightedPrefab
        VB: Public Structure WeightedPrefab
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab.prefab
      commentId: F:Global.WeightedPrefabBlockBuilder.WeightedPrefab.prefab
      language: CSharp
      name:
        CSharp: prefab
        VB: prefab
      nameWithType:
        CSharp: WeightedPrefabBlockBuilder.WeightedPrefab.prefab
        VB: WeightedPrefabBlockBuilder.WeightedPrefab.prefab
      qualifiedName:
        CSharp: WeightedPrefabBlockBuilder.WeightedPrefab.prefab
        VB: WeightedPrefabBlockBuilder.WeightedPrefab.prefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: prefab
        path: ''
        startLine: 3487
      syntax:
        content:
          CSharp: public GameObject prefab
          VB: Public prefab As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab.weight
      commentId: F:Global.WeightedPrefabBlockBuilder.WeightedPrefab.weight
      language: CSharp
      name:
        CSharp: weight
        VB: weight
      nameWithType:
        CSharp: WeightedPrefabBlockBuilder.WeightedPrefab.weight
        VB: WeightedPrefabBlockBuilder.WeightedPrefab.weight
      qualifiedName:
        CSharp: WeightedPrefabBlockBuilder.WeightedPrefab.weight
        VB: WeightedPrefabBlockBuilder.WeightedPrefab.weight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: weight
        path: ''
        startLine: 3488
      syntax:
        content:
          CSharp: public float weight
          VB: Public weight As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.BlockEditor
    commentId: T:Global.BlockEditor
    language: CSharp
    name:
      CSharp: BlockEditor
      VB: BlockEditor
    nameWithType:
      CSharp: BlockEditor
      VB: BlockEditor
    qualifiedName:
      CSharp: BlockEditor
      VB: BlockEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockEditor
      path: ''
      startLine: 3501
    syntax:
      content:
        CSharp: public static class BlockEditor
        VB: Public Module BlockEditor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Global.BlockEditor.DrawBlockEditor(Block)
      commentId: M:Global.BlockEditor.DrawBlockEditor(Block)
      language: CSharp
      name:
        CSharp: DrawBlockEditor(Block)
        VB: DrawBlockEditor(Block)
      nameWithType:
        CSharp: BlockEditor.DrawBlockEditor(Block)
        VB: BlockEditor.DrawBlockEditor(Block)
      qualifiedName:
        CSharp: BlockEditor.DrawBlockEditor(Block)
        VB: BlockEditor.DrawBlockEditor(Block)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DrawBlockEditor
        path: ''
        startLine: 3503
      syntax:
        content:
          CSharp: public static void DrawBlockEditor(Block block)
          VB: Public Shared Sub DrawBlockEditor(block As Block)
        parameters:
        - id: block
          type: Global.Block
      overload: Global.BlockEditor.DrawBlockEditor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.BlockSetEditor
    commentId: T:Global.BlockSetEditor
    language: CSharp
    name:
      CSharp: BlockSetEditor
      VB: BlockSetEditor
    nameWithType:
      CSharp: BlockSetEditor
      VB: BlockSetEditor
    qualifiedName:
      CSharp: BlockSetEditor
      VB: BlockSetEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockSetEditor
      path: ''
      startLine: 3629
    syntax:
      content:
        CSharp: 'public class BlockSetEditor : Editor'
        VB: >-
          Public Class BlockSetEditor

              Inherits Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.BlockSetEditor.OnEnable
      commentId: M:Global.BlockSetEditor.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: BlockSetEditor.OnEnable()
        VB: BlockSetEditor.OnEnable()
      qualifiedName:
        CSharp: BlockSetEditor.OnEnable()
        VB: BlockSetEditor.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnEnable
        path: ''
        startLine: 3647
      syntax:
        content:
          CSharp: public void OnEnable()
          VB: Public Sub OnEnable
      overload: Global.BlockSetEditor.OnEnable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlockSetEditor.OnDisable
      commentId: M:Global.BlockSetEditor.OnDisable
      language: CSharp
      name:
        CSharp: OnDisable()
        VB: OnDisable()
      nameWithType:
        CSharp: BlockSetEditor.OnDisable()
        VB: BlockSetEditor.OnDisable()
      qualifiedName:
        CSharp: BlockSetEditor.OnDisable()
        VB: BlockSetEditor.OnDisable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnDisable
        path: ''
        startLine: 3660
      syntax:
        content:
          CSharp: public void OnDisable()
          VB: Public Sub OnDisable
      overload: Global.BlockSetEditor.OnDisable*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.BlockSetEditor.CreateInspectorGUI
      commentId: M:Global.BlockSetEditor.CreateInspectorGUI
      language: CSharp
      name:
        CSharp: CreateInspectorGUI()
        VB: CreateInspectorGUI()
      nameWithType:
        CSharp: BlockSetEditor.CreateInspectorGUI()
        VB: BlockSetEditor.CreateInspectorGUI()
      qualifiedName:
        CSharp: BlockSetEditor.CreateInspectorGUI()
        VB: BlockSetEditor.CreateInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CreateInspectorGUI
        path: ''
        startLine: 3665
      syntax:
        content:
          CSharp: public override VisualElement CreateInspectorGUI()
          VB: Public Overrides Function CreateInspectorGUI As VisualElement
        return:
          type: Global.VisualElement
      overload: Global.BlockSetEditor.CreateInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Global.BlockSetEditor.DrawRenderPreview(Rect,Mesh,Material)
      commentId: M:Global.BlockSetEditor.DrawRenderPreview(Rect,Mesh,Material)
      language: CSharp
      name:
        CSharp: DrawRenderPreview(Rect, Mesh, Material)
        VB: DrawRenderPreview(Rect, Mesh, Material)
      nameWithType:
        CSharp: BlockSetEditor.DrawRenderPreview(Rect, Mesh, Material)
        VB: BlockSetEditor.DrawRenderPreview(Rect, Mesh, Material)
      qualifiedName:
        CSharp: BlockSetEditor.DrawRenderPreview(Rect, Mesh, Material)
        VB: BlockSetEditor.DrawRenderPreview(Rect, Mesh, Material)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DrawRenderPreview
        path: ''
        startLine: 3794
      syntax:
        content:
          CSharp: public Texture DrawRenderPreview(Rect size, Mesh mesh, Material material)
          VB: Public Function DrawRenderPreview(size As Rect, mesh As Mesh, material As Material) As Texture
        parameters:
        - id: size
          type: Global.Rect
        - id: mesh
          type: Global.Mesh
        - id: material
          type: Global.Material
        return:
          type: Global.Texture
      overload: Global.BlockSetEditor.DrawRenderPreview*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.BlockSetMenus
    commentId: T:Global.BlockSetMenus
    language: CSharp
    name:
      CSharp: BlockSetMenus
      VB: BlockSetMenus
    nameWithType:
      CSharp: BlockSetMenus
      VB: BlockSetMenus
    qualifiedName:
      CSharp: BlockSetMenus
      VB: BlockSetMenus
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: BlockSetMenus
      path: ''
      startLine: 3835
    syntax:
      content:
        CSharp: public static class BlockSetMenus
        VB: Public Module BlockSetMenus
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items: []
  - id: Global.MeshUsageCaseEditorComponent
    commentId: T:Global.MeshUsageCaseEditorComponent
    language: CSharp
    name:
      CSharp: MeshUsageCaseEditorComponent
      VB: MeshUsageCaseEditorComponent
    nameWithType:
      CSharp: MeshUsageCaseEditorComponent
      VB: MeshUsageCaseEditorComponent
    qualifiedName:
      CSharp: MeshUsageCaseEditorComponent
      VB: MeshUsageCaseEditorComponent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MeshUsageCaseEditorComponent
      path: ''
      startLine: 3903
    syntax:
      content:
        CSharp: 'public class MeshUsageCaseEditorComponent : MonoBehaviour'
        VB: >-
          Public Class MeshUsageCaseEditorComponent

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.MeshUsageCaseEditorComponent.OnSelected
      commentId: F:Global.MeshUsageCaseEditorComponent.OnSelected
      language: CSharp
      name:
        CSharp: OnSelected
        VB: OnSelected
      nameWithType:
        CSharp: MeshUsageCaseEditorComponent.OnSelected
        VB: MeshUsageCaseEditorComponent.OnSelected
      qualifiedName:
        CSharp: MeshUsageCaseEditorComponent.OnSelected
        VB: MeshUsageCaseEditorComponent.OnSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnSelected
        path: ''
        startLine: 3908
      syntax:
        content:
          CSharp: public Action OnSelected
          VB: Public OnSelected As Action
        return:
          type: Global.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCaseEditorComponent.condition
      commentId: F:Global.MeshUsageCaseEditorComponent.condition
      language: CSharp
      name:
        CSharp: condition
        VB: condition
      nameWithType:
        CSharp: MeshUsageCaseEditorComponent.condition
        VB: MeshUsageCaseEditorComponent.condition
      qualifiedName:
        CSharp: MeshUsageCaseEditorComponent.condition
        VB: MeshUsageCaseEditorComponent.condition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: condition
        path: ''
        startLine: 3910
      syntax:
        content:
          CSharp: public OffsetCondition condition
          VB: Public condition As OffsetCondition
        return:
          type: Global.OffsetCondition
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.MeshUsageCaseEditorComponent.color
      commentId: F:Global.MeshUsageCaseEditorComponent.color
      language: CSharp
      name:
        CSharp: color
        VB: color
      nameWithType:
        CSharp: MeshUsageCaseEditorComponent.color
        VB: MeshUsageCaseEditorComponent.color
      qualifiedName:
        CSharp: MeshUsageCaseEditorComponent.color
        VB: MeshUsageCaseEditorComponent.color
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: color
        path: ''
        startLine: 3911
      syntax:
        content:
          CSharp: public Color color
          VB: Public color As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.CustomBuilderEditorWindow
    commentId: T:Global.CustomBuilderEditorWindow
    language: CSharp
    name:
      CSharp: CustomBuilderEditorWindow
      VB: CustomBuilderEditorWindow
    nameWithType:
      CSharp: CustomBuilderEditorWindow
      VB: CustomBuilderEditorWindow
    qualifiedName:
      CSharp: CustomBuilderEditorWindow
      VB: CustomBuilderEditorWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: CustomBuilderEditorWindow
      path: ''
      startLine: 3978
    syntax:
      content:
        CSharp: 'public class CustomBuilderEditorWindow : EditorWindow'
        VB: >-
          Public Class CustomBuilderEditorWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.CustomBuilderEditorWindow.Open(CustomBuilder)
      commentId: M:Global.CustomBuilderEditorWindow.Open(CustomBuilder)
      language: CSharp
      name:
        CSharp: Open(CustomBuilder)
        VB: Open(CustomBuilder)
      nameWithType:
        CSharp: CustomBuilderEditorWindow.Open(CustomBuilder)
        VB: CustomBuilderEditorWindow.Open(CustomBuilder)
      qualifiedName:
        CSharp: CustomBuilderEditorWindow.Open(CustomBuilder)
        VB: CustomBuilderEditorWindow.Open(CustomBuilder)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Open
        path: ''
        startLine: 3983
      syntax:
        content:
          CSharp: public static void Open(CustomBuilder bldr)
          VB: Public Shared Sub Open(bldr As CustomBuilder)
        parameters:
        - id: bldr
          type: Global.CustomBuilder
      overload: Global.CustomBuilderEditorWindow.Open*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.CustomBuilderEditorWindow.SetTarget(CustomBuilder)
      commentId: M:Global.CustomBuilderEditorWindow.SetTarget(CustomBuilder)
      language: CSharp
      name:
        CSharp: SetTarget(CustomBuilder)
        VB: SetTarget(CustomBuilder)
      nameWithType:
        CSharp: CustomBuilderEditorWindow.SetTarget(CustomBuilder)
        VB: CustomBuilderEditorWindow.SetTarget(CustomBuilder)
      qualifiedName:
        CSharp: CustomBuilderEditorWindow.SetTarget(CustomBuilder)
        VB: CustomBuilderEditorWindow.SetTarget(CustomBuilder)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTarget
        path: ''
        startLine: 3990
      syntax:
        content:
          CSharp: public void SetTarget(CustomBuilder bldr)
          VB: Public Sub SetTarget(bldr As CustomBuilder)
        parameters:
        - id: bldr
          type: Global.CustomBuilder
      overload: Global.CustomBuilderEditorWindow.SetTarget*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.EditorGUIUtils
    commentId: T:Global.EditorGUIUtils
    language: CSharp
    name:
      CSharp: EditorGUIUtils
      VB: EditorGUIUtils
    nameWithType:
      CSharp: EditorGUIUtils
      VB: EditorGUIUtils
    qualifiedName:
      CSharp: EditorGUIUtils
      VB: EditorGUIUtils
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EditorGUIUtils
      path: ''
      startLine: 4472
    syntax:
      content:
        CSharp: public static class EditorGUIUtils
        VB: Public Module EditorGUIUtils
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Global.EditorGUIUtils.SELECT_COLOR
      commentId: P:Global.EditorGUIUtils.SELECT_COLOR
      language: CSharp
      name:
        CSharp: SELECT_COLOR
        VB: SELECT_COLOR
      nameWithType:
        CSharp: EditorGUIUtils.SELECT_COLOR
        VB: EditorGUIUtils.SELECT_COLOR
      qualifiedName:
        CSharp: EditorGUIUtils.SELECT_COLOR
        VB: EditorGUIUtils.SELECT_COLOR
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SELECT_COLOR
        path: ''
        startLine: 4474
      syntax:
        content:
          CSharp: public static Color SELECT_COLOR { get; }
          VB: Public Shared ReadOnly Property SELECT_COLOR As Color
        parameters: []
        return:
          type: Global.Color
      overload: Global.EditorGUIUtils.SELECT_COLOR*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Global.EditorGUIUtils.DrawRect(Rect,Color)
      commentId: M:Global.EditorGUIUtils.DrawRect(Rect,Color)
      language: CSharp
      name:
        CSharp: DrawRect(Rect, Color)
        VB: DrawRect(Rect, Color)
      nameWithType:
        CSharp: EditorGUIUtils.DrawRect(Rect, Color)
        VB: EditorGUIUtils.DrawRect(Rect, Color)
      qualifiedName:
        CSharp: EditorGUIUtils.DrawRect(Rect, Color)
        VB: EditorGUIUtils.DrawRect(Rect, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DrawRect
        path: ''
        startLine: 4480
      syntax:
        content:
          CSharp: public static void DrawRect(Rect rect, Color color)
          VB: Public Shared Sub DrawRect(rect As Rect, color As Color)
        parameters:
        - id: rect
          type: Global.Rect
        - id: color
          type: Global.Color
      overload: Global.EditorGUIUtils.DrawRect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.FillRect(Rect,Color)
      commentId: M:Global.EditorGUIUtils.FillRect(Rect,Color)
      language: CSharp
      name:
        CSharp: FillRect(Rect, Color)
        VB: FillRect(Rect, Color)
      nameWithType:
        CSharp: EditorGUIUtils.FillRect(Rect, Color)
        VB: EditorGUIUtils.FillRect(Rect, Color)
      qualifiedName:
        CSharp: EditorGUIUtils.FillRect(Rect, Color)
        VB: EditorGUIUtils.FillRect(Rect, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: FillRect
        path: ''
        startLine: 4493
      syntax:
        content:
          CSharp: public static void FillRect(Rect rect, Color color)
          VB: Public Shared Sub FillRect(rect As Rect, color As Color)
        parameters:
        - id: rect
          type: Global.Rect
        - id: color
          type: Global.Color
      overload: Global.EditorGUIUtils.FillRect*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.Popup(System.String,System.Int32,System.Object[])
      commentId: M:Global.EditorGUIUtils.Popup(System.String,System.Int32,System.Object[])
      language: CSharp
      name:
        CSharp: Popup(String, Int32, Object[])
        VB: Popup(String, Int32, Object())
      nameWithType:
        CSharp: EditorGUIUtils.Popup(String, Int32, Object[])
        VB: EditorGUIUtils.Popup(String, Int32, Object())
      qualifiedName:
        CSharp: EditorGUIUtils.Popup(System.String, System.Int32, System.Object[])
        VB: EditorGUIUtils.Popup(System.String, System.Int32, System.Object())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Popup
        path: ''
        startLine: 4500
      syntax:
        content:
          CSharp: public static int Popup(string label, int selected, object[] items)
          VB: Public Shared Function Popup(label As String, selected As Integer, items As Object()) As Integer
        parameters:
        - id: label
          type: System.String
        - id: selected
          type: System.Int32
        - id: items
          type: System.Object[]
        return:
          type: System.Int32
      overload: Global.EditorGUIUtils.Popup*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.Toolbar(Enum)
      commentId: M:Global.EditorGUIUtils.Toolbar(Enum)
      language: CSharp
      name:
        CSharp: Toolbar(Enum)
        VB: Toolbar(Enum)
      nameWithType:
        CSharp: EditorGUIUtils.Toolbar(Enum)
        VB: EditorGUIUtils.Toolbar(Enum)
      qualifiedName:
        CSharp: EditorGUIUtils.Toolbar(Enum)
        VB: EditorGUIUtils.Toolbar(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Toolbar
        path: ''
        startLine: 4508
      syntax:
        content:
          CSharp: public static Enum Toolbar(Enum selected)
          VB: 'Public Shared Function Toolbar(selected As  Enum) As '
        parameters:
        - id: selected
          type: Global.Enum
        return:
          type: Global.Enum
      overload: Global.EditorGUIUtils.Toolbar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.DrawList(System.Int32,IList)
      commentId: M:Global.EditorGUIUtils.DrawList(System.Int32,IList)
      language: CSharp
      name:
        CSharp: DrawList(Int32, IList)
        VB: DrawList(Int32, IList)
      nameWithType:
        CSharp: EditorGUIUtils.DrawList(Int32, IList)
        VB: EditorGUIUtils.DrawList(Int32, IList)
      qualifiedName:
        CSharp: EditorGUIUtils.DrawList(System.Int32, IList)
        VB: EditorGUIUtils.DrawList(System.Int32, IList)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DrawList
        path: ''
        startLine: 4515
      syntax:
        content:
          CSharp: public static int DrawList(int selected, IList list)
          VB: Public Shared Function DrawList(selected As Integer, list As IList) As Integer
        parameters:
        - id: selected
          type: System.Int32
        - id: list
          type: Global.IList
        return:
          type: System.Int32
      overload: Global.EditorGUIUtils.DrawList*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.Draw2Arrays``2(``0[]@,``1[]@,Func{``0,``0},Func{``1,``1})
      commentId: M:Global.EditorGUIUtils.Draw2Arrays``2(``0[]@,``1[]@,Func{``0,``0},Func{``1,``1})
      language: CSharp
      name:
        CSharp: Draw2Arrays<A, B>(ref A[], ref B[], Func<A, A>, Func<B, B>)
        VB: Draw2Arrays(Of A, B)(ByRef A(), ByRef B(), Func(Of A, A), Func(Of B, B))
      nameWithType:
        CSharp: EditorGUIUtils.Draw2Arrays<A, B>(ref A[], ref B[], Func<A, A>, Func<B, B>)
        VB: EditorGUIUtils.Draw2Arrays(Of A, B)(ByRef A(), ByRef B(), Func(Of A, A), Func(Of B, B))
      qualifiedName:
        CSharp: EditorGUIUtils.Draw2Arrays<A, B>(ref A[], ref B[], Func<A, A>, Func<B, B>)
        VB: EditorGUIUtils.Draw2Arrays(Of A, B)(ByRef A(), ByRef B(), Func(Of A, A), Func(Of B, B))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Draw2Arrays
        path: ''
        startLine: 4541
      syntax:
        content:
          CSharp: public static void Draw2Arrays<A, B>(ref A[] arrayA, ref B[] arrayB, Func<A, A> drawItemA, Func<B, B> drawItemB)
          VB: Public Shared Sub Draw2Arrays(Of A, B)(ByRef arrayA As A(), ByRef arrayB As B(), drawItemA As Func(Of A, A), drawItemB As Func(Of B, B))
        parameters:
        - id: arrayA
          type: '{A}[]'
        - id: arrayB
          type: '{B}[]'
        - id: drawItemA
          type: Global.Func{{A},{A}}
        - id: drawItemB
          type: Global.Func{{B},{B}}
        typeParameters:
        - id: A
        - id: B
      overload: Global.EditorGUIUtils.Draw2Arrays*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.GetStateObject``1(System.Int32)
      commentId: M:Global.EditorGUIUtils.GetStateObject``1(System.Int32)
      language: CSharp
      name:
        CSharp: GetStateObject<T>(Int32)
        VB: GetStateObject(Of T)(Int32)
      nameWithType:
        CSharp: EditorGUIUtils.GetStateObject<T>(Int32)
        VB: EditorGUIUtils.GetStateObject(Of T)(Int32)
      qualifiedName:
        CSharp: EditorGUIUtils.GetStateObject<T>(System.Int32)
        VB: EditorGUIUtils.GetStateObject(Of T)(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetStateObject
        path: ''
        startLine: 4559
      syntax:
        content:
          CSharp: public static T GetStateObject<T>(int controlID)
          VB: Public Shared Function GetStateObject(Of T)(controlID As Integer) As T
        parameters:
        - id: controlID
          type: System.Int32
        typeParameters:
        - id: T
        return:
          type: '{T}'
      overload: Global.EditorGUIUtils.GetStateObject*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.EditorGUIUtils.SetArrayLength``1(``0[]@,System.Int32)
      commentId: M:Global.EditorGUIUtils.SetArrayLength``1(``0[]@,System.Int32)
      language: CSharp
      name:
        CSharp: SetArrayLength<T>(ref T[], Int32)
        VB: SetArrayLength(Of T)(ByRef T(), Int32)
      nameWithType:
        CSharp: EditorGUIUtils.SetArrayLength<T>(ref T[], Int32)
        VB: EditorGUIUtils.SetArrayLength(Of T)(ByRef T(), Int32)
      qualifiedName:
        CSharp: EditorGUIUtils.SetArrayLength<T>(ref T[], System.Int32)
        VB: EditorGUIUtils.SetArrayLength(Of T)(ByRef T(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetArrayLength
        path: ''
        startLine: 4563
      syntax:
        content:
          CSharp: public static void SetArrayLength<T>(ref T[] array, int length)
          VB: Public Shared Sub SetArrayLength(Of T)(ByRef array As T(), length As Integer)
        parameters:
        - id: array
          type: '{T}[]'
        - id: length
          type: System.Int32
        typeParameters:
        - id: T
      overload: Global.EditorGUIUtils.SetArrayLength*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.GUIUtils
    commentId: T:Global.GUIUtils
    language: CSharp
    name:
      CSharp: GUIUtils
      VB: GUIUtils
    nameWithType:
      CSharp: GUIUtils
      VB: GUIUtils
    qualifiedName:
      CSharp: GUIUtils
      VB: GUIUtils
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GUIUtils
      path: ''
      startLine: 4590
    syntax:
      content:
        CSharp: public static class GUIUtils
        VB: Public Module GUIUtils
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Global.GUIUtils.Separate(Rect,System.Int32,System.Int32)
      commentId: M:Global.GUIUtils.Separate(Rect,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Separate(Rect, Int32, Int32)
        VB: Separate(Rect, Int32, Int32)
      nameWithType:
        CSharp: GUIUtils.Separate(Rect, Int32, Int32)
        VB: GUIUtils.Separate(Rect, Int32, Int32)
      qualifiedName:
        CSharp: GUIUtils.Separate(Rect, System.Int32, System.Int32)
        VB: GUIUtils.Separate(Rect, System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Separate
        path: ''
        startLine: 4592
      syntax:
        content:
          CSharp: public static Rect[] Separate(Rect mainRect, int xCount, int yCount)
          VB: Public Shared Function Separate(mainRect As Rect, xCount As Integer, yCount As Integer) As Rect()
        parameters:
        - id: mainRect
          type: Global.Rect
        - id: xCount
          type: System.Int32
        - id: yCount
          type: System.Int32
        return:
          type: Global.Rect[]
      overload: Global.GUIUtils.Separate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Global.GUIUtils.Shrink(Rect,System.Int32)
      commentId: M:Global.GUIUtils.Shrink(Rect,System.Int32)
      language: CSharp
      name:
        CSharp: Shrink(Rect, Int32)
        VB: Shrink(Rect, Int32)
      nameWithType:
        CSharp: GUIUtils.Shrink(Rect, Int32)
        VB: GUIUtils.Shrink(Rect, Int32)
      qualifiedName:
        CSharp: GUIUtils.Shrink(Rect, System.Int32)
        VB: GUIUtils.Shrink(Rect, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Shrink
        path: ''
        startLine: 4610
      syntax:
        content:
          CSharp: public static Rect Shrink(this Rect rect, int size)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Shrink(rect As Rect, size As Integer) As Rect
        parameters:
        - id: rect
          type: Global.Rect
        - id: size
          type: System.Int32
        return:
          type: Global.Rect
      overload: Global.GUIUtils.Shrink*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Global.ModkitPrefabContainerEditor
    commentId: T:Global.ModkitPrefabContainerEditor
    language: CSharp
    name:
      CSharp: ModkitPrefabContainerEditor
      VB: ModkitPrefabContainerEditor
    nameWithType:
      CSharp: ModkitPrefabContainerEditor
      VB: ModkitPrefabContainerEditor
    qualifiedName:
      CSharp: ModkitPrefabContainerEditor
      VB: ModkitPrefabContainerEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ModkitPrefabContainerEditor
      path: ''
      startLine: 4624
    syntax:
      content:
        CSharp: 'public class ModkitPrefabContainerEditor : Editor'
        VB: >-
          Public Class ModkitPrefabContainerEditor

              Inherits Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.ModkitPrefabContainerEditor.OnInspectorGUI
      commentId: M:Global.ModkitPrefabContainerEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: ModkitPrefabContainerEditor.OnInspectorGUI()
        VB: ModkitPrefabContainerEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: ModkitPrefabContainerEditor.OnInspectorGUI()
        VB: ModkitPrefabContainerEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 4627
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Global.ModkitPrefabContainerEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Global.PrefabUsageCaseEditorComponent
    commentId: T:Global.PrefabUsageCaseEditorComponent
    language: CSharp
    name:
      CSharp: PrefabUsageCaseEditorComponent
      VB: PrefabUsageCaseEditorComponent
    nameWithType:
      CSharp: PrefabUsageCaseEditorComponent
      VB: PrefabUsageCaseEditorComponent
    qualifiedName:
      CSharp: PrefabUsageCaseEditorComponent
      VB: PrefabUsageCaseEditorComponent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PrefabUsageCaseEditorComponent
      path: ''
      startLine: 4889
    syntax:
      content:
        CSharp: 'public class PrefabUsageCaseEditorComponent : MonoBehaviour'
        VB: >-
          Public Class PrefabUsageCaseEditorComponent

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PrefabUsageCaseEditorComponent.OnSelected
      commentId: F:Global.PrefabUsageCaseEditorComponent.OnSelected
      language: CSharp
      name:
        CSharp: OnSelected
        VB: OnSelected
      nameWithType:
        CSharp: PrefabUsageCaseEditorComponent.OnSelected
        VB: PrefabUsageCaseEditorComponent.OnSelected
      qualifiedName:
        CSharp: PrefabUsageCaseEditorComponent.OnSelected
        VB: PrefabUsageCaseEditorComponent.OnSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnSelected
        path: ''
        startLine: 4894
      syntax:
        content:
          CSharp: public Action OnSelected
          VB: Public OnSelected As Action
        return:
          type: Global.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PrefabUsageCaseEditorComponent.condition
      commentId: F:Global.PrefabUsageCaseEditorComponent.condition
      language: CSharp
      name:
        CSharp: condition
        VB: condition
      nameWithType:
        CSharp: PrefabUsageCaseEditorComponent.condition
        VB: PrefabUsageCaseEditorComponent.condition
      qualifiedName:
        CSharp: PrefabUsageCaseEditorComponent.condition
        VB: PrefabUsageCaseEditorComponent.condition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: condition
        path: ''
        startLine: 4896
      syntax:
        content:
          CSharp: public OffsetCondition condition
          VB: Public condition As OffsetCondition
        return:
          type: Global.OffsetCondition
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Global.PrefabUsageCaseEditorComponent.color
      commentId: F:Global.PrefabUsageCaseEditorComponent.color
      language: CSharp
      name:
        CSharp: color
        VB: color
      nameWithType:
        CSharp: PrefabUsageCaseEditorComponent.color
        VB: PrefabUsageCaseEditorComponent.color
      qualifiedName:
        CSharp: PrefabUsageCaseEditorComponent.color
        VB: PrefabUsageCaseEditorComponent.color
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: color
        path: ''
        startLine: 4897
      syntax:
        content:
          CSharp: public Color color
          VB: Public color As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Global.PrefabRuleBlockBuilderEditorWindow
    commentId: T:Global.PrefabRuleBlockBuilderEditorWindow
    language: CSharp
    name:
      CSharp: PrefabRuleBlockBuilderEditorWindow
      VB: PrefabRuleBlockBuilderEditorWindow
    nameWithType:
      CSharp: PrefabRuleBlockBuilderEditorWindow
      VB: PrefabRuleBlockBuilderEditorWindow
    qualifiedName:
      CSharp: PrefabRuleBlockBuilderEditorWindow
      VB: PrefabRuleBlockBuilderEditorWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PrefabRuleBlockBuilderEditorWindow
      path: ''
      startLine: 4964
    syntax:
      content:
        CSharp: 'public class PrefabRuleBlockBuilderEditorWindow : EditorWindow'
        VB: >-
          Public Class PrefabRuleBlockBuilderEditorWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Global.PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
      commentId: M:Global.PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
      language: CSharp
      name:
        CSharp: Open(PrefabRuleBlockBuilder)
        VB: Open(PrefabRuleBlockBuilder)
      nameWithType:
        CSharp: PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
        VB: PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
      qualifiedName:
        CSharp: PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
        VB: PrefabRuleBlockBuilderEditorWindow.Open(PrefabRuleBlockBuilder)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Open
        path: ''
        startLine: 4969
      syntax:
        content:
          CSharp: public static void Open(PrefabRuleBlockBuilder bldr)
          VB: Public Shared Sub Open(bldr As PrefabRuleBlockBuilder)
        parameters:
        - id: bldr
          type: Global.PrefabRuleBlockBuilder
      overload: Global.PrefabRuleBlockBuilderEditorWindow.Open*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Global.PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
      commentId: M:Global.PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
      language: CSharp
      name:
        CSharp: SetTarget(PrefabRuleBlockBuilder)
        VB: SetTarget(PrefabRuleBlockBuilder)
      nameWithType:
        CSharp: PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
        VB: PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
      qualifiedName:
        CSharp: PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
        VB: PrefabRuleBlockBuilderEditorWindow.SetTarget(PrefabRuleBlockBuilder)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetTarget
        path: ''
        startLine: 4976
      syntax:
        content:
          CSharp: public void SetTarget(PrefabRuleBlockBuilder bldr)
          VB: Public Sub SetTarget(bldr As PrefabRuleBlockBuilder)
        parameters:
        - id: bldr
          type: Global.PrefabRuleBlockBuilder
      overload: Global.PrefabRuleBlockBuilderEditorWindow.SetTarget*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.AdjustTransformToCurve:
    name:
      CSharp:
      - id: Global.AdjustTransformToCurve
        name: AdjustTransformToCurve
        nameWithType: AdjustTransformToCurve
        qualifiedName: AdjustTransformToCurve
      VB:
      - id: Global.AdjustTransformToCurve
        name: AdjustTransformToCurve
        nameWithType: AdjustTransformToCurve
        qualifiedName: AdjustTransformToCurve
    isDefinition: true
    commentId: T:Global.AdjustTransformToCurve
  Global.AnimalAnimationManager:
    name:
      CSharp:
      - id: Global.AnimalAnimationManager
        name: AnimalAnimationManager
        nameWithType: AnimalAnimationManager
        qualifiedName: AnimalAnimationManager
      VB:
      - id: Global.AnimalAnimationManager
        name: AnimalAnimationManager
        nameWithType: AnimalAnimationManager
        qualifiedName: AnimalAnimationManager
    isDefinition: true
    commentId: T:Global.AnimalAnimationManager
  Global.AutoWrapper:
    name:
      CSharp:
      - id: Global.AutoWrapper
        name: AutoWrapper
        nameWithType: AutoWrapper
        qualifiedName: AutoWrapper
      VB:
      - id: Global.AutoWrapper
        name: AutoWrapper
        nameWithType: AutoWrapper
        qualifiedName: AutoWrapper
    isDefinition: true
    commentId: T:Global.AutoWrapper
  Global.AvatarPart:
    name:
      CSharp:
      - id: Global.AvatarPart
        name: AvatarPart
        nameWithType: AvatarPart
        qualifiedName: AvatarPart
      VB:
      - id: Global.AvatarPart
        name: AvatarPart
        nameWithType: AvatarPart
        qualifiedName: AvatarPart
    isDefinition: true
    commentId: T:Global.AvatarPart
  Global.AvatarPart.MalePrefab:
    name:
      CSharp:
      - id: Global.AvatarPart.MalePrefab
        name: MalePrefab
        nameWithType: AvatarPart.MalePrefab
        qualifiedName: AvatarPart.MalePrefab
      VB:
      - id: Global.AvatarPart.MalePrefab
        name: MalePrefab
        nameWithType: AvatarPart.MalePrefab
        qualifiedName: AvatarPart.MalePrefab
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.MalePrefab
  Global.AvatarPart.FemalePrefab:
    name:
      CSharp:
      - id: Global.AvatarPart.FemalePrefab
        name: FemalePrefab
        nameWithType: AvatarPart.FemalePrefab
        qualifiedName: AvatarPart.FemalePrefab
      VB:
      - id: Global.AvatarPart.FemalePrefab
        name: FemalePrefab
        nameWithType: AvatarPart.FemalePrefab
        qualifiedName: AvatarPart.FemalePrefab
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.FemalePrefab
  Global.AvatarPart.CurvedMaterials:
    name:
      CSharp:
      - id: Global.AvatarPart.CurvedMaterials
        name: CurvedMaterials
        nameWithType: AvatarPart.CurvedMaterials
        qualifiedName: AvatarPart.CurvedMaterials
      VB:
      - id: Global.AvatarPart.CurvedMaterials
        name: CurvedMaterials
        nameWithType: AvatarPart.CurvedMaterials
        qualifiedName: AvatarPart.CurvedMaterials
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.CurvedMaterials
  Global.AvatarPart.UIMaterials:
    name:
      CSharp:
      - id: Global.AvatarPart.UIMaterials
        name: UIMaterials
        nameWithType: AvatarPart.UIMaterials
        qualifiedName: AvatarPart.UIMaterials
      VB:
      - id: Global.AvatarPart.UIMaterials
        name: UIMaterials
        nameWithType: AvatarPart.UIMaterials
        qualifiedName: AvatarPart.UIMaterials
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.UIMaterials
  Global.AvatarPart.UseMaterialTexture:
    name:
      CSharp:
      - id: Global.AvatarPart.UseMaterialTexture
        name: UseMaterialTexture
        nameWithType: AvatarPart.UseMaterialTexture
        qualifiedName: AvatarPart.UseMaterialTexture
      VB:
      - id: Global.AvatarPart.UseMaterialTexture
        name: UseMaterialTexture
        nameWithType: AvatarPart.UseMaterialTexture
        qualifiedName: AvatarPart.UseMaterialTexture
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.UseMaterialTexture
  Global.AvatarPart.firstTint:
    name:
      CSharp:
      - id: Global.AvatarPart.firstTint
        name: firstTint
        nameWithType: AvatarPart.firstTint
        qualifiedName: AvatarPart.firstTint
      VB:
      - id: Global.AvatarPart.firstTint
        name: firstTint
        nameWithType: AvatarPart.firstTint
        qualifiedName: AvatarPart.firstTint
    isDefinition: true
    parent: Global.AvatarPart
    commentId: F:Global.AvatarPart.firstTint
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.UnityEngine.Vector3:
    name:
      CSharp:
      - id: Global.UnityEngine.Vector3
        name: UnityEngine.Vector3
        nameWithType: UnityEngine.Vector3
        qualifiedName: UnityEngine.Vector3
        isExternal: true
      VB:
      - id: Global.UnityEngine.Vector3
        name: UnityEngine.Vector3
        nameWithType: UnityEngine.Vector3
        qualifiedName: UnityEngine.Vector3
        isExternal: true
    isDefinition: true
    commentId: '!:Global.UnityEngine.Vector3'
  Global.Quaternion:
    name:
      CSharp:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Quaternion'
  Global.AvatarAttachedPart:
    name:
      CSharp:
      - id: Global.AvatarAttachedPart
        name: AvatarAttachedPart
        nameWithType: AvatarAttachedPart
        qualifiedName: AvatarAttachedPart
      VB:
      - id: Global.AvatarAttachedPart
        name: AvatarAttachedPart
        nameWithType: AvatarAttachedPart
        qualifiedName: AvatarAttachedPart
    isDefinition: true
    commentId: T:Global.AvatarAttachedPart
  Global.TintType:
    name:
      CSharp:
      - id: Global.TintType
        name: TintType
        nameWithType: TintType
        qualifiedName: TintType
      VB:
      - id: Global.TintType
        name: TintType
        nameWithType: TintType
        qualifiedName: TintType
    isDefinition: true
    commentId: T:Global.TintType
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
  Global.Material[]:
    name:
      CSharp:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Func`1:
    name:
      CSharp:
      - id: Global.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.Func{System.String}:
    name:
      CSharp:
      - id: Global.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Func`1
    commentId: '!:Global.Func{System.String}'
  Global.CustomControlName.LeftMouseName*:
    name:
      CSharp:
      - id: Global.CustomControlName.LeftMouseName*
        name: LeftMouseName
        nameWithType: CustomControlName.LeftMouseName
        qualifiedName: CustomControlName.LeftMouseName
      VB:
      - id: Global.CustomControlName.LeftMouseName*
        name: LeftMouseName
        nameWithType: CustomControlName.LeftMouseName
        qualifiedName: CustomControlName.LeftMouseName
    isDefinition: true
    commentId: Overload:Global.CustomControlName.LeftMouseName
  Global.CustomControlName.RightMouseName*:
    name:
      CSharp:
      - id: Global.CustomControlName.RightMouseName*
        name: RightMouseName
        nameWithType: CustomControlName.RightMouseName
        qualifiedName: CustomControlName.RightMouseName
      VB:
      - id: Global.CustomControlName.RightMouseName*
        name: RightMouseName
        nameWithType: CustomControlName.RightMouseName
        qualifiedName: CustomControlName.RightMouseName
    isDefinition: true
    commentId: Overload:Global.CustomControlName.RightMouseName
  Global.CustomControlName.InteractionName*:
    name:
      CSharp:
      - id: Global.CustomControlName.InteractionName*
        name: InteractionName
        nameWithType: CustomControlName.InteractionName
        qualifiedName: CustomControlName.InteractionName
      VB:
      - id: Global.CustomControlName.InteractionName*
        name: InteractionName
        nameWithType: CustomControlName.InteractionName
        qualifiedName: CustomControlName.InteractionName
    isDefinition: true
    commentId: Overload:Global.CustomControlName.InteractionName
  Global.CustomControlName:
    name:
      CSharp:
      - id: Global.CustomControlName
        name: CustomControlName
        nameWithType: CustomControlName
        qualifiedName: CustomControlName
      VB:
      - id: Global.CustomControlName
        name: CustomControlName
        nameWithType: CustomControlName
        qualifiedName: CustomControlName
    isDefinition: true
    commentId: T:Global.CustomControlName
  Global.EcoLight:
    name:
      CSharp:
      - id: Global.EcoLight
        name: EcoLight
        nameWithType: EcoLight
        qualifiedName: EcoLight
      VB:
      - id: Global.EcoLight
        name: EcoLight
        nameWithType: EcoLight
        qualifiedName: EcoLight
    isDefinition: true
    commentId: T:Global.EcoLight
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Global.EmbeddedLocStringParameter[]:
    name:
      CSharp:
      - id: Global.EmbeddedLocStringParameter
        name: EmbeddedLocStringParameter
        nameWithType: EmbeddedLocStringParameter
        qualifiedName: EmbeddedLocStringParameter
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.EmbeddedLocStringParameter
        name: EmbeddedLocStringParameter
        nameWithType: EmbeddedLocStringParameter
        qualifiedName: EmbeddedLocStringParameter
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.EmbeddedLocString.#ctor*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.#ctor*
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString.EmbeddedLocString
        qualifiedName: EmbeddedLocString.EmbeddedLocString
      VB:
      - id: Global.EmbeddedLocString.#ctor*
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString.EmbeddedLocString
        qualifiedName: EmbeddedLocString.EmbeddedLocString
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.#ctor
  Global.EmbeddedLocString:
    name:
      CSharp:
      - id: Global.EmbeddedLocString
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString
        qualifiedName: EmbeddedLocString
      VB:
      - id: Global.EmbeddedLocString
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString
        qualifiedName: EmbeddedLocString
    isDefinition: true
    commentId: T:Global.EmbeddedLocString
  Global.EmbeddedLocString.op_Implicit*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.op_Implicit*
        name: Implicit
        nameWithType: EmbeddedLocString.Implicit
        qualifiedName: EmbeddedLocString.Implicit
      VB:
      - id: Global.EmbeddedLocString.op_Implicit*
        name: Widening
        nameWithType: EmbeddedLocString.Widening
        qualifiedName: EmbeddedLocString.Widening
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.op_Implicit
  Global.EmbeddedLocString.Localized*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.Localized*
        name: Localized
        nameWithType: EmbeddedLocString.Localized
        qualifiedName: EmbeddedLocString.Localized
      VB:
      - id: Global.EmbeddedLocString.Localized*
        name: Localized
        nameWithType: EmbeddedLocString.Localized
        qualifiedName: EmbeddedLocString.Localized
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.Localized
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  Global.EmbeddedLocString.Equals*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.Equals*
        name: Equals
        nameWithType: EmbeddedLocString.Equals
        qualifiedName: EmbeddedLocString.Equals
      VB:
      - id: Global.EmbeddedLocString.Equals*
        name: Equals
        nameWithType: EmbeddedLocString.Equals
        qualifiedName: EmbeddedLocString.Equals
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.Equals
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  Global.EmbeddedLocString.GetHashCode*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.GetHashCode*
        name: GetHashCode
        nameWithType: EmbeddedLocString.GetHashCode
        qualifiedName: EmbeddedLocString.GetHashCode
      VB:
      - id: Global.EmbeddedLocString.GetHashCode*
        name: GetHashCode
        nameWithType: EmbeddedLocString.GetHashCode
        qualifiedName: EmbeddedLocString.GetHashCode
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.GetHashCode
  Global.EmbeddedLocString.StringParameterized*:
    name:
      CSharp:
      - id: Global.EmbeddedLocString.StringParameterized*
        name: StringParameterized
        nameWithType: EmbeddedLocString.StringParameterized
        qualifiedName: EmbeddedLocString.StringParameterized
      VB:
      - id: Global.EmbeddedLocString.StringParameterized*
        name: StringParameterized
        nameWithType: EmbeddedLocString.StringParameterized
        qualifiedName: EmbeddedLocString.StringParameterized
    isDefinition: true
    commentId: Overload:Global.EmbeddedLocString.StringParameterized
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Global.EmbeddedLocStringParameter:
    name:
      CSharp:
      - id: Global.EmbeddedLocStringParameter
        name: EmbeddedLocStringParameter
        nameWithType: EmbeddedLocStringParameter
        qualifiedName: EmbeddedLocStringParameter
      VB:
      - id: Global.EmbeddedLocStringParameter
        name: EmbeddedLocStringParameter
        nameWithType: EmbeddedLocStringParameter
        qualifiedName: EmbeddedLocStringParameter
    isDefinition: true
    commentId: T:Global.EmbeddedLocStringParameter
  Global.Font[]:
    name:
      CSharp:
      - id: Global.Font
        name: Font
        nameWithType: Font
        qualifiedName: Font
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Font
        name: Font
        nameWithType: Font
        qualifiedName: Font
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.FontContainer:
    name:
      CSharp:
      - id: Global.FontContainer
        name: FontContainer
        nameWithType: FontContainer
        qualifiedName: FontContainer
      VB:
      - id: Global.FontContainer
        name: FontContainer
        nameWithType: FontContainer
        qualifiedName: FontContainer
    isDefinition: true
    commentId: T:Global.FontContainer
  Global.HighlightableObject:
    name:
      CSharp:
      - id: Global.HighlightableObject
        name: HighlightableObject
        nameWithType: HighlightableObject
        qualifiedName: HighlightableObject
      VB:
      - id: Global.HighlightableObject
        name: HighlightableObject
        nameWithType: HighlightableObject
        qualifiedName: HighlightableObject
    isDefinition: true
    commentId: T:Global.HighlightableObject
  Global.StringToLocalize[]:
    name:
      CSharp:
      - id: Global.StringToLocalize
        name: StringToLocalize
        nameWithType: StringToLocalize
        qualifiedName: StringToLocalize
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.StringToLocalize
        name: StringToLocalize
        nameWithType: StringToLocalize
        qualifiedName: StringToLocalize
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ILocalizable.ExtractStrings*:
    name:
      CSharp:
      - id: Global.ILocalizable.ExtractStrings*
        name: ExtractStrings
        nameWithType: ILocalizable.ExtractStrings
        qualifiedName: ILocalizable.ExtractStrings
      VB:
      - id: Global.ILocalizable.ExtractStrings*
        name: ExtractStrings
        nameWithType: ILocalizable.ExtractStrings
        qualifiedName: ILocalizable.ExtractStrings
    isDefinition: true
    commentId: Overload:Global.ILocalizable.ExtractStrings
  Global.Component:
    name:
      CSharp:
      - id: Global.Component
        name: Component
        nameWithType: Component
        qualifiedName: Component
        isExternal: true
      VB:
      - id: Global.Component
        name: Component
        nameWithType: Component
        qualifiedName: Component
        isExternal: true
    isDefinition: true
  Global.ILocalizable.GetComponent*:
    name:
      CSharp:
      - id: Global.ILocalizable.GetComponent*
        name: GetComponent
        nameWithType: ILocalizable.GetComponent
        qualifiedName: ILocalizable.GetComponent
      VB:
      - id: Global.ILocalizable.GetComponent*
        name: GetComponent
        nameWithType: ILocalizable.GetComponent
        qualifiedName: ILocalizable.GetComponent
    isDefinition: true
    commentId: Overload:Global.ILocalizable.GetComponent
  Global.ILocalizable.OnApplyChanges*:
    name:
      CSharp:
      - id: Global.ILocalizable.OnApplyChanges*
        name: OnApplyChanges
        nameWithType: ILocalizable.OnApplyChanges
        qualifiedName: ILocalizable.OnApplyChanges
      VB:
      - id: Global.ILocalizable.OnApplyChanges*
        name: OnApplyChanges
        nameWithType: ILocalizable.OnApplyChanges
        qualifiedName: ILocalizable.OnApplyChanges
    isDefinition: true
    commentId: Overload:Global.ILocalizable.OnApplyChanges
  Global.ILocalizable.Localize*:
    name:
      CSharp:
      - id: Global.ILocalizable.Localize*
        name: Localize
        nameWithType: ILocalizable.Localize
        qualifiedName: ILocalizable.Localize
      VB:
      - id: Global.ILocalizable.Localize*
        name: Localize
        nameWithType: ILocalizable.Localize
        qualifiedName: ILocalizable.Localize
    isDefinition: true
    commentId: Overload:Global.ILocalizable.Localize
  Global.ILocalizable.IsNewlyAdded*:
    name:
      CSharp:
      - id: Global.ILocalizable.IsNewlyAdded*
        name: IsNewlyAdded
        nameWithType: ILocalizable.IsNewlyAdded
        qualifiedName: ILocalizable.IsNewlyAdded
      VB:
      - id: Global.ILocalizable.IsNewlyAdded*
        name: IsNewlyAdded
        nameWithType: ILocalizable.IsNewlyAdded
        qualifiedName: ILocalizable.IsNewlyAdded
    isDefinition: true
    commentId: Overload:Global.ILocalizable.IsNewlyAdded
  Global.ILocalizable:
    name:
      CSharp:
      - id: Global.ILocalizable
        name: ILocalizable
        nameWithType: ILocalizable
        qualifiedName: ILocalizable
      VB:
      - id: Global.ILocalizable
        name: ILocalizable
        nameWithType: ILocalizable
        qualifiedName: ILocalizable
    isDefinition: true
    commentId: T:Global.ILocalizable
  Global.Color[]:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Vector4[]:
    name:
      CSharp:
      - id: Global.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Color:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
    isDefinition: true
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.Ease:
    name:
      CSharp:
      - id: Global.Ease
        name: Ease
        nameWithType: Ease
        qualifiedName: Ease
        isExternal: true
      VB:
      - id: Global.Ease
        name: Ease
        nameWithType: Ease
        qualifiedName: Ease
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Ease'
  Global.LoopType:
    name:
      CSharp:
      - id: Global.LoopType
        name: LoopType
        nameWithType: LoopType
        qualifiedName: LoopType
        isExternal: true
      VB:
      - id: Global.LoopType
        name: LoopType
        nameWithType: LoopType
        qualifiedName: LoopType
        isExternal: true
    isDefinition: true
    commentId: '!:Global.LoopType'
  Global.MaterialEvents.SetColor*:
    name:
      CSharp:
      - id: Global.MaterialEvents.SetColor*
        name: SetColor
        nameWithType: MaterialEvents.SetColor
        qualifiedName: MaterialEvents.SetColor
      VB:
      - id: Global.MaterialEvents.SetColor*
        name: SetColor
        nameWithType: MaterialEvents.SetColor
        qualifiedName: MaterialEvents.SetColor
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.SetColor
  Global.MaterialEvents.TweenColor*:
    name:
      CSharp:
      - id: Global.MaterialEvents.TweenColor*
        name: TweenColor
        nameWithType: MaterialEvents.TweenColor
        qualifiedName: MaterialEvents.TweenColor
      VB:
      - id: Global.MaterialEvents.TweenColor*
        name: TweenColor
        nameWithType: MaterialEvents.TweenColor
        qualifiedName: MaterialEvents.TweenColor
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.TweenColor
  Global.MaterialEvents.StopTweens*:
    name:
      CSharp:
      - id: Global.MaterialEvents.StopTweens*
        name: StopTweens
        nameWithType: MaterialEvents.StopTweens
        qualifiedName: MaterialEvents.StopTweens
      VB:
      - id: Global.MaterialEvents.StopTweens*
        name: StopTweens
        nameWithType: MaterialEvents.StopTweens
        qualifiedName: MaterialEvents.StopTweens
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.StopTweens
  Global.MaterialEvents.TweenFloat*:
    name:
      CSharp:
      - id: Global.MaterialEvents.TweenFloat*
        name: TweenFloat
        nameWithType: MaterialEvents.TweenFloat
        qualifiedName: MaterialEvents.TweenFloat
      VB:
      - id: Global.MaterialEvents.TweenFloat*
        name: TweenFloat
        nameWithType: MaterialEvents.TweenFloat
        qualifiedName: MaterialEvents.TweenFloat
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.TweenFloat
  Global.MaterialEvents.SetFloat*:
    name:
      CSharp:
      - id: Global.MaterialEvents.SetFloat*
        name: SetFloat
        nameWithType: MaterialEvents.SetFloat
        qualifiedName: MaterialEvents.SetFloat
      VB:
      - id: Global.MaterialEvents.SetFloat*
        name: SetFloat
        nameWithType: MaterialEvents.SetFloat
        qualifiedName: MaterialEvents.SetFloat
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.SetFloat
  Global.MaterialEvents.SetVector*:
    name:
      CSharp:
      - id: Global.MaterialEvents.SetVector*
        name: SetVector
        nameWithType: MaterialEvents.SetVector
        qualifiedName: MaterialEvents.SetVector
      VB:
      - id: Global.MaterialEvents.SetVector*
        name: SetVector
        nameWithType: MaterialEvents.SetVector
        qualifiedName: MaterialEvents.SetVector
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.SetVector
  Global.MaterialEvents.SetInt*:
    name:
      CSharp:
      - id: Global.MaterialEvents.SetInt*
        name: SetInt
        nameWithType: MaterialEvents.SetInt
        qualifiedName: MaterialEvents.SetInt
      VB:
      - id: Global.MaterialEvents.SetInt*
        name: SetInt
        nameWithType: MaterialEvents.SetInt
        qualifiedName: MaterialEvents.SetInt
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.SetInt
  Global.MaterialEvents.OnEnable*:
    name:
      CSharp:
      - id: Global.MaterialEvents.OnEnable*
        name: OnEnable
        nameWithType: MaterialEvents.OnEnable
        qualifiedName: MaterialEvents.OnEnable
      VB:
      - id: Global.MaterialEvents.OnEnable*
        name: OnEnable
        nameWithType: MaterialEvents.OnEnable
        qualifiedName: MaterialEvents.OnEnable
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.OnEnable
  Global.MaterialEvents.OnDisable*:
    name:
      CSharp:
      - id: Global.MaterialEvents.OnDisable*
        name: OnDisable
        nameWithType: MaterialEvents.OnDisable
        qualifiedName: MaterialEvents.OnDisable
      VB:
      - id: Global.MaterialEvents.OnDisable*
        name: OnDisable
        nameWithType: MaterialEvents.OnDisable
        qualifiedName: MaterialEvents.OnDisable
    isDefinition: true
    commentId: Overload:Global.MaterialEvents.OnDisable
  Global.MaterialEvents:
    name:
      CSharp:
      - id: Global.MaterialEvents
        name: MaterialEvents
        nameWithType: MaterialEvents
        qualifiedName: MaterialEvents
      VB:
      - id: Global.MaterialEvents
        name: MaterialEvents
        nameWithType: MaterialEvents
        qualifiedName: MaterialEvents
    isDefinition: true
    commentId: T:Global.MaterialEvents
  Global.GameObject[]:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ModkitPrefabContainer:
    name:
      CSharp:
      - id: Global.ModkitPrefabContainer
        name: ModkitPrefabContainer
        nameWithType: ModkitPrefabContainer
        qualifiedName: ModkitPrefabContainer
      VB:
      - id: Global.ModkitPrefabContainer
        name: ModkitPrefabContainer
        nameWithType: ModkitPrefabContainer
        qualifiedName: ModkitPrefabContainer
    isDefinition: true
    commentId: T:Global.ModkitPrefabContainer
  Global.NetObjComponent:
    name:
      CSharp:
      - id: Global.NetObjComponent
        name: NetObjComponent
        nameWithType: NetObjComponent
        qualifiedName: NetObjComponent
      VB:
      - id: Global.NetObjComponent
        name: NetObjComponent
        nameWithType: NetObjComponent
        qualifiedName: NetObjComponent
    isDefinition: true
    commentId: T:Global.NetObjComponent
  Global.OptimizedMonobeh:
    name:
      CSharp:
      - id: Global.OptimizedMonobeh
        name: OptimizedMonobeh
        nameWithType: OptimizedMonobeh
        qualifiedName: OptimizedMonobeh
      VB:
      - id: Global.OptimizedMonobeh
        name: OptimizedMonobeh
        nameWithType: OptimizedMonobeh
        qualifiedName: OptimizedMonobeh
    isDefinition: true
    commentId: T:Global.OptimizedMonobeh
  Global.PerformInteraction:
    name:
      CSharp:
      - id: Global.PerformInteraction
        name: PerformInteraction
        nameWithType: PerformInteraction
        qualifiedName: PerformInteraction
      VB:
      - id: Global.PerformInteraction
        name: PerformInteraction
        nameWithType: PerformInteraction
        qualifiedName: PerformInteraction
    isDefinition: true
    commentId: T:Global.PerformInteraction
  Global.AutohookAttribute:
    name:
      CSharp:
      - id: Global.AutohookAttribute
        name: AutohookAttribute
        nameWithType: AutohookAttribute
        qualifiedName: AutohookAttribute
      VB:
      - id: Global.AutohookAttribute
        name: AutohookAttribute
        nameWithType: AutohookAttribute
        qualifiedName: AutohookAttribute
    isDefinition: true
    commentId: T:Global.AutohookAttribute
  Global.EnumFlagsMaskAttribute:
    name:
      CSharp:
      - id: Global.EnumFlagsMaskAttribute
        name: EnumFlagsMaskAttribute
        nameWithType: EnumFlagsMaskAttribute
        qualifiedName: EnumFlagsMaskAttribute
      VB:
      - id: Global.EnumFlagsMaskAttribute
        name: EnumFlagsMaskAttribute
        nameWithType: EnumFlagsMaskAttribute
        qualifiedName: EnumFlagsMaskAttribute
    isDefinition: true
    commentId: T:Global.EnumFlagsMaskAttribute
  Global.QuaternionToEulerAttribute:
    name:
      CSharp:
      - id: Global.QuaternionToEulerAttribute
        name: QuaternionToEulerAttribute
        nameWithType: QuaternionToEulerAttribute
        qualifiedName: QuaternionToEulerAttribute
      VB:
      - id: Global.QuaternionToEulerAttribute
        name: QuaternionToEulerAttribute
        nameWithType: QuaternionToEulerAttribute
        qualifiedName: QuaternionToEulerAttribute
    isDefinition: true
    commentId: T:Global.QuaternionToEulerAttribute
  Global.SpecificInteractable:
    name:
      CSharp:
      - id: Global.SpecificInteractable
        name: SpecificInteractable
        nameWithType: SpecificInteractable
        qualifiedName: SpecificInteractable
      VB:
      - id: Global.SpecificInteractable
        name: SpecificInteractable
        nameWithType: SpecificInteractable
        qualifiedName: SpecificInteractable
    isDefinition: true
    commentId: T:Global.SpecificInteractable
  Global.StringToLocalize.String*:
    name:
      CSharp:
      - id: Global.StringToLocalize.String*
        name: String
        nameWithType: StringToLocalize.String
        qualifiedName: StringToLocalize.String
      VB:
      - id: Global.StringToLocalize.String*
        name: String
        nameWithType: StringToLocalize.String
        qualifiedName: StringToLocalize.String
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.String
  Global.StringToLocalize.Source*:
    name:
      CSharp:
      - id: Global.StringToLocalize.Source*
        name: Source
        nameWithType: StringToLocalize.Source
        qualifiedName: StringToLocalize.Source
      VB:
      - id: Global.StringToLocalize.Source*
        name: Source
        nameWithType: StringToLocalize.Source
        qualifiedName: StringToLocalize.Source
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.Source
  Global.StringToLocalize.Comment*:
    name:
      CSharp:
      - id: Global.StringToLocalize.Comment*
        name: Comment
        nameWithType: StringToLocalize.Comment
        qualifiedName: StringToLocalize.Comment
      VB:
      - id: Global.StringToLocalize.Comment*
        name: Comment
        nameWithType: StringToLocalize.Comment
        qualifiedName: StringToLocalize.Comment
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.Comment
  Global.StringToLocalize.AutoLoc*:
    name:
      CSharp:
      - id: Global.StringToLocalize.AutoLoc*
        name: AutoLoc
        nameWithType: StringToLocalize.AutoLoc
        qualifiedName: StringToLocalize.AutoLoc
      VB:
      - id: Global.StringToLocalize.AutoLoc*
        name: AutoLoc
        nameWithType: StringToLocalize.AutoLoc
        qualifiedName: StringToLocalize.AutoLoc
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.AutoLoc
  Global.StringToLocalize.HasContextConflict*:
    name:
      CSharp:
      - id: Global.StringToLocalize.HasContextConflict*
        name: HasContextConflict
        nameWithType: StringToLocalize.HasContextConflict
        qualifiedName: StringToLocalize.HasContextConflict
      VB:
      - id: Global.StringToLocalize.HasContextConflict*
        name: HasContextConflict
        nameWithType: StringToLocalize.HasContextConflict
        qualifiedName: StringToLocalize.HasContextConflict
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.HasContextConflict
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.StringToLocalize.ContextConflicts*:
    name:
      CSharp:
      - id: Global.StringToLocalize.ContextConflicts*
        name: ContextConflicts
        nameWithType: StringToLocalize.ContextConflicts
        qualifiedName: StringToLocalize.ContextConflicts
      VB:
      - id: Global.StringToLocalize.ContextConflicts*
        name: ContextConflicts
        nameWithType: StringToLocalize.ContextConflicts
        qualifiedName: StringToLocalize.ContextConflicts
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.ContextConflicts
  Global.StringToLocalize.Replacement*:
    name:
      CSharp:
      - id: Global.StringToLocalize.Replacement*
        name: Replacement
        nameWithType: StringToLocalize.Replacement
        qualifiedName: StringToLocalize.Replacement
      VB:
      - id: Global.StringToLocalize.Replacement*
        name: Replacement
        nameWithType: StringToLocalize.Replacement
        qualifiedName: StringToLocalize.Replacement
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.Replacement
  Global.StringToLocalize.IsPrefab*:
    name:
      CSharp:
      - id: Global.StringToLocalize.IsPrefab*
        name: IsPrefab
        nameWithType: StringToLocalize.IsPrefab
        qualifiedName: StringToLocalize.IsPrefab
      VB:
      - id: Global.StringToLocalize.IsPrefab*
        name: IsPrefab
        nameWithType: StringToLocalize.IsPrefab
        qualifiedName: StringToLocalize.IsPrefab
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.IsPrefab
  System.Char[]:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.StringToLocalize.ValidadeComment*:
    name:
      CSharp:
      - id: Global.StringToLocalize.ValidadeComment*
        name: ValidadeComment
        nameWithType: StringToLocalize.ValidadeComment
        qualifiedName: StringToLocalize.ValidadeComment
      VB:
      - id: Global.StringToLocalize.ValidadeComment*
        name: ValidadeComment
        nameWithType: StringToLocalize.ValidadeComment
        qualifiedName: StringToLocalize.ValidadeComment
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.ValidadeComment
  Global.StringToLocalize:
    name:
      CSharp:
      - id: Global.StringToLocalize
        name: StringToLocalize
        nameWithType: StringToLocalize
        qualifiedName: StringToLocalize
      VB:
      - id: Global.StringToLocalize
        name: StringToLocalize
        nameWithType: StringToLocalize
        qualifiedName: StringToLocalize
    isDefinition: true
    commentId: T:Global.StringToLocalize
  Global.StringToLocalize.op_Implicit*:
    name:
      CSharp:
      - id: Global.StringToLocalize.op_Implicit*
        name: Implicit
        nameWithType: StringToLocalize.Implicit
        qualifiedName: StringToLocalize.Implicit
      VB:
      - id: Global.StringToLocalize.op_Implicit*
        name: Widening
        nameWithType: StringToLocalize.Widening
        qualifiedName: StringToLocalize.Widening
    isDefinition: true
    commentId: Overload:Global.StringToLocalize.op_Implicit
  Global.EmbeddedLocString[]:
    name:
      CSharp:
      - id: Global.EmbeddedLocString
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString
        qualifiedName: EmbeddedLocString
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.EmbeddedLocString
        name: EmbeddedLocString
        nameWithType: EmbeddedLocString
        qualifiedName: EmbeddedLocString
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.StringToLocalizeExtensions.AsStringsToLocalize*:
    name:
      CSharp:
      - id: Global.StringToLocalizeExtensions.AsStringsToLocalize*
        name: AsStringsToLocalize
        nameWithType: StringToLocalizeExtensions.AsStringsToLocalize
        qualifiedName: StringToLocalizeExtensions.AsStringsToLocalize
      VB:
      - id: Global.StringToLocalizeExtensions.AsStringsToLocalize*
        name: AsStringsToLocalize
        nameWithType: StringToLocalizeExtensions.AsStringsToLocalize
        qualifiedName: StringToLocalizeExtensions.AsStringsToLocalize
    isDefinition: true
    commentId: Overload:Global.StringToLocalizeExtensions.AsStringsToLocalize
  Global.StringToLocalizeExtensions:
    name:
      CSharp:
      - id: Global.StringToLocalizeExtensions
        name: StringToLocalizeExtensions
        nameWithType: StringToLocalizeExtensions
        qualifiedName: StringToLocalizeExtensions
      VB:
      - id: Global.StringToLocalizeExtensions
        name: StringToLocalizeExtensions
        nameWithType: StringToLocalizeExtensions
        qualifiedName: StringToLocalizeExtensions
    isDefinition: true
    commentId: T:Global.StringToLocalizeExtensions
  Global.SubscribableBehavior:
    name:
      CSharp:
      - id: Global.SubscribableBehavior
        name: SubscribableBehavior
        nameWithType: SubscribableBehavior
        qualifiedName: SubscribableBehavior
      VB:
      - id: Global.SubscribableBehavior
        name: SubscribableBehavior
        nameWithType: SubscribableBehavior
        qualifiedName: SubscribableBehavior
    isDefinition: true
    commentId: T:Global.SubscribableBehavior
  Global.AxisSyncMode:
    name:
      CSharp:
      - id: Global.AxisSyncMode
        name: AxisSyncMode
        nameWithType: AxisSyncMode
        qualifiedName: AxisSyncMode
      VB:
      - id: Global.AxisSyncMode
        name: AxisSyncMode
        nameWithType: AxisSyncMode
        qualifiedName: AxisSyncMode
    isDefinition: true
    commentId: T:Global.AxisSyncMode
  Global.SyncPhysics:
    name:
      CSharp:
      - id: Global.SyncPhysics
        name: SyncPhysics
        nameWithType: SyncPhysics
        qualifiedName: SyncPhysics
      VB:
      - id: Global.SyncPhysics
        name: SyncPhysics
        nameWithType: SyncPhysics
        qualifiedName: SyncPhysics
    isDefinition: true
    commentId: T:Global.SyncPhysics
  Global.UnityEngine.Vector2:
    name:
      CSharp:
      - id: Global.UnityEngine.Vector2
        name: UnityEngine.Vector2
        nameWithType: UnityEngine.Vector2
        qualifiedName: UnityEngine.Vector2
        isExternal: true
      VB:
      - id: Global.UnityEngine.Vector2
        name: UnityEngine.Vector2
        nameWithType: UnityEngine.Vector2
        qualifiedName: UnityEngine.Vector2
        isExternal: true
    isDefinition: true
    commentId: '!:Global.UnityEngine.Vector2'
  Global.TextureScroll.StartScrolling*:
    name:
      CSharp:
      - id: Global.TextureScroll.StartScrolling*
        name: StartScrolling
        nameWithType: TextureScroll.StartScrolling
        qualifiedName: TextureScroll.StartScrolling
      VB:
      - id: Global.TextureScroll.StartScrolling*
        name: StartScrolling
        nameWithType: TextureScroll.StartScrolling
        qualifiedName: TextureScroll.StartScrolling
    isDefinition: true
    commentId: Overload:Global.TextureScroll.StartScrolling
  Global.TextureScroll.StopScrolling*:
    name:
      CSharp:
      - id: Global.TextureScroll.StopScrolling*
        name: StopScrolling
        nameWithType: TextureScroll.StopScrolling
        qualifiedName: TextureScroll.StopScrolling
      VB:
      - id: Global.TextureScroll.StopScrolling*
        name: StopScrolling
        nameWithType: TextureScroll.StopScrolling
        qualifiedName: TextureScroll.StopScrolling
    isDefinition: true
    commentId: Overload:Global.TextureScroll.StopScrolling
  Global.TextureScroll:
    name:
      CSharp:
      - id: Global.TextureScroll
        name: TextureScroll
        nameWithType: TextureScroll
        qualifiedName: TextureScroll
      VB:
      - id: Global.TextureScroll
        name: TextureScroll
        nameWithType: TextureScroll
        qualifiedName: TextureScroll
    isDefinition: true
    commentId: T:Global.TextureScroll
  Global.ToolInteraction.ToolInputState:
    name:
      CSharp:
      - id: Global.ToolInteraction.ToolInputState
        name: ToolInteraction.ToolInputState
        nameWithType: ToolInteraction.ToolInputState
        qualifiedName: ToolInteraction.ToolInputState
      VB:
      - id: Global.ToolInteraction.ToolInputState
        name: ToolInteraction.ToolInputState
        nameWithType: ToolInteraction.ToolInputState
        qualifiedName: ToolInteraction.ToolInputState
    isDefinition: true
    commentId: T:Global.ToolInteraction.ToolInputState
  Global.Transform[]:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ToolInteraction:
    name:
      CSharp:
      - id: Global.ToolInteraction
        name: ToolInteraction
        nameWithType: ToolInteraction
        qualifiedName: ToolInteraction
      VB:
      - id: Global.ToolInteraction
        name: ToolInteraction
        nameWithType: ToolInteraction
        qualifiedName: ToolInteraction
    isDefinition: true
    commentId: T:Global.ToolInteraction
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
  Global.UnityAnimal:
    name:
      CSharp:
      - id: Global.UnityAnimal
        name: UnityAnimal
        nameWithType: UnityAnimal
        qualifiedName: UnityAnimal
      VB:
      - id: Global.UnityAnimal
        name: UnityAnimal
        nameWithType: UnityAnimal
        qualifiedName: UnityAnimal
    isDefinition: true
    commentId: T:Global.UnityAnimal
  Global.MonoBehaviour:
    name:
      CSharp:
      - id: Global.MonoBehaviour
        name: MonoBehaviour
        nameWithType: MonoBehaviour
        qualifiedName: MonoBehaviour
        isExternal: true
      VB:
      - id: Global.MonoBehaviour
        name: MonoBehaviour
        nameWithType: MonoBehaviour
        qualifiedName: MonoBehaviour
        isExternal: true
    isDefinition: true
    commentId: '!:Global.MonoBehaviour'
  Global.UnityObjectExtensions.GetScenePath*:
    name:
      CSharp:
      - id: Global.UnityObjectExtensions.GetScenePath*
        name: GetScenePath
        nameWithType: UnityObjectExtensions.GetScenePath
        qualifiedName: UnityObjectExtensions.GetScenePath
      VB:
      - id: Global.UnityObjectExtensions.GetScenePath*
        name: GetScenePath
        nameWithType: UnityObjectExtensions.GetScenePath
        qualifiedName: UnityObjectExtensions.GetScenePath
    isDefinition: true
    commentId: Overload:Global.UnityObjectExtensions.GetScenePath
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Global.UnityObjectExtensions.GetOrAddComponent*:
    name:
      CSharp:
      - id: Global.UnityObjectExtensions.GetOrAddComponent*
        name: GetOrAddComponent
        nameWithType: UnityObjectExtensions.GetOrAddComponent
        qualifiedName: UnityObjectExtensions.GetOrAddComponent
      VB:
      - id: Global.UnityObjectExtensions.GetOrAddComponent*
        name: GetOrAddComponent
        nameWithType: UnityObjectExtensions.GetOrAddComponent
        qualifiedName: UnityObjectExtensions.GetOrAddComponent
    isDefinition: true
    commentId: Overload:Global.UnityObjectExtensions.GetOrAddComponent
  Global.Type:
    name:
      CSharp:
      - id: Global.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
      VB:
      - id: Global.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Type'
  Global.UnityObjectExtensions.HasComponent*:
    name:
      CSharp:
      - id: Global.UnityObjectExtensions.HasComponent*
        name: HasComponent
        nameWithType: UnityObjectExtensions.HasComponent
        qualifiedName: UnityObjectExtensions.HasComponent
      VB:
      - id: Global.UnityObjectExtensions.HasComponent*
        name: HasComponent
        nameWithType: UnityObjectExtensions.HasComponent
        qualifiedName: UnityObjectExtensions.HasComponent
    isDefinition: true
    commentId: Overload:Global.UnityObjectExtensions.HasComponent
  Global.UnityObjectExtensions:
    name:
      CSharp:
      - id: Global.UnityObjectExtensions
        name: UnityObjectExtensions
        nameWithType: UnityObjectExtensions
        qualifiedName: UnityObjectExtensions
      VB:
      - id: Global.UnityObjectExtensions
        name: UnityObjectExtensions
        nameWithType: UnityObjectExtensions
        qualifiedName: UnityObjectExtensions
    isDefinition: true
    commentId: T:Global.UnityObjectExtensions
  Global.WaitForGround:
    name:
      CSharp:
      - id: Global.WaitForGround
        name: WaitForGround
        nameWithType: WaitForGround
        qualifiedName: WaitForGround
      VB:
      - id: Global.WaitForGround
        name: WaitForGround
        nameWithType: WaitForGround
        qualifiedName: WaitForGround
    isDefinition: true
    commentId: T:Global.WaitForGround
  Global.ChangedStringStateEvent:
    name:
      CSharp:
      - id: Global.ChangedStringStateEvent
        name: ChangedStringStateEvent
        nameWithType: ChangedStringStateEvent
        qualifiedName: ChangedStringStateEvent
      VB:
      - id: Global.ChangedStringStateEvent
        name: ChangedStringStateEvent
        nameWithType: ChangedStringStateEvent
        qualifiedName: ChangedStringStateEvent
    isDefinition: true
    commentId: T:Global.ChangedStringStateEvent
  Global.ChangedFloatStateEvent:
    name:
      CSharp:
      - id: Global.ChangedFloatStateEvent
        name: ChangedFloatStateEvent
        nameWithType: ChangedFloatStateEvent
        qualifiedName: ChangedFloatStateEvent
      VB:
      - id: Global.ChangedFloatStateEvent
        name: ChangedFloatStateEvent
        nameWithType: ChangedFloatStateEvent
        qualifiedName: ChangedFloatStateEvent
    isDefinition: true
    commentId: T:Global.ChangedFloatStateEvent
  Global.ChangedStateEvent:
    name:
      CSharp:
      - id: Global.ChangedStateEvent
        name: ChangedStateEvent
        nameWithType: ChangedStateEvent
        qualifiedName: ChangedStateEvent
      VB:
      - id: Global.ChangedStateEvent
        name: ChangedStateEvent
        nameWithType: ChangedStateEvent
        qualifiedName: ChangedStateEvent
    isDefinition: true
    commentId: T:Global.ChangedStateEvent
  Global.SetStateEvent:
    name:
      CSharp:
      - id: Global.SetStateEvent
        name: SetStateEvent
        nameWithType: SetStateEvent
        qualifiedName: SetStateEvent
      VB:
      - id: Global.SetStateEvent
        name: SetStateEvent
        nameWithType: SetStateEvent
        qualifiedName: SetStateEvent
    isDefinition: true
    commentId: T:Global.SetStateEvent
  Global.SetStateEvent[]:
    name:
      CSharp:
      - id: Global.SetStateEvent
        name: SetStateEvent
        nameWithType: SetStateEvent
        qualifiedName: SetStateEvent
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.SetStateEvent
        name: SetStateEvent
        nameWithType: SetStateEvent
        qualifiedName: SetStateEvent
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ChangedStateEvent[]:
    name:
      CSharp:
      - id: Global.ChangedStateEvent
        name: ChangedStateEvent
        nameWithType: ChangedStateEvent
        qualifiedName: ChangedStateEvent
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.ChangedStateEvent
        name: ChangedStateEvent
        nameWithType: ChangedStateEvent
        qualifiedName: ChangedStateEvent
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ChangedStringStateEvent[]:
    name:
      CSharp:
      - id: Global.ChangedStringStateEvent
        name: ChangedStringStateEvent
        nameWithType: ChangedStringStateEvent
        qualifiedName: ChangedStringStateEvent
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.ChangedStringStateEvent
        name: ChangedStringStateEvent
        nameWithType: ChangedStringStateEvent
        qualifiedName: ChangedStringStateEvent
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.ChangedFloatStateEvent[]:
    name:
      CSharp:
      - id: Global.ChangedFloatStateEvent
        name: ChangedFloatStateEvent
        nameWithType: ChangedFloatStateEvent
        qualifiedName: ChangedFloatStateEvent
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.ChangedFloatStateEvent
        name: ChangedFloatStateEvent
        nameWithType: ChangedFloatStateEvent
        qualifiedName: ChangedFloatStateEvent
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  Global.WorldObject:
    name:
      CSharp:
      - id: Global.WorldObject
        name: WorldObject
        nameWithType: WorldObject
        qualifiedName: WorldObject
      VB:
      - id: Global.WorldObject
        name: WorldObject
        nameWithType: WorldObject
        qualifiedName: WorldObject
    isDefinition: true
    commentId: T:Global.WorldObject
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Animator:
    name:
      CSharp:
      - id: Global.Animator
        name: Animator
        nameWithType: Animator
        qualifiedName: Animator
        isExternal: true
      VB:
      - id: Global.Animator
        name: Animator
        nameWithType: Animator
        qualifiedName: Animator
        isExternal: true
    isDefinition: true
  Global.AnimatorStateInfo:
    name:
      CSharp:
      - id: Global.AnimatorStateInfo
        name: AnimatorStateInfo
        nameWithType: AnimatorStateInfo
        qualifiedName: AnimatorStateInfo
        isExternal: true
      VB:
      - id: Global.AnimatorStateInfo
        name: AnimatorStateInfo
        nameWithType: AnimatorStateInfo
        qualifiedName: AnimatorStateInfo
        isExternal: true
    isDefinition: true
  Global.BlendTreeRandomizer.OnStateEnter*:
    name:
      CSharp:
      - id: Global.BlendTreeRandomizer.OnStateEnter*
        name: OnStateEnter
        nameWithType: BlendTreeRandomizer.OnStateEnter
        qualifiedName: BlendTreeRandomizer.OnStateEnter
      VB:
      - id: Global.BlendTreeRandomizer.OnStateEnter*
        name: OnStateEnter
        nameWithType: BlendTreeRandomizer.OnStateEnter
        qualifiedName: BlendTreeRandomizer.OnStateEnter
    isDefinition: true
    commentId: Overload:Global.BlendTreeRandomizer.OnStateEnter
  Global.BlendTreeRandomizer:
    name:
      CSharp:
      - id: Global.BlendTreeRandomizer
        name: BlendTreeRandomizer
        nameWithType: BlendTreeRandomizer
        qualifiedName: BlendTreeRandomizer
      VB:
      - id: Global.BlendTreeRandomizer
        name: BlendTreeRandomizer
        nameWithType: BlendTreeRandomizer
        qualifiedName: BlendTreeRandomizer
    isDefinition: true
    commentId: T:Global.BlendTreeRandomizer
  Global.SetStateTrackerIDOnStateEnter.OnStateEnter*:
    name:
      CSharp:
      - id: Global.SetStateTrackerIDOnStateEnter.OnStateEnter*
        name: OnStateEnter
        nameWithType: SetStateTrackerIDOnStateEnter.OnStateEnter
        qualifiedName: SetStateTrackerIDOnStateEnter.OnStateEnter
      VB:
      - id: Global.SetStateTrackerIDOnStateEnter.OnStateEnter*
        name: OnStateEnter
        nameWithType: SetStateTrackerIDOnStateEnter.OnStateEnter
        qualifiedName: SetStateTrackerIDOnStateEnter.OnStateEnter
    isDefinition: true
    commentId: Overload:Global.SetStateTrackerIDOnStateEnter.OnStateEnter
  Global.SetStateTrackerIDOnStateEnter:
    name:
      CSharp:
      - id: Global.SetStateTrackerIDOnStateEnter
        name: SetStateTrackerIDOnStateEnter
        nameWithType: SetStateTrackerIDOnStateEnter
        qualifiedName: SetStateTrackerIDOnStateEnter
      VB:
      - id: Global.SetStateTrackerIDOnStateEnter
        name: SetStateTrackerIDOnStateEnter
        nameWithType: SetStateTrackerIDOnStateEnter
        qualifiedName: SetStateTrackerIDOnStateEnter
    isDefinition: true
    commentId: T:Global.SetStateTrackerIDOnStateEnter
  Global.StateMachineCountdown.OnStateEnter*:
    name:
      CSharp:
      - id: Global.StateMachineCountdown.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineCountdown.OnStateEnter
        qualifiedName: StateMachineCountdown.OnStateEnter
      VB:
      - id: Global.StateMachineCountdown.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineCountdown.OnStateEnter
        qualifiedName: StateMachineCountdown.OnStateEnter
    isDefinition: true
    commentId: Overload:Global.StateMachineCountdown.OnStateEnter
  Global.StateMachineCountdown.OnStateUpdate*:
    name:
      CSharp:
      - id: Global.StateMachineCountdown.OnStateUpdate*
        name: OnStateUpdate
        nameWithType: StateMachineCountdown.OnStateUpdate
        qualifiedName: StateMachineCountdown.OnStateUpdate
      VB:
      - id: Global.StateMachineCountdown.OnStateUpdate*
        name: OnStateUpdate
        nameWithType: StateMachineCountdown.OnStateUpdate
        qualifiedName: StateMachineCountdown.OnStateUpdate
    isDefinition: true
    commentId: Overload:Global.StateMachineCountdown.OnStateUpdate
  Global.StateMachineCountdown:
    name:
      CSharp:
      - id: Global.StateMachineCountdown
        name: StateMachineCountdown
        nameWithType: StateMachineCountdown
        qualifiedName: StateMachineCountdown
      VB:
      - id: Global.StateMachineCountdown
        name: StateMachineCountdown
        nameWithType: StateMachineCountdown
        qualifiedName: StateMachineCountdown
    isDefinition: true
    commentId: T:Global.StateMachineCountdown
  Global.StateMachineFloatRandomizer.OnStateEnter*:
    name:
      CSharp:
      - id: Global.StateMachineFloatRandomizer.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineFloatRandomizer.OnStateEnter
        qualifiedName: StateMachineFloatRandomizer.OnStateEnter
      VB:
      - id: Global.StateMachineFloatRandomizer.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineFloatRandomizer.OnStateEnter
        qualifiedName: StateMachineFloatRandomizer.OnStateEnter
    isDefinition: true
    commentId: Overload:Global.StateMachineFloatRandomizer.OnStateEnter
  Global.StateMachineFloatRandomizer:
    name:
      CSharp:
      - id: Global.StateMachineFloatRandomizer
        name: StateMachineFloatRandomizer
        nameWithType: StateMachineFloatRandomizer
        qualifiedName: StateMachineFloatRandomizer
      VB:
      - id: Global.StateMachineFloatRandomizer
        name: StateMachineFloatRandomizer
        nameWithType: StateMachineFloatRandomizer
        qualifiedName: StateMachineFloatRandomizer
    isDefinition: true
    commentId: T:Global.StateMachineFloatRandomizer
  Global.StateMachineRandomRange.OnStateEnter*:
    name:
      CSharp:
      - id: Global.StateMachineRandomRange.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineRandomRange.OnStateEnter
        qualifiedName: StateMachineRandomRange.OnStateEnter
      VB:
      - id: Global.StateMachineRandomRange.OnStateEnter*
        name: OnStateEnter
        nameWithType: StateMachineRandomRange.OnStateEnter
        qualifiedName: StateMachineRandomRange.OnStateEnter
    isDefinition: true
    commentId: Overload:Global.StateMachineRandomRange.OnStateEnter
  Global.StateMachineRandomRange:
    name:
      CSharp:
      - id: Global.StateMachineRandomRange
        name: StateMachineRandomRange
        nameWithType: StateMachineRandomRange
        qualifiedName: StateMachineRandomRange
      VB:
      - id: Global.StateMachineRandomRange
        name: StateMachineRandomRange
        nameWithType: StateMachineRandomRange
        qualifiedName: StateMachineRandomRange
    isDefinition: true
    commentId: T:Global.StateMachineRandomRange
  Global.Rect:
    name:
      CSharp:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
  Global.SerializedProperty:
    name:
      CSharp:
      - id: Global.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      VB:
      - id: Global.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
    isDefinition: true
  Global.GUIContent:
    name:
      CSharp:
      - id: Global.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      VB:
      - id: Global.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
    isDefinition: true
  Global.AutohookPropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: Global.AutohookPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: AutohookPropertyDrawer.OnGUI
        qualifiedName: AutohookPropertyDrawer.OnGUI
      VB:
      - id: Global.AutohookPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: AutohookPropertyDrawer.OnGUI
        qualifiedName: AutohookPropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Global.AutohookPropertyDrawer.OnGUI
  Global.AutohookPropertyDrawer.GetPropertyHeight*:
    name:
      CSharp:
      - id: Global.AutohookPropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: AutohookPropertyDrawer.GetPropertyHeight
        qualifiedName: AutohookPropertyDrawer.GetPropertyHeight
      VB:
      - id: Global.AutohookPropertyDrawer.GetPropertyHeight*
        name: GetPropertyHeight
        nameWithType: AutohookPropertyDrawer.GetPropertyHeight
        qualifiedName: AutohookPropertyDrawer.GetPropertyHeight
    isDefinition: true
    commentId: Overload:Global.AutohookPropertyDrawer.GetPropertyHeight
  Global.AutohookPropertyDrawer:
    name:
      CSharp:
      - id: Global.AutohookPropertyDrawer
        name: AutohookPropertyDrawer
        nameWithType: AutohookPropertyDrawer
        qualifiedName: AutohookPropertyDrawer
      VB:
      - id: Global.AutohookPropertyDrawer
        name: AutohookPropertyDrawer
        nameWithType: AutohookPropertyDrawer
        qualifiedName: AutohookPropertyDrawer
    isDefinition: true
    commentId: T:Global.AutohookPropertyDrawer
  Global.EnumFlagsMaskAttributeDrawer.OnGUI*:
    name:
      CSharp:
      - id: Global.EnumFlagsMaskAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: EnumFlagsMaskAttributeDrawer.OnGUI
        qualifiedName: EnumFlagsMaskAttributeDrawer.OnGUI
      VB:
      - id: Global.EnumFlagsMaskAttributeDrawer.OnGUI*
        name: OnGUI
        nameWithType: EnumFlagsMaskAttributeDrawer.OnGUI
        qualifiedName: EnumFlagsMaskAttributeDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Global.EnumFlagsMaskAttributeDrawer.OnGUI
  Global.EnumFlagsMaskAttributeDrawer:
    name:
      CSharp:
      - id: Global.EnumFlagsMaskAttributeDrawer
        name: EnumFlagsMaskAttributeDrawer
        nameWithType: EnumFlagsMaskAttributeDrawer
        qualifiedName: EnumFlagsMaskAttributeDrawer
      VB:
      - id: Global.EnumFlagsMaskAttributeDrawer
        name: EnumFlagsMaskAttributeDrawer
        nameWithType: EnumFlagsMaskAttributeDrawer
        qualifiedName: EnumFlagsMaskAttributeDrawer
    isDefinition: true
    commentId: T:Global.EnumFlagsMaskAttributeDrawer
  Global.ModExporter.ShowWindow*:
    name:
      CSharp:
      - id: Global.ModExporter.ShowWindow*
        name: ShowWindow
        nameWithType: ModExporter.ShowWindow
        qualifiedName: ModExporter.ShowWindow
      VB:
      - id: Global.ModExporter.ShowWindow*
        name: ShowWindow
        nameWithType: ModExporter.ShowWindow
        qualifiedName: ModExporter.ShowWindow
    isDefinition: true
    commentId: Overload:Global.ModExporter.ShowWindow
  Global.ModExporter.OnGUI*:
    name:
      CSharp:
      - id: Global.ModExporter.OnGUI*
        name: OnGUI
        nameWithType: ModExporter.OnGUI
        qualifiedName: ModExporter.OnGUI
      VB:
      - id: Global.ModExporter.OnGUI*
        name: OnGUI
        nameWithType: ModExporter.OnGUI
        qualifiedName: ModExporter.OnGUI
    isDefinition: true
    commentId: Overload:Global.ModExporter.OnGUI
  Global.ModExporter.BuildSceneBundle*:
    name:
      CSharp:
      - id: Global.ModExporter.BuildSceneBundle*
        name: BuildSceneBundle
        nameWithType: ModExporter.BuildSceneBundle
        qualifiedName: ModExporter.BuildSceneBundle
      VB:
      - id: Global.ModExporter.BuildSceneBundle*
        name: BuildSceneBundle
        nameWithType: ModExporter.BuildSceneBundle
        qualifiedName: ModExporter.BuildSceneBundle
    isDefinition: true
    commentId: Overload:Global.ModExporter.BuildSceneBundle
  Global.ModExporter:
    name:
      CSharp:
      - id: Global.ModExporter
        name: ModExporter
        nameWithType: ModExporter
        qualifiedName: ModExporter
      VB:
      - id: Global.ModExporter
        name: ModExporter
        nameWithType: ModExporter
        qualifiedName: ModExporter
    isDefinition: true
    commentId: T:Global.ModExporter
  Global.QuaternionToEulerPropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: Global.QuaternionToEulerPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: QuaternionToEulerPropertyDrawer.OnGUI
        qualifiedName: QuaternionToEulerPropertyDrawer.OnGUI
      VB:
      - id: Global.QuaternionToEulerPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: QuaternionToEulerPropertyDrawer.OnGUI
        qualifiedName: QuaternionToEulerPropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:Global.QuaternionToEulerPropertyDrawer.OnGUI
  Global.QuaternionToEulerPropertyDrawer:
    name:
      CSharp:
      - id: Global.QuaternionToEulerPropertyDrawer
        name: QuaternionToEulerPropertyDrawer
        nameWithType: QuaternionToEulerPropertyDrawer
        qualifiedName: QuaternionToEulerPropertyDrawer
      VB:
      - id: Global.QuaternionToEulerPropertyDrawer
        name: QuaternionToEulerPropertyDrawer
        nameWithType: QuaternionToEulerPropertyDrawer
        qualifiedName: QuaternionToEulerPropertyDrawer
    isDefinition: true
    commentId: T:Global.QuaternionToEulerPropertyDrawer
  Global.WorldObjectEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: Global.WorldObjectEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: WorldObjectEditor.OnInspectorGUI
        qualifiedName: WorldObjectEditor.OnInspectorGUI
      VB:
      - id: Global.WorldObjectEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: WorldObjectEditor.OnInspectorGUI
        qualifiedName: WorldObjectEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Global.WorldObjectEditor.OnInspectorGUI
  Global.WorldObjectEditor:
    name:
      CSharp:
      - id: Global.WorldObjectEditor
        name: WorldObjectEditor
        nameWithType: WorldObjectEditor
        qualifiedName: WorldObjectEditor
      VB:
      - id: Global.WorldObjectEditor
        name: WorldObjectEditor
        nameWithType: WorldObjectEditor
        qualifiedName: WorldObjectEditor
    isDefinition: true
    commentId: T:Global.WorldObjectEditor
  Global.OverrideMaterialTransparency:
    name:
      CSharp:
      - id: Global.OverrideMaterialTransparency
        name: OverrideMaterialTransparency
        nameWithType: OverrideMaterialTransparency
        qualifiedName: OverrideMaterialTransparency
      VB:
      - id: Global.OverrideMaterialTransparency
        name: OverrideMaterialTransparency
        nameWithType: OverrideMaterialTransparency
        qualifiedName: OverrideMaterialTransparency
    isDefinition: true
    commentId: T:Global.OverrideMaterialTransparency
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  Global.BlockBuilder:
    name:
      CSharp:
      - id: Global.BlockBuilder
        name: BlockBuilder
        nameWithType: BlockBuilder
        qualifiedName: BlockBuilder
      VB:
      - id: Global.BlockBuilder
        name: BlockBuilder
        nameWithType: BlockBuilder
        qualifiedName: BlockBuilder
    isDefinition: true
    commentId: T:Global.BlockBuilder
  Global.Material:
    name:
      CSharp:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
      VB:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
    isDefinition: true
  Block.Material:
    commentId: F:Block.Material
  Block.IsMaterialTransparent:
    commentId: F:Block.IsMaterialTransparent
  Block.OverrideMainMaterialTransparency:
    commentId: F:Block.OverrideMainMaterialTransparency
  Block.Materials:
    commentId: F:Block.Materials
  Global.OverrideMaterialTransparency[]:
    name:
      CSharp:
      - id: Global.OverrideMaterialTransparency
        name: OverrideMaterialTransparency
        nameWithType: OverrideMaterialTransparency
        qualifiedName: OverrideMaterialTransparency
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.OverrideMaterialTransparency
        name: OverrideMaterialTransparency
        nameWithType: OverrideMaterialTransparency
        qualifiedName: OverrideMaterialTransparency
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.UnityEngine.Rendering.ShadowCastingMode:
    name:
      CSharp:
      - id: Global.UnityEngine.Rendering.ShadowCastingMode
        name: UnityEngine.Rendering.ShadowCastingMode
        nameWithType: UnityEngine.Rendering.ShadowCastingMode
        qualifiedName: UnityEngine.Rendering.ShadowCastingMode
        isExternal: true
      VB:
      - id: Global.UnityEngine.Rendering.ShadowCastingMode
        name: UnityEngine.Rendering.ShadowCastingMode
        nameWithType: UnityEngine.Rendering.ShadowCastingMode
        qualifiedName: UnityEngine.Rendering.ShadowCastingMode
        isExternal: true
    isDefinition: true
    commentId: '!:Global.UnityEngine.Rendering.ShadowCastingMode'
  Global.MaterialInfo:
    name:
      CSharp:
      - id: Global.MaterialInfo
        name: MaterialInfo
        nameWithType: MaterialInfo
        qualifiedName: MaterialInfo
        isExternal: true
      VB:
      - id: Global.MaterialInfo
        name: MaterialInfo
        nameWithType: MaterialInfo
        qualifiedName: MaterialInfo
        isExternal: true
    isDefinition: true
    commentId: '!:Global.MaterialInfo'
  Global.MaterialInfo[]:
    name:
      CSharp:
      - id: Global.MaterialInfo
        name: MaterialInfo
        nameWithType: MaterialInfo
        qualifiedName: MaterialInfo
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.MaterialInfo
        name: MaterialInfo
        nameWithType: MaterialInfo
        qualifiedName: MaterialInfo
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.LocString:
    name:
      CSharp:
      - id: Global.LocString
        name: LocString
        nameWithType: LocString
        qualifiedName: LocString
        isExternal: true
      VB:
      - id: Global.LocString
        name: LocString
        nameWithType: LocString
        qualifiedName: LocString
        isExternal: true
    isDefinition: true
    commentId: '!:Global.LocString'
  Global.List`1:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.List{System.Boolean}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{System.Boolean}'
  Global.Block.CanBuild*:
    name:
      CSharp:
      - id: Global.Block.CanBuild*
        name: CanBuild
        nameWithType: Block.CanBuild
        qualifiedName: Block.CanBuild
      VB:
      - id: Global.Block.CanBuild*
        name: CanBuild
        nameWithType: Block.CanBuild
        qualifiedName: Block.CanBuild
    isDefinition: true
    commentId: Overload:Global.Block.CanBuild
  Global.Block:
    name:
      CSharp:
      - id: Global.Block
        name: Block
        nameWithType: Block
        qualifiedName: Block
      VB:
      - id: Global.Block
        name: Block
        nameWithType: Block
        qualifiedName: Block
    isDefinition: true
    commentId: T:Global.Block
  Global.List{Block}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Block
        name: Block
        nameWithType: Block
        qualifiedName: Block
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Block
        name: Block
        nameWithType: Block
        qualifiedName: Block
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{Block}'
  Global.BlockSet:
    name:
      CSharp:
      - id: Global.BlockSet
        name: BlockSet
        nameWithType: BlockSet
        qualifiedName: BlockSet
      VB:
      - id: Global.BlockSet
        name: BlockSet
        nameWithType: BlockSet
        qualifiedName: BlockSet
    isDefinition: true
    commentId: T:Global.BlockSet
  Global.BlockSet[]:
    name:
      CSharp:
      - id: Global.BlockSet
        name: BlockSet
        nameWithType: BlockSet
        qualifiedName: BlockSet
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.BlockSet
        name: BlockSet
        nameWithType: BlockSet
        qualifiedName: BlockSet
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.BlockSetContainer:
    name:
      CSharp:
      - id: Global.BlockSetContainer
        name: BlockSetContainer
        nameWithType: BlockSetContainer
        qualifiedName: BlockSetContainer
      VB:
      - id: Global.BlockSetContainer
        name: BlockSetContainer
        nameWithType: BlockSetContainer
        qualifiedName: BlockSetContainer
    isDefinition: true
    commentId: T:Global.BlockSetContainer
  Global.BlockRule.RuleType:
    name:
      CSharp:
      - id: Global.BlockRule.RuleType
        name: BlockRule.RuleType
        nameWithType: BlockRule.RuleType
        qualifiedName: BlockRule.RuleType
      VB:
      - id: Global.BlockRule.RuleType
        name: BlockRule.RuleType
        nameWithType: BlockRule.RuleType
        qualifiedName: BlockRule.RuleType
    isDefinition: true
    commentId: T:Global.BlockRule.RuleType
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Global.BlockRule.ToString*:
    name:
      CSharp:
      - id: Global.BlockRule.ToString*
        name: ToString
        nameWithType: BlockRule.ToString
        qualifiedName: BlockRule.ToString
      VB:
      - id: Global.BlockRule.ToString*
        name: ToString
        nameWithType: BlockRule.ToString
        qualifiedName: BlockRule.ToString
    isDefinition: true
    commentId: Overload:Global.BlockRule.ToString
  Global.BlockRule:
    name:
      CSharp:
      - id: Global.BlockRule
        name: BlockRule
        nameWithType: BlockRule
        qualifiedName: BlockRule
      VB:
      - id: Global.BlockRule
        name: BlockRule
        nameWithType: BlockRule
        qualifiedName: BlockRule
    isDefinition: true
    commentId: T:Global.BlockRule
  Global.OffsetCondition.Offset:
    name:
      CSharp:
      - id: Global.OffsetCondition.Offset
        name: OffsetCondition.Offset
        nameWithType: OffsetCondition.Offset
        qualifiedName: OffsetCondition.Offset
      VB:
      - id: Global.OffsetCondition.Offset
        name: OffsetCondition.Offset
        nameWithType: OffsetCondition.Offset
        qualifiedName: OffsetCondition.Offset
    isDefinition: true
    commentId: T:Global.OffsetCondition.Offset
  Global.List{BlockRule}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.BlockRule
        name: BlockRule
        nameWithType: BlockRule
        qualifiedName: BlockRule
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.BlockRule
        name: BlockRule
        nameWithType: BlockRule
        qualifiedName: BlockRule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{BlockRule}'
  Global.Vector3[]:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.OffsetCondition.GetFromVector*:
    name:
      CSharp:
      - id: Global.OffsetCondition.GetFromVector*
        name: GetFromVector
        nameWithType: OffsetCondition.GetFromVector
        qualifiedName: OffsetCondition.GetFromVector
      VB:
      - id: Global.OffsetCondition.GetFromVector*
        name: GetFromVector
        nameWithType: OffsetCondition.GetFromVector
        qualifiedName: OffsetCondition.GetFromVector
    isDefinition: true
    commentId: Overload:Global.OffsetCondition.GetFromVector
  Global.OffsetCondition.#ctor*:
    name:
      CSharp:
      - id: Global.OffsetCondition.#ctor*
        name: OffsetCondition
        nameWithType: OffsetCondition.OffsetCondition
        qualifiedName: OffsetCondition.OffsetCondition
      VB:
      - id: Global.OffsetCondition.#ctor*
        name: OffsetCondition
        nameWithType: OffsetCondition.OffsetCondition
        qualifiedName: OffsetCondition.OffsetCondition
    isDefinition: true
    commentId: Overload:Global.OffsetCondition.#ctor
  Global.OffsetCondition.ToString*:
    name:
      CSharp:
      - id: Global.OffsetCondition.ToString*
        name: ToString
        nameWithType: OffsetCondition.ToString
        qualifiedName: OffsetCondition.ToString
      VB:
      - id: Global.OffsetCondition.ToString*
        name: ToString
        nameWithType: OffsetCondition.ToString
        qualifiedName: OffsetCondition.ToString
    isDefinition: true
    commentId: Overload:Global.OffsetCondition.ToString
  Global.OffsetCondition:
    name:
      CSharp:
      - id: Global.OffsetCondition
        name: OffsetCondition
        nameWithType: OffsetCondition
        qualifiedName: OffsetCondition
      VB:
      - id: Global.OffsetCondition
        name: OffsetCondition
        nameWithType: OffsetCondition
        qualifiedName: OffsetCondition
    isDefinition: true
    commentId: T:Global.OffsetCondition
  Global.RotationAxis:
    name:
      CSharp:
      - id: Global.RotationAxis
        name: RotationAxis
        nameWithType: RotationAxis
        qualifiedName: RotationAxis
      VB:
      - id: Global.RotationAxis
        name: RotationAxis
        nameWithType: RotationAxis
        qualifiedName: RotationAxis
    isDefinition: true
    commentId: T:Global.RotationAxis
  Global.PerFaceFlag:
    name:
      CSharp:
      - id: Global.PerFaceFlag
        name: PerFaceFlag
        nameWithType: PerFaceFlag
        qualifiedName: PerFaceFlag
      VB:
      - id: Global.PerFaceFlag
        name: PerFaceFlag
        nameWithType: PerFaceFlag
        qualifiedName: PerFaceFlag
    isDefinition: true
    commentId: T:Global.PerFaceFlag
  Global.PerFaceFlag[]:
    name:
      CSharp:
      - id: Global.PerFaceFlag
        name: PerFaceFlag
        nameWithType: PerFaceFlag
        qualifiedName: PerFaceFlag
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.PerFaceFlag
        name: PerFaceFlag
        nameWithType: PerFaceFlag
        qualifiedName: PerFaceFlag
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.List{OffsetCondition}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.OffsetCondition
        name: OffsetCondition
        nameWithType: OffsetCondition
        qualifiedName: OffsetCondition
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.OffsetCondition
        name: OffsetCondition
        nameWithType: OffsetCondition
        qualifiedName: OffsetCondition
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{OffsetCondition}'
  Global.CustomBuilder[]:
    name:
      CSharp:
      - id: Global.CustomBuilder
        name: CustomBuilder
        nameWithType: CustomBuilder
        qualifiedName: CustomBuilder
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.CustomBuilder
        name: CustomBuilder
        nameWithType: CustomBuilder
        qualifiedName: CustomBuilder
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.MeshUsageCase.ToString*:
    name:
      CSharp:
      - id: Global.MeshUsageCase.ToString*
        name: ToString
        nameWithType: MeshUsageCase.ToString
        qualifiedName: MeshUsageCase.ToString
      VB:
      - id: Global.MeshUsageCase.ToString*
        name: ToString
        nameWithType: MeshUsageCase.ToString
        qualifiedName: MeshUsageCase.ToString
    isDefinition: true
    commentId: Overload:Global.MeshUsageCase.ToString
  Global.MeshUsageCase:
    name:
      CSharp:
      - id: Global.MeshUsageCase
        name: MeshUsageCase
        nameWithType: MeshUsageCase
        qualifiedName: MeshUsageCase
      VB:
      - id: Global.MeshUsageCase
        name: MeshUsageCase
        nameWithType: MeshUsageCase
        qualifiedName: MeshUsageCase
    isDefinition: true
    commentId: T:Global.MeshUsageCase
  Global.List{MeshUsageCase}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.MeshUsageCase
        name: MeshUsageCase
        nameWithType: MeshUsageCase
        qualifiedName: MeshUsageCase
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.MeshUsageCase
        name: MeshUsageCase
        nameWithType: MeshUsageCase
        qualifiedName: MeshUsageCase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{MeshUsageCase}'
  Global.CustomBuilder:
    name:
      CSharp:
      - id: Global.CustomBuilder
        name: CustomBuilder
        nameWithType: CustomBuilder
        qualifiedName: CustomBuilder
      VB:
      - id: Global.CustomBuilder
        name: CustomBuilder
        nameWithType: CustomBuilder
        qualifiedName: CustomBuilder
    isDefinition: true
    commentId: T:Global.CustomBuilder
  Global.Sprite[]:
    name:
      CSharp:
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Dictionary`2:
    name:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.Dictionary`2'
  Global.Dictionary{System.String,Sprite}:
    name:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Dictionary`2
    commentId: '!:Global.Dictionary{System.String,Sprite}'
  Global.ImageContainer.GetAll*:
    name:
      CSharp:
      - id: Global.ImageContainer.GetAll*
        name: GetAll
        nameWithType: ImageContainer.GetAll
        qualifiedName: ImageContainer.GetAll
      VB:
      - id: Global.ImageContainer.GetAll*
        name: GetAll
        nameWithType: ImageContainer.GetAll
        qualifiedName: ImageContainer.GetAll
    isDefinition: true
    commentId: Overload:Global.ImageContainer.GetAll
  Global.ImageContainer:
    name:
      CSharp:
      - id: Global.ImageContainer
        name: ImageContainer
        nameWithType: ImageContainer
        qualifiedName: ImageContainer
      VB:
      - id: Global.ImageContainer
        name: ImageContainer
        nameWithType: ImageContainer
        qualifiedName: ImageContainer
    isDefinition: true
    commentId: T:Global.ImageContainer
  Global.PrefabBlockBuilder:
    name:
      CSharp:
      - id: Global.PrefabBlockBuilder
        name: PrefabBlockBuilder
        nameWithType: PrefabBlockBuilder
        qualifiedName: PrefabBlockBuilder
      VB:
      - id: Global.PrefabBlockBuilder
        name: PrefabBlockBuilder
        nameWithType: PrefabBlockBuilder
        qualifiedName: PrefabBlockBuilder
    isDefinition: true
    commentId: T:Global.PrefabBlockBuilder
  Global.PrefabUsageCase.ToString*:
    name:
      CSharp:
      - id: Global.PrefabUsageCase.ToString*
        name: ToString
        nameWithType: PrefabUsageCase.ToString
        qualifiedName: PrefabUsageCase.ToString
      VB:
      - id: Global.PrefabUsageCase.ToString*
        name: ToString
        nameWithType: PrefabUsageCase.ToString
        qualifiedName: PrefabUsageCase.ToString
    isDefinition: true
    commentId: Overload:Global.PrefabUsageCase.ToString
  Global.PrefabUsageCase:
    name:
      CSharp:
      - id: Global.PrefabUsageCase
        name: PrefabUsageCase
        nameWithType: PrefabUsageCase
        qualifiedName: PrefabUsageCase
      VB:
      - id: Global.PrefabUsageCase
        name: PrefabUsageCase
        nameWithType: PrefabUsageCase
        qualifiedName: PrefabUsageCase
    isDefinition: true
    commentId: T:Global.PrefabUsageCase
  Global.List{PrefabUsageCase}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.PrefabUsageCase
        name: PrefabUsageCase
        nameWithType: PrefabUsageCase
        qualifiedName: PrefabUsageCase
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.PrefabUsageCase
        name: PrefabUsageCase
        nameWithType: PrefabUsageCase
        qualifiedName: PrefabUsageCase
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{PrefabUsageCase}'
  Global.PrefabRuleBlockBuilder:
    name:
      CSharp:
      - id: Global.PrefabRuleBlockBuilder
        name: PrefabRuleBlockBuilder
        nameWithType: PrefabRuleBlockBuilder
        qualifiedName: PrefabRuleBlockBuilder
      VB:
      - id: Global.PrefabRuleBlockBuilder
        name: PrefabRuleBlockBuilder
        nameWithType: PrefabRuleBlockBuilder
        qualifiedName: PrefabRuleBlockBuilder
    isDefinition: true
    commentId: T:Global.PrefabRuleBlockBuilder
  Global.WeightedPrefabBlockBuilder.WeightedPrefab[]:
    name:
      CSharp:
      - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab
        name: WeightedPrefabBlockBuilder.WeightedPrefab
        nameWithType: WeightedPrefabBlockBuilder.WeightedPrefab
        qualifiedName: WeightedPrefabBlockBuilder.WeightedPrefab
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab
        name: WeightedPrefabBlockBuilder.WeightedPrefab
        nameWithType: WeightedPrefabBlockBuilder.WeightedPrefab
        qualifiedName: WeightedPrefabBlockBuilder.WeightedPrefab
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.WeightedPrefabBlockBuilder:
    name:
      CSharp:
      - id: Global.WeightedPrefabBlockBuilder
        name: WeightedPrefabBlockBuilder
        nameWithType: WeightedPrefabBlockBuilder
        qualifiedName: WeightedPrefabBlockBuilder
      VB:
      - id: Global.WeightedPrefabBlockBuilder
        name: WeightedPrefabBlockBuilder
        nameWithType: WeightedPrefabBlockBuilder
        qualifiedName: WeightedPrefabBlockBuilder
    isDefinition: true
    commentId: T:Global.WeightedPrefabBlockBuilder
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  Global.WeightedPrefabBlockBuilder.WeightedPrefab:
    name:
      CSharp:
      - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab
        name: WeightedPrefabBlockBuilder.WeightedPrefab
        nameWithType: WeightedPrefabBlockBuilder.WeightedPrefab
        qualifiedName: WeightedPrefabBlockBuilder.WeightedPrefab
      VB:
      - id: Global.WeightedPrefabBlockBuilder.WeightedPrefab
        name: WeightedPrefabBlockBuilder.WeightedPrefab
        nameWithType: WeightedPrefabBlockBuilder.WeightedPrefab
        qualifiedName: WeightedPrefabBlockBuilder.WeightedPrefab
    isDefinition: true
    commentId: T:Global.WeightedPrefabBlockBuilder.WeightedPrefab
  Global.BlockEditor.DrawBlockEditor*:
    name:
      CSharp:
      - id: Global.BlockEditor.DrawBlockEditor*
        name: DrawBlockEditor
        nameWithType: BlockEditor.DrawBlockEditor
        qualifiedName: BlockEditor.DrawBlockEditor
      VB:
      - id: Global.BlockEditor.DrawBlockEditor*
        name: DrawBlockEditor
        nameWithType: BlockEditor.DrawBlockEditor
        qualifiedName: BlockEditor.DrawBlockEditor
    isDefinition: true
    commentId: Overload:Global.BlockEditor.DrawBlockEditor
  Global.BlockEditor:
    name:
      CSharp:
      - id: Global.BlockEditor
        name: BlockEditor
        nameWithType: BlockEditor
        qualifiedName: BlockEditor
      VB:
      - id: Global.BlockEditor
        name: BlockEditor
        nameWithType: BlockEditor
        qualifiedName: BlockEditor
    isDefinition: true
    commentId: T:Global.BlockEditor
  Global.BlockSetEditor.OnEnable*:
    name:
      CSharp:
      - id: Global.BlockSetEditor.OnEnable*
        name: OnEnable
        nameWithType: BlockSetEditor.OnEnable
        qualifiedName: BlockSetEditor.OnEnable
      VB:
      - id: Global.BlockSetEditor.OnEnable*
        name: OnEnable
        nameWithType: BlockSetEditor.OnEnable
        qualifiedName: BlockSetEditor.OnEnable
    isDefinition: true
    commentId: Overload:Global.BlockSetEditor.OnEnable
  Global.BlockSetEditor.OnDisable*:
    name:
      CSharp:
      - id: Global.BlockSetEditor.OnDisable*
        name: OnDisable
        nameWithType: BlockSetEditor.OnDisable
        qualifiedName: BlockSetEditor.OnDisable
      VB:
      - id: Global.BlockSetEditor.OnDisable*
        name: OnDisable
        nameWithType: BlockSetEditor.OnDisable
        qualifiedName: BlockSetEditor.OnDisable
    isDefinition: true
    commentId: Overload:Global.BlockSetEditor.OnDisable
  Global.VisualElement:
    name:
      CSharp:
      - id: Global.VisualElement
        name: VisualElement
        nameWithType: VisualElement
        qualifiedName: VisualElement
        isExternal: true
      VB:
      - id: Global.VisualElement
        name: VisualElement
        nameWithType: VisualElement
        qualifiedName: VisualElement
        isExternal: true
    isDefinition: true
    commentId: '!:Global.VisualElement'
  Global.BlockSetEditor.CreateInspectorGUI*:
    name:
      CSharp:
      - id: Global.BlockSetEditor.CreateInspectorGUI*
        name: CreateInspectorGUI
        nameWithType: BlockSetEditor.CreateInspectorGUI
        qualifiedName: BlockSetEditor.CreateInspectorGUI
      VB:
      - id: Global.BlockSetEditor.CreateInspectorGUI*
        name: CreateInspectorGUI
        nameWithType: BlockSetEditor.CreateInspectorGUI
        qualifiedName: BlockSetEditor.CreateInspectorGUI
    isDefinition: true
    commentId: Overload:Global.BlockSetEditor.CreateInspectorGUI
  Global.Texture:
    name:
      CSharp:
      - id: Global.Texture
        name: Texture
        nameWithType: Texture
        qualifiedName: Texture
        isExternal: true
      VB:
      - id: Global.Texture
        name: Texture
        nameWithType: Texture
        qualifiedName: Texture
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Texture'
  Global.Mesh:
    name:
      CSharp:
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
      VB:
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Mesh'
  Global.BlockSetEditor.DrawRenderPreview*:
    name:
      CSharp:
      - id: Global.BlockSetEditor.DrawRenderPreview*
        name: DrawRenderPreview
        nameWithType: BlockSetEditor.DrawRenderPreview
        qualifiedName: BlockSetEditor.DrawRenderPreview
      VB:
      - id: Global.BlockSetEditor.DrawRenderPreview*
        name: DrawRenderPreview
        nameWithType: BlockSetEditor.DrawRenderPreview
        qualifiedName: BlockSetEditor.DrawRenderPreview
    isDefinition: true
    commentId: Overload:Global.BlockSetEditor.DrawRenderPreview
  Global.BlockSetEditor:
    name:
      CSharp:
      - id: Global.BlockSetEditor
        name: BlockSetEditor
        nameWithType: BlockSetEditor
        qualifiedName: BlockSetEditor
      VB:
      - id: Global.BlockSetEditor
        name: BlockSetEditor
        nameWithType: BlockSetEditor
        qualifiedName: BlockSetEditor
    isDefinition: true
    commentId: T:Global.BlockSetEditor
  Global.BlockSetMenus:
    name:
      CSharp:
      - id: Global.BlockSetMenus
        name: BlockSetMenus
        nameWithType: BlockSetMenus
        qualifiedName: BlockSetMenus
      VB:
      - id: Global.BlockSetMenus
        name: BlockSetMenus
        nameWithType: BlockSetMenus
        qualifiedName: BlockSetMenus
    isDefinition: true
    commentId: T:Global.BlockSetMenus
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
  Global.MeshUsageCaseEditorComponent:
    name:
      CSharp:
      - id: Global.MeshUsageCaseEditorComponent
        name: MeshUsageCaseEditorComponent
        nameWithType: MeshUsageCaseEditorComponent
        qualifiedName: MeshUsageCaseEditorComponent
      VB:
      - id: Global.MeshUsageCaseEditorComponent
        name: MeshUsageCaseEditorComponent
        nameWithType: MeshUsageCaseEditorComponent
        qualifiedName: MeshUsageCaseEditorComponent
    isDefinition: true
    commentId: T:Global.MeshUsageCaseEditorComponent
  Global.CustomBuilderEditorWindow.Open*:
    name:
      CSharp:
      - id: Global.CustomBuilderEditorWindow.Open*
        name: Open
        nameWithType: CustomBuilderEditorWindow.Open
        qualifiedName: CustomBuilderEditorWindow.Open
      VB:
      - id: Global.CustomBuilderEditorWindow.Open*
        name: Open
        nameWithType: CustomBuilderEditorWindow.Open
        qualifiedName: CustomBuilderEditorWindow.Open
    isDefinition: true
    commentId: Overload:Global.CustomBuilderEditorWindow.Open
  Global.CustomBuilderEditorWindow.SetTarget*:
    name:
      CSharp:
      - id: Global.CustomBuilderEditorWindow.SetTarget*
        name: SetTarget
        nameWithType: CustomBuilderEditorWindow.SetTarget
        qualifiedName: CustomBuilderEditorWindow.SetTarget
      VB:
      - id: Global.CustomBuilderEditorWindow.SetTarget*
        name: SetTarget
        nameWithType: CustomBuilderEditorWindow.SetTarget
        qualifiedName: CustomBuilderEditorWindow.SetTarget
    isDefinition: true
    commentId: Overload:Global.CustomBuilderEditorWindow.SetTarget
  Global.CustomBuilderEditorWindow:
    name:
      CSharp:
      - id: Global.CustomBuilderEditorWindow
        name: CustomBuilderEditorWindow
        nameWithType: CustomBuilderEditorWindow
        qualifiedName: CustomBuilderEditorWindow
      VB:
      - id: Global.CustomBuilderEditorWindow
        name: CustomBuilderEditorWindow
        nameWithType: CustomBuilderEditorWindow
        qualifiedName: CustomBuilderEditorWindow
    isDefinition: true
    commentId: T:Global.CustomBuilderEditorWindow
  Global.EditorGUIUtils.SELECT_COLOR*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.SELECT_COLOR*
        name: SELECT_COLOR
        nameWithType: EditorGUIUtils.SELECT_COLOR
        qualifiedName: EditorGUIUtils.SELECT_COLOR
      VB:
      - id: Global.EditorGUIUtils.SELECT_COLOR*
        name: SELECT_COLOR
        nameWithType: EditorGUIUtils.SELECT_COLOR
        qualifiedName: EditorGUIUtils.SELECT_COLOR
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.SELECT_COLOR
  Global.EditorGUIUtils.DrawRect*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.DrawRect*
        name: DrawRect
        nameWithType: EditorGUIUtils.DrawRect
        qualifiedName: EditorGUIUtils.DrawRect
      VB:
      - id: Global.EditorGUIUtils.DrawRect*
        name: DrawRect
        nameWithType: EditorGUIUtils.DrawRect
        qualifiedName: EditorGUIUtils.DrawRect
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.DrawRect
  Global.EditorGUIUtils.FillRect*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.FillRect*
        name: FillRect
        nameWithType: EditorGUIUtils.FillRect
        qualifiedName: EditorGUIUtils.FillRect
      VB:
      - id: Global.EditorGUIUtils.FillRect*
        name: FillRect
        nameWithType: EditorGUIUtils.FillRect
        qualifiedName: EditorGUIUtils.FillRect
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.FillRect
  System.Object[]:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.EditorGUIUtils.Popup*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.Popup*
        name: Popup
        nameWithType: EditorGUIUtils.Popup
        qualifiedName: EditorGUIUtils.Popup
      VB:
      - id: Global.EditorGUIUtils.Popup*
        name: Popup
        nameWithType: EditorGUIUtils.Popup
        qualifiedName: EditorGUIUtils.Popup
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.Popup
  Global.Enum:
    name:
      CSharp:
      - id: Global.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: Enum
        isExternal: true
      VB:
      - id: Global.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: Enum
        isExternal: true
    isDefinition: true
  Global.EditorGUIUtils.Toolbar*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.Toolbar*
        name: Toolbar
        nameWithType: EditorGUIUtils.Toolbar
        qualifiedName: EditorGUIUtils.Toolbar
      VB:
      - id: Global.EditorGUIUtils.Toolbar*
        name: Toolbar
        nameWithType: EditorGUIUtils.Toolbar
        qualifiedName: EditorGUIUtils.Toolbar
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.Toolbar
  Global.IList:
    name:
      CSharp:
      - id: Global.IList
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
      VB:
      - id: Global.IList
        name: IList
        nameWithType: IList
        qualifiedName: IList
        isExternal: true
    isDefinition: true
    commentId: '!:Global.IList'
  Global.EditorGUIUtils.DrawList*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.DrawList*
        name: DrawList
        nameWithType: EditorGUIUtils.DrawList
        qualifiedName: EditorGUIUtils.DrawList
      VB:
      - id: Global.EditorGUIUtils.DrawList*
        name: DrawList
        nameWithType: EditorGUIUtils.DrawList
        qualifiedName: EditorGUIUtils.DrawList
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.DrawList
  '{A}[]':
    name:
      CSharp:
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  '{B}[]':
    name:
      CSharp:
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.Func`2:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.Func{{A},{A}}:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: A
        nameWithType: A
        qualifiedName: A
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Func`2
    commentId: '!:Global.Func{``0,``0}'
  Global.Func{{B},{B}}:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: B
        nameWithType: B
        qualifiedName: B
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Func`2
    commentId: '!:Global.Func{``1,``1}'
  Global.EditorGUIUtils.Draw2Arrays*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.Draw2Arrays*
        name: Draw2Arrays
        nameWithType: EditorGUIUtils.Draw2Arrays
        qualifiedName: EditorGUIUtils.Draw2Arrays
      VB:
      - id: Global.EditorGUIUtils.Draw2Arrays*
        name: Draw2Arrays
        nameWithType: EditorGUIUtils.Draw2Arrays
        qualifiedName: EditorGUIUtils.Draw2Arrays
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.Draw2Arrays
  Global.EditorGUIUtils.GetStateObject*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.GetStateObject*
        name: GetStateObject
        nameWithType: EditorGUIUtils.GetStateObject
        qualifiedName: EditorGUIUtils.GetStateObject
      VB:
      - id: Global.EditorGUIUtils.GetStateObject*
        name: GetStateObject
        nameWithType: EditorGUIUtils.GetStateObject
        qualifiedName: EditorGUIUtils.GetStateObject
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.GetStateObject
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.EditorGUIUtils.SetArrayLength*:
    name:
      CSharp:
      - id: Global.EditorGUIUtils.SetArrayLength*
        name: SetArrayLength
        nameWithType: EditorGUIUtils.SetArrayLength
        qualifiedName: EditorGUIUtils.SetArrayLength
      VB:
      - id: Global.EditorGUIUtils.SetArrayLength*
        name: SetArrayLength
        nameWithType: EditorGUIUtils.SetArrayLength
        qualifiedName: EditorGUIUtils.SetArrayLength
    isDefinition: true
    commentId: Overload:Global.EditorGUIUtils.SetArrayLength
  Global.EditorGUIUtils:
    name:
      CSharp:
      - id: Global.EditorGUIUtils
        name: EditorGUIUtils
        nameWithType: EditorGUIUtils
        qualifiedName: EditorGUIUtils
      VB:
      - id: Global.EditorGUIUtils
        name: EditorGUIUtils
        nameWithType: EditorGUIUtils
        qualifiedName: EditorGUIUtils
    isDefinition: true
    commentId: T:Global.EditorGUIUtils
  Global.Rect[]:
    name:
      CSharp:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Global.GUIUtils.Separate*:
    name:
      CSharp:
      - id: Global.GUIUtils.Separate*
        name: Separate
        nameWithType: GUIUtils.Separate
        qualifiedName: GUIUtils.Separate
      VB:
      - id: Global.GUIUtils.Separate*
        name: Separate
        nameWithType: GUIUtils.Separate
        qualifiedName: GUIUtils.Separate
    isDefinition: true
    commentId: Overload:Global.GUIUtils.Separate
  Global.GUIUtils.Shrink*:
    name:
      CSharp:
      - id: Global.GUIUtils.Shrink*
        name: Shrink
        nameWithType: GUIUtils.Shrink
        qualifiedName: GUIUtils.Shrink
      VB:
      - id: Global.GUIUtils.Shrink*
        name: Shrink
        nameWithType: GUIUtils.Shrink
        qualifiedName: GUIUtils.Shrink
    isDefinition: true
    commentId: Overload:Global.GUIUtils.Shrink
  Global.GUIUtils:
    name:
      CSharp:
      - id: Global.GUIUtils
        name: GUIUtils
        nameWithType: GUIUtils
        qualifiedName: GUIUtils
      VB:
      - id: Global.GUIUtils
        name: GUIUtils
        nameWithType: GUIUtils
        qualifiedName: GUIUtils
    isDefinition: true
    commentId: T:Global.GUIUtils
  Global.ModkitPrefabContainerEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: Global.ModkitPrefabContainerEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: ModkitPrefabContainerEditor.OnInspectorGUI
        qualifiedName: ModkitPrefabContainerEditor.OnInspectorGUI
      VB:
      - id: Global.ModkitPrefabContainerEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: ModkitPrefabContainerEditor.OnInspectorGUI
        qualifiedName: ModkitPrefabContainerEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Global.ModkitPrefabContainerEditor.OnInspectorGUI
  Global.ModkitPrefabContainerEditor:
    name:
      CSharp:
      - id: Global.ModkitPrefabContainerEditor
        name: ModkitPrefabContainerEditor
        nameWithType: ModkitPrefabContainerEditor
        qualifiedName: ModkitPrefabContainerEditor
      VB:
      - id: Global.ModkitPrefabContainerEditor
        name: ModkitPrefabContainerEditor
        nameWithType: ModkitPrefabContainerEditor
        qualifiedName: ModkitPrefabContainerEditor
    isDefinition: true
    commentId: T:Global.ModkitPrefabContainerEditor
  Global.PrefabUsageCaseEditorComponent:
    name:
      CSharp:
      - id: Global.PrefabUsageCaseEditorComponent
        name: PrefabUsageCaseEditorComponent
        nameWithType: PrefabUsageCaseEditorComponent
        qualifiedName: PrefabUsageCaseEditorComponent
      VB:
      - id: Global.PrefabUsageCaseEditorComponent
        name: PrefabUsageCaseEditorComponent
        nameWithType: PrefabUsageCaseEditorComponent
        qualifiedName: PrefabUsageCaseEditorComponent
    isDefinition: true
    commentId: T:Global.PrefabUsageCaseEditorComponent
  Global.PrefabRuleBlockBuilderEditorWindow.Open*:
    name:
      CSharp:
      - id: Global.PrefabRuleBlockBuilderEditorWindow.Open*
        name: Open
        nameWithType: PrefabRuleBlockBuilderEditorWindow.Open
        qualifiedName: PrefabRuleBlockBuilderEditorWindow.Open
      VB:
      - id: Global.PrefabRuleBlockBuilderEditorWindow.Open*
        name: Open
        nameWithType: PrefabRuleBlockBuilderEditorWindow.Open
        qualifiedName: PrefabRuleBlockBuilderEditorWindow.Open
    isDefinition: true
    commentId: Overload:Global.PrefabRuleBlockBuilderEditorWindow.Open
  Global.PrefabRuleBlockBuilderEditorWindow.SetTarget*:
    name:
      CSharp:
      - id: Global.PrefabRuleBlockBuilderEditorWindow.SetTarget*
        name: SetTarget
        nameWithType: PrefabRuleBlockBuilderEditorWindow.SetTarget
        qualifiedName: PrefabRuleBlockBuilderEditorWindow.SetTarget
      VB:
      - id: Global.PrefabRuleBlockBuilderEditorWindow.SetTarget*
        name: SetTarget
        nameWithType: PrefabRuleBlockBuilderEditorWindow.SetTarget
        qualifiedName: PrefabRuleBlockBuilderEditorWindow.SetTarget
    isDefinition: true
    commentId: Overload:Global.PrefabRuleBlockBuilderEditorWindow.SetTarget
  Global.PrefabRuleBlockBuilderEditorWindow:
    name:
      CSharp:
      - id: Global.PrefabRuleBlockBuilderEditorWindow
        name: PrefabRuleBlockBuilderEditorWindow
        nameWithType: PrefabRuleBlockBuilderEditorWindow
        qualifiedName: PrefabRuleBlockBuilderEditorWindow
      VB:
      - id: Global.PrefabRuleBlockBuilderEditorWindow
        name: PrefabRuleBlockBuilderEditorWindow
        nameWithType: PrefabRuleBlockBuilderEditorWindow
        qualifiedName: PrefabRuleBlockBuilderEditorWindow
    isDefinition: true
    commentId: T:Global.PrefabRuleBlockBuilderEditorWindow
  Global:
    name:
      CSharp:
      - name: Global
        nameWithType: Global
        qualifiedName: Global
      VB:
      - name: ''
        nameWithType: ''
        qualifiedName: ''
    isDefinition: true
